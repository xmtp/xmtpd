#!/bin/bash

function get_chain_id() {
    echo "⧖ Getting chain id from RPC ${1}"
    hex_chain_id=$(curl -s --connect-timeout 5 --max-time 10 -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_chainId","id":1}' ${1} | jq -r '.result' || true)

    if [[ -z "${hex_chain_id:-}" ]]; then
        echo "ERROR: Failed to get chain id from RPC ${1}"
        exit 1
    fi

    export chain_id=$((hex_chain_id))
}

function get_chain_name() {
    case $chain_id in
        31337)
            echo "anvil_localnet"
            ;;
        241320161)
            echo "xmtp_testnet"
            ;;
        84532)
            echo "base_sepolia"
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

function forge_deploy_script() {
    case $1 in
        group_messages)
            get_chain_id "${APP_CHAIN_RPC_URL}"
            echo "⧖ Deploying GroupMessages to chainId ${chain_id} using RPC ${APP_CHAIN_RPC_URL}"
            forge script --quiet --rpc-url "${APP_CHAIN_RPC_URL}" --broadcast script/DeployGroupMessages.s.sol || BUILD_FAILED=true
            if [[ -n "${BUILD_FAILED:-}" ]]; then
                echo "Failed to deploy group messages contract"
                exit 1
            fi

            export VERIFIER="${APP_CHAIN_VERIFIER:-}"
            export VERIFIER_URL="${APP_CHAIN_VERIFIER_URL:-}"
            forge_verify_contract GroupMessages

            echo -e "\033[32m✔\033[0m GroupMessages deployed. Deployment details in contracts/config/anvil_localnet/GroupMessages.json\n"
            ;;

        identity_updates)
            get_chain_id "${APP_CHAIN_RPC_URL}"
            echo "⧖ Deploying IdentityUpdates to chainId ${chain_id} using RPC ${APP_CHAIN_RPC_URL}"
            forge script --quiet --rpc-url "${APP_CHAIN_RPC_URL}" --broadcast script/DeployIdentityUpdates.s.sol || BUILD_FAILED=true
            if [[ -n "${BUILD_FAILED:-}" ]]; then
                echo "Failed to deploy identity updates contract"
                exit 1
            fi

            export VERIFIER="${APP_CHAIN_VERIFIER:-}"
            export VERIFIER_URL="${APP_CHAIN_VERIFIER_URL:-}"
            forge_verify_contract IdentityUpdates

            echo -e "\033[32m✔\033[0m IdentityUpdates deployed. Deployment details in contracts/config/anvil_localnet/IdentityUpdates.json\n"
            ;;

        nodes)
            get_chain_id "${PARENT_CHAIN_RPC_URL}"
            echo "⧖ Deploying Nodes to chainId ${chain_id} using RPC ${PARENT_CHAIN_RPC_URL}"
            forge script --quiet --rpc-url "${PARENT_CHAIN_RPC_URL}" --broadcast script/DeployNodeRegistry.s.sol || BUILD_FAILED=true
            if [[ -n "${BUILD_FAILED:-}" ]]; then
                echo "Failed to deploy Nodes contract"
                exit 1
            fi

            export VERIFIER="${PARENT_CHAIN_VERIFIER:-}"
            export VERIFIER_URL="${PARENT_CHAIN_VERIFIER_URL:-}"
            forge_verify_contract Nodes

            echo -e "\033[32m✔\033[0m Nodes deployed. Deployment details in contracts/config/anvil_localnet/XMTPNodeRegistry.json\n"
            ;;

        rates_manager)
            get_chain_id "${APP_CHAIN_RPC_URL}"
            echo "⧖ Deploying RatesManager to chainId ${chain_id} using RPC ${APP_CHAIN_RPC_URL}"
            forge script --quiet --rpc-url "${APP_CHAIN_RPC_URL}" --broadcast script/DeployRatesManager.s.sol || BUILD_FAILED=true
            if [[ -n "${BUILD_FAILED:-}" ]]; then
                echo "Failed to deploy rates manager contract"
                exit 1
            fi

            export VERIFIER="${APP_CHAIN_VERIFIER:-}"
            export VERIFIER_URL="${APP_CHAIN_VERIFIER_URL:-}"
            forge_verify_contract RatesManager

            echo -e "\033[32m✔\033[0m RatesManager deployed. Deployment details in contracts/config/anvil_localnet/RatesManager.json\n"
            ;;

        *)
            echo "Invalid option. Use 'group_messages', 'identity_updates', 'nodes', or 'rates_manager'."
            exit 1
            ;;
    esac
}

function forge_verify_contract() {
    chain_name=$(get_chain_name)
    contract_name=$1

    if [[ "$chain_name" == "anvil_localnet" ]]; then 
        echo "Skipping verification on anvil_localnet"
        return
    fi

    if [[ -z "$VERIFIER_URL" ]] || [[ -z "$VERIFIER" ]]; then
        echo "Skipping verification for contract $contract_name because VERIFIER_URL or VERIFIER is not set"
        return
    fi

    impl_key="$(echo ${contract_name:0:1} | tr '[:upper:]' '[:lower:]')${contract_name:1}Impl"
    deployed_address="$(jq -r ".addresses.$impl_key" config/${chain_name}/${contract_name}.json)"
    if [ -z "$deployed_address" ]; then
        echo "Failed to get deployed address for $contract_name"
        exit 1
    fi

    forge verify-contract \
        --verifier=${VERIFIER} \
        --verifier-url=${VERIFIER_URL} \
        --chain-id=${chain_id} \
        --compiler-version ${COMPILER_VERSION} \
        $deployed_address \
        $contract_name
}

function forge_clean() {
    echo -e "⧖ Cleaning old artifacts"

    forge clean &> .forge_clean.tmp.log || BUILD_FAILED=true
    if [[ -n "${BUILD_FAILED:-}" ]]; then
        echo "ERROR: Failed to clean old artifacts"
        cat .forge_clean.tmp.log
        exit 1
    fi
    rm .forge_clean.tmp.log

    echo -e "\033[32m✔\033[0m Old artifacts cleaned successfully\n"
}

function forge_soldeer_update() {
    echo -e "⧖ Updating dependencies"

    forge soldeer update &> .forge_soldeer_update.tmp.log || BUILD_FAILED=true
    if [[ -n "${BUILD_FAILED:-}" ]]; then
        echo "ERROR: Failed to update dependencies"
        cat .forge_soldeer_update.tmp.log
        exit 1
    fi
    rm .forge_soldeer_update.tmp.log

    echo -e "\033[32m✔\033[0m Dependencies updated successfully\n"
}

function forge_build_contracts() {
    echo -e "⧖ Building contracts"

    forge build &> .forge_build.tmp.log || BUILD_FAILED=true
    if [[ -n "${BUILD_FAILED:-}" ]]; then
        echo "ERROR: Failed to build contracts"
        cat .forge_build.tmp.log
        exit 1
    fi
    rm .forge_build.tmp.log

    echo -e "\033[32m✔\033[0m Contracts built successfully\n"
}

function forge_test_contracts() {
    echo -e "⧖ Running contract tests"

    forge test &> .forge_test.tmp.log || BUILD_FAILED=true
    if [[ -n "${BUILD_FAILED:-}" ]]; then
        echo "ERROR: Tests failed"
        cat .forge_test.tmp.log
        exit 1
    fi
    rm .forge_test.tmp.log

    echo -e "\033[32m✔\033[0m Tests passed successfully\n"
}

