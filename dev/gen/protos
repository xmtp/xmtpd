#!/usr/bin/env bash
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() {
    echo -e "${BLUE}==>${NC} $*"
}

success() {
    echo -e "${GREEN}✓${NC} $*"
}

warning() {
    echo -e "${YELLOW}!${NC} $*"
}

error() {
    echo -e "${RED}✗${NC} $*" >&2
}

# Show help
show_help() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Generate protobuf files from xmtp/proto repository.

Options:
    --dry-run         Show what would be done without making changes
    --skip-cleanup    Don't remove old generated files
    -h, --help        Show this help message

Environment Variables:
    GEN_PROTO_BRANCH  Branch to use from xmtp/proto (default: main)

Examples:
    $(basename "$0")                              # Generate with default settings
    $(basename "$0") --dry-run                    # Preview what would happen
    GEN_PROTO_BRANCH=dev $(basename "$0")         # Use dev branch

EOF
}

# Parse flags
DRY_RUN=false
SKIP_CLEANUP=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --skip-cleanup)
            SKIP_CLEANUP=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

GEN_PROTO_BRANCH="${GEN_PROTO_BRANCH:-main}"

# Start timing
START_TIME=$(date +%s)

info "Starting protobuf generation from branch: ${GEN_PROTO_BRANCH}"
[[ "$DRY_RUN" == "true" ]] && warning "DRY RUN MODE - No changes will be made"

# Work always from the root directory
script_dir=$(dirname "$(realpath "$0")")
repo_root=$(realpath "${script_dir}/../../")
cd "${repo_root}" || exit 1

info "Working directory: ${repo_root}"

# Expected versions
protoc_gen_go_version_required="1.36.10"
protoc_gen_connect_go_version_required="1.19.1"
protoc_gen_go_grpc_version_required="1.5.1"

# Check prerequisites
info "Checking prerequisites..."

for cmd in go realpath find; do
    if ! command -v "$cmd" &>/dev/null; then
        error "$cmd is required but not installed"
        exit 1
    fi
done

# Check buf is available
if ! go tool -modfile=tools/go.mod buf --version &>/dev/null 2>&1; then
    warning "buf is not available via go tool"
    info "Attempting to install buf via go tool..."
    
    if [[ "$DRY_RUN" == "false" ]]; then
        # Try to sync tools
        if ! (cd tools && go mod tidy) &>/dev/null; then
            error "Failed to sync tools/go.mod"
            exit 1
        fi
    fi
    
    # Check again
    if ! go tool -modfile=tools/go.mod buf --version &>/dev/null 2>&1; then
        error "buf is still not available via go tool"
        error "Try running: cd tools && go mod tidy"
        exit 1
    fi
fi

success "Prerequisites check passed"

# Install or update plugin function
install_or_update_plugin() {
    local plugin_name=$1
    local plugin_package=$2
    local required_version=$3
    
    info "Checking ${plugin_name}..."
    
    if ! command -v "${plugin_name}" &>/dev/null; then
        if [[ "$DRY_RUN" == "true" ]]; then
            info "[DRY RUN] Would install ${plugin_name} v${required_version}"
            return
        fi
        
        info "Installing ${plugin_name} v${required_version}"
        if go install "${plugin_package}@v${required_version}"; then
            success "${plugin_name} installed"
        else
            error "Failed to install ${plugin_name}"
            exit 1
        fi
        return
    fi
    
    # Check version
    local current_version
    current_version=$("${plugin_name}" --version 2>&1 || echo "unknown")
    
    if ! echo "${current_version}" | grep -q "${required_version}"; then
        if [[ "$DRY_RUN" == "true" ]]; then
            info "[DRY RUN] Would update ${plugin_name} to v${required_version}"
            return
        fi
        
        warning "${plugin_name} version mismatch, updating to v${required_version}"
        if go install "${plugin_package}@v${required_version}"; then
            success "${plugin_name} updated"
        else
            error "Failed to update ${plugin_name}"
            exit 1
        fi
    else
        success "${plugin_name} version v${required_version} is correct"
    fi
}

# Install/update plugins
install_or_update_plugin \
    "protoc-gen-go" \
    "google.golang.org/protobuf/cmd/protoc-gen-go" \
    "${protoc_gen_go_version_required}"

install_or_update_plugin \
    "protoc-gen-connect-go" \
    "connectrpc.com/connect/cmd/protoc-gen-connect-go" \
    "${protoc_gen_connect_go_version_required}"

install_or_update_plugin \
    "protoc-gen-go-grpc" \
    "google.golang.org/grpc/cmd/protoc-gen-go-grpc" \
    "${protoc_gen_go_grpc_version_required}"

# Clean up old files
if [[ "$SKIP_CLEANUP" == "false" ]]; then
    info "Cleaning up old protobuf files..."
    
    if [[ ! -d "pkg/proto" ]]; then
        warning "pkg/proto directory does not exist, skipping cleanup"
    else
        # Count files before deletion
        file_count=$(find pkg/proto -type f \( -name "*.pb.go" -o -name "*.pb.gw.go" -o -name "*.connect.go" -o -name "*.swagger.json" \) 2>/dev/null | wc -l | tr -d ' ')
        
        if [[ "$DRY_RUN" == "true" ]]; then
            info "[DRY RUN] Would remove ${file_count} generated files"
        else
            if [[ "$file_count" -gt 0 ]]; then
                find pkg/proto -type f \( -name "*.pb.go" -o -name "*.pb.gw.go" -o -name "*.connect.go" -o -name "*.swagger.json" \) -delete
                success "Removed ${file_count} old generated files"
            else
                info "No old files to remove"
            fi
        fi
    fi
else
    info "Skipping cleanup (--skip-cleanup flag set)"
fi

# Generate protobufs
info "Running buf generate from xmtp/proto..."

if [[ "$DRY_RUN" == "true" ]]; then
    info "[DRY RUN] Would run: buf generate https://github.com/xmtp/proto.git#subdir=proto,branch=${GEN_PROTO_BRANCH}"
    info ""
    success "Dry run completed successfully"
    exit 0
fi

if ! go tool -modfile=tools/go.mod buf generate "https://github.com/xmtp/proto.git#subdir=proto,branch=${GEN_PROTO_BRANCH}"; then
    error "Failed to generate protobuf definitions"
    exit 1
fi

# Verify generation succeeded
info "Verifying generated files..."

if [[ ! -d "pkg/proto" ]]; then
    error "pkg/proto directory was not created"
    exit 1
fi

generated_pb_files=$(find pkg/proto -type f -name "*.pb.go" 2>/dev/null | wc -l | tr -d ' ')
generated_connect_files=$(find pkg/proto -type f -name "*.connect.go" 2>/dev/null | wc -l | tr -d ' ')

if [[ "$generated_pb_files" -eq 0 ]]; then
    error "No .pb.go files were generated. Something went wrong."
    exit 1
fi

success "Generated ${generated_pb_files} protobuf files"
success "Generated ${generated_connect_files} connect files"

# Calculate duration
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

echo ""
success "✨ Protobuf generation completed successfully in ${DURATION}s"
echo ""
info "Generated files in: pkg/proto/"
echo ""
