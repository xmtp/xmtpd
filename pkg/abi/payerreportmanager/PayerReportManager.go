// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package payerreportmanager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IPayerReportManagerPayerReport is an auto generated low-level Go binding around an user-defined struct.
type IPayerReportManagerPayerReport struct {
	StartSequenceId  uint64
	EndSequenceId    uint64
	FeesSettled      *big.Int
	Offset           uint32
	IsSettled        bool
	PayersMerkleRoot [32]byte
	NodeIds          []uint32
}

// IPayerReportManagerPayerReportSignature is an auto generated low-level Go binding around an user-defined struct.
type IPayerReportManagerPayerReportSignature struct {
	NodeId    uint32
	Signature []byte
}

// PayerReportManagerMetaData contains all meta data concerning the PayerReportManager contract.
var PayerReportManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"parameterRegistry_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nodeRegistry_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"payerRegistry_\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"domainSeparator_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PAYER_REPORT_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields_\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name_\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version_\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId_\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions_\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPayerReport\",\"inputs\":[{\"name\":\"originatorNodeId_\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"payerReportIndex_\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"payerReport_\",\"type\":\"tuple\",\"internalType\":\"structIPayerReportManager.PayerReport\",\"components\":[{\"name\":\"startSequenceId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"endSequenceId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"feesSettled\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"offset\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"isSettled\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"payersMerkleRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nodeIds\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPayerReportDigest\",\"inputs\":[{\"name\":\"originatorNodeId_\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"startSequenceId_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"endSequenceId_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"payersMerkleRoot_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nodeIds_\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}],\"outputs\":[{\"name\":\"digest_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPayerReports\",\"inputs\":[{\"name\":\"originatorNodeIds_\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"payerReportIndices_\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[{\"name\":\"payerReports_\",\"type\":\"tuple[]\",\"internalType\":\"structIPayerReportManager.PayerReport[]\",\"components\":[{\"name\":\"startSequenceId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"endSequenceId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"feesSettled\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"offset\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"isSettled\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"payersMerkleRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nodeIds\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"implementation\",\"inputs\":[],\"outputs\":[{\"name\":\"implementation_\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"migrate\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"migratorParameterKey\",\"inputs\":[],\"outputs\":[{\"name\":\"key_\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"nodeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"parameterRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"payerRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"settle\",\"inputs\":[{\"name\":\"originatorNodeId_\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"payerReportIndex_\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"payerFees_\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"},{\"name\":\"proofElements_\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"submit\",\"inputs\":[{\"name\":\"originatorNodeId_\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"startSequenceId_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"endSequenceId_\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"payersMerkleRoot_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nodeIds_\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"signatures_\",\"type\":\"tuple[]\",\"internalType\":\"structIPayerReportManager.PayerReportSignature[]\",\"components\":[{\"name\":\"nodeId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[{\"name\":\"payerReportIndex_\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Migrated\",\"inputs\":[{\"name\":\"migrator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PayerReportSubmitted\",\"inputs\":[{\"name\":\"originatorNodeId\",\"type\":\"uint32\",\"indexed\":true,\"internalType\":\"uint32\"},{\"name\":\"payerReportIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"startSequenceId\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"endSequenceId\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"payersMerkleRoot\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"nodeIds\",\"type\":\"uint32[]\",\"indexed\":false,\"internalType\":\"uint32[]\"},{\"name\":\"signingNodeIds\",\"type\":\"uint32[]\",\"indexed\":false,\"internalType\":\"uint32[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PayerReportSubsetSettled\",\"inputs\":[{\"name\":\"originatorNodeId\",\"type\":\"uint32\",\"indexed\":true,\"internalType\":\"uint32\"},{\"name\":\"payerReportIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"remaining\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"feesSettled\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Upgraded\",\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ArrayLengthMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"EmptyCode\",\"inputs\":[{\"name\":\"migrator_\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"InsufficientSignatures\",\"inputs\":[{\"name\":\"validSignatureCount\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"requiredSignatureCount\",\"type\":\"uint8\",\"internalType\":\"uint8\"}]},{\"type\":\"error\",\"name\":\"InvalidBitCount32Input\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidLeafCount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSequenceIds\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidStartSequenceId\",\"inputs\":[{\"name\":\"startSequenceId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"lastSequenceId\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]},{\"type\":\"error\",\"name\":\"MigrationFailed\",\"inputs\":[{\"name\":\"migrator_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"revertData_\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"type\":\"error\",\"name\":\"NoLeaves\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NoProofElements\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ParameterOutOfTypeBounds\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"PayerReportEntirelySettled\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"PayerReportIndexOutOfBounds\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SettleUsageFailed\",\"inputs\":[{\"name\":\"returnData_\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"type\":\"error\",\"name\":\"UnorderedNodeIds\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroMigrator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroNodeRegistry\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroParameterRegistry\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroPayerRegistry\",\"inputs\":[]}]",
	Bin: "0x610100604052348015610010575f5ffd5b5060405161351638038061351683398101604081905261002f91610194565b466080526001600160a01b03831660a081905261005f5760405163d973fd8d60e01b815260040160405180910390fd5b6001600160a01b03821660c081905261008b5760405163aa63199b60e01b815260040160405180910390fd5b6001600160a01b03811660e08190526100b75760405163434ae9ad60e11b815260040160405180910390fd5b6100bf6100c7565b5050506101d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156101175760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101765780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b80516001600160a01b038116811461018f575f5ffd5b919050565b5f5f5f606084860312156101a6575f5ffd5b6101af84610179565b92506101bd60208501610179565b91506101cb60408501610179565b90509250925092565b60805160a05160c05160e0516132ed6102295f395f818161016b01526106e901525f81816102ba0152818161195d01528181611d070152611df201525f818160f90152610b9101525f6104a301526132ed5ff3fe608060405234801561000f575f5ffd5b50600436106100f0575f3560e01c80636576143c116100935780638fd3ab80116100635780638fd3ab801461027a578063b8712eec14610282578063b881bca014610295578063d9b5c4a5146102b5575f5ffd5b80636576143c146102035780638129fc1c1461021857806384b0196e146102205780638aab82ba1461023b575f5ffd5b806322ccd722116100ce57806322ccd7221461018d5780633644e515146101ad5780633d8fcde2146101b55780635c60da1b146101dc575f5ffd5b80630723499e146100f457806312bd2837146101455780631dc5f4b814610166575b5f5ffd5b61011b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610158610153366004612879565b6102dc565b60405190815260200161013c565b61011b7f000000000000000000000000000000000000000000000000000000000000000081565b6101a061019b3660046128f3565b6102f6565b60405161013c91906129e5565b6101586104a0565b6101587f30503e47cf573d37e2be5212eb8a3f06caca0f3ab0d379e7d05758b47b23d65881565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5461011b565b6102166102113660046129f7565b6104fb565b005b610216610966565b610228610acd565b60405161013c9796959493929190612aae565b60408051808201825260208082527f786d74702e70617965725265706f72744d616e616765722e6d69677261746f7290820152905161013c9190612b6d565b610216610b89565b610158610290366004612b7f565b610bf6565b6102a86102a3366004612c28565b610fdc565b60405161013c9190612c94565b61011b7f000000000000000000000000000000000000000000000000000000000000000081565b5f6102eb8787878787876112b2565b979650505050505050565b6040805160e0810182525f808252602080830182905282840182905260608084018390526080840183905260a0840183905260c084015263ffffffff861682527f26b057ee8e4d60685198828fdf1c618ab8e36b0ab85f54a47b18319f6f718e0090529190912080548390811061036f5761036f612d15565b5f9182526020918290206040805160e0810182526004909302909101805467ffffffffffffffff808216855268010000000000000000820416848601526bffffffffffffffffffffffff7001000000000000000000000000000000008204168484015263ffffffff7c0100000000000000000000000000000000000000000000000000000000909104166060840152600181015460ff1615156080840152600281015460a08401526003810180548351818702810187019094528084529394919360c08601939283018282801561048e57602002820191905f5260205f20905f905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116104515790505b50505050508152505090505b92915050565b5f7f000000000000000000000000000000000000000000000000000000000000000046146104d5576104d061137f565b905090565b507fc7effa11ad597798220888e5d1ba4eeddcc8c2635d01dae8b9f958ac905c11005490565b63ffffffff86165f9081527f26b057ee8e4d60685198828fdf1c618ab8e36b0ab85f54a47b18319f6f718e006020526040902080548610610568576040517fc3e0931f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f81878154811061057b5761057b612d15565b5f9182526020909120600490910201600181015490915060ff16156105cc576040517fe7d70a4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002810154815461060791907c0100000000000000000000000000000000000000000000000000000000900463ffffffff1688888888611468565b805485908290601c906106419084907c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612d6f565b92506101000a81548163ffffffff021916908363ffffffff1602179055505f61066a85856114b5565b82546001840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001663ffffffff8085167c010000000000000000000000000000000000000000000000000000000090940416929092149190911790556040519091505f90819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016907fd219be1b000000000000000000000000000000000000000000000000000000009061073c908c908c90602401612dd2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516107c59190612ead565b5f604051808303815f865af19150503d805f81146107fe576040519150601f19603f3d011682016040523d82523d5f602084013e610803565b606091505b50915091508161084a57806040517fcaa2acb90000000000000000000000000000000000000000000000000000000081526004016108419190612b6d565b60405180910390fd5b5f8180602001905181019061085f9190612ec3565b85549091508b9063ffffffff808f16917f3e2ef0c87bba9a992cfdc5189b278bd9852605eaca1ee05c64f285cff2c07691918d916108bf917c01000000000000000000000000000000000000000000000000000000009091041689612eee565b6040805163ffffffff93841681529290911660208301526bffffffffffffffffffffffff86169082015260600160405180910390a384548190869060109061092a90849070010000000000000000000000000000000090046bffffffffffffffffffffffff16612f0a565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505050505050505050505050565b5f61096f611567565b805490915060ff68010000000000000000820416159067ffffffffffffffff165f8115801561099b5750825b90505f8267ffffffffffffffff1660011480156109b75750303b155b9050811580156109c5575080155b156109fc576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011785558315610a5d5784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b610a6561158f565b8315610ac65784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b5f6060805f5f5f6060610b1060408051808201909152601281527f50617965725265706f72744d616e616765720000000000000000000000000000602082015290565b604080518082018252600181527f310000000000000000000000000000000000000000000000000000000000000060208083019190915282515f8082529181019093527f0f000000000000000000000000000000000000000000000000000000000000009b939a50909850469750309650945092509050565b610bf4610bef7f0000000000000000000000000000000000000000000000000000000000000000610bea6040805180820190915260208082527f786d74702e70617965725265706f72744d616e616765722e6d69677261746f729082015290565b611597565b6115b1565b565b63ffffffff88165f9081527f26b057ee8e4d60685198828fdf1c618ab8e36b0ab85f54a47b18319f6f718e006020526040812080549182610c37575f610c7a565b81610c43600185612f5b565b81548110610c5357610c53612d15565b5f91825260209091206004909102015468010000000000000000900467ffffffffffffffff165b90508067ffffffffffffffff168a67ffffffffffffffff1614610cdd576040517f84e2343300000000000000000000000000000000000000000000000000000000815267ffffffffffffffff808c16600483015282166024820152604401610841565b8967ffffffffffffffff168967ffffffffffffffff161015610d2b576040517fa7ee051700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610d3c8c8c8c8c8c8c8c8c6117b3565b9050826040518060e001604052808d67ffffffffffffffff1681526020018c67ffffffffffffffff1681526020015f6bffffffffffffffffffffffff1681526020015f63ffffffff1681526020015f5f1b8c14151581526020018b81526020018a8a808060200260200160405190810160405280939291908181526020018383602002808284375f92018290525093909452505083546001818101865594825260209182902084516004909202018054838601516040870151606088015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6bffffffffffffffffffffffff90921670010000000000000000000000000000000002919091166fffffffffffffffffffffffffffffffff67ffffffffffffffff93841668010000000000000000027fffffffffffffffffffffffffffffffff000000000000000000000000000000009095169390961692909217929092179390931692909217919091178155608084015194810180549515157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009096169590951790945560a0830151600285015560c08301518051939493610f2993506003850192919091019061274b565b5050508967ffffffffffffffff16848d63ffffffff167ff12df7b91b93c52175586285d72faca087327f0686c9c38e514bf9f67ef593658e8d8d8d88604051610f76959493929190612f6e565b60405180910390a488610fcd57604080515f80825260208201819052818301529051859163ffffffff8f16917f3e2ef0c87bba9a992cfdc5189b278bd9852605eaca1ee05c64f285cff2c076919181900360600190a35b50505098975050505050505050565b6060838214611017576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8367ffffffffffffffff81111561103057611030612f2e565b6040519080825280602002602001820160405280156110b657816020015b6040805160e0810182525f808252602080830182905292820181905260608083018290526080830182905260a083019190915260c082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161104e5790505b5090507f26b057ee8e4d60685198828fdf1c618ab8e36b0ab85f54a47b18319f6f718e005f5b858110156112a8575f8787838181106110f7576110f7612d15565b905060200201602081019061110c9190613011565b90505f86868481811061112157611121612d15565b905060200201359050835f015f8363ffffffff1663ffffffff1681526020019081526020015f20818154811061115957611159612d15565b5f9182526020918290206040805160e0810182526004909302909101805467ffffffffffffffff808216855268010000000000000000820416848601526bffffffffffffffffffffffff7001000000000000000000000000000000008204168484015263ffffffff7c0100000000000000000000000000000000000000000000000000000000909104166060840152600181015460ff1615156080840152600281015460a08401526003810180548351818702810187019094528084529394919360c08601939283018282801561127857602002820191905f5260205f20905f905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161123b5790505b50505050508152505085848151811061129357611293612d15565b602090810291909101015250506001016110dc565b5050949350505050565b5f6102eb7f30503e47cf573d37e2be5212eb8a3f06caca0f3ab0d379e7d05758b47b23d6585f1b8888888888886040516020016112f092919061302a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201209083019790975263ffffffff9095169481019490945267ffffffffffffffff92831660608501529116608083015260a082015260c081019190915260e00160405160208183030381529060405280519060200120611b3d565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6113db60408051808201909152601281527f50617965725265706f72744d616e616765720000000000000000000000000000602082015290565b8051906020012061141c60408051808201909152600181527f3100000000000000000000000000000000000000000000000000000000000000602082015290565b805160209182012060408051928301949094529281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b856114768686868686611b9f565b146114ad576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b5f8181036114ef576040517f320499c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff83835f8161150457611504612d15565b905060200201355f1c1115611545576040517f3438704d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82825f81811061155757611557612d15565b6020029190910135949350505050565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061049a565b610bf4611bbf565b5f6115aa6115a58484611beb565b611c7e565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81166115fe576040517f0d626a3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216907fa2e7361c23d7820040603b83c0cd3f494d377bac69736377d75bb56c651a5098905f90a25f5f8273ffffffffffffffffffffffffffffffffffffffff166040515f60405180830381855af49150503d805f8114611692576040519150601f19603f3d011682016040523d82523d5f602084013e611697565b606091505b5091509150816116d75782816040517f68b0b16b000000000000000000000000000000000000000000000000000000008152600401610841929190613066565b80511580156116fb575073ffffffffffffffffffffffffffffffffffffffff83163b155b1561174a576040517f626c416100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610841565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2505050565b60605f6117c48a8a8a8a8a8a6112b2565b90505f808467ffffffffffffffff8111156117e1576117e1612f2e565b60405190808252806020026020018201604052801561180a578160200160208202803683370190505b5090505f5b85811015611957575f87878381811061182a5761182a612d15565b905060200281019061183c9190613094565b61184a906020810190613011565b905081158015906118a257508787611863600185612f5b565b81811061187257611872612d15565b90506020028101906118849190613094565b611892906020810190613011565b63ffffffff168163ffffffff1611155b156118d9576040517f99a6724200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61191585828a8a868181106118f0576118f0612d15565b90506020028101906119029190613094565b6119109060208101906130d0565b611cd1565b83838151811061192757611927612d15565b6020026020010190151590811515815250611942575061194f565b61194b84613131565b9350505b60010161180f565b505f60027f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c9c02a026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119c4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119e8919061314f565b6119f2919061319c565b6119fd9060016131bd565b90508060ff168360ff161015611a4c576040517f31f1a31300000000000000000000000000000000000000000000000000000000815260ff808516600483015282166024820152604401610841565b8260ff1667ffffffffffffffff811115611a6857611a68612f2e565b604051908082528060200260200182016040528015611a91578160200160208202803683370190505b5094505f805b8351811015611b2b57838181518110611ab257611ab2612d15565b602002602001015115611b2357888882818110611ad157611ad1612d15565b9050602002810190611ae39190613094565b611af1906020810190613011565b8751600184019389918110611b0857611b08612d15565b602002602001019063ffffffff16908163ffffffff16815250505b600101611a97565b50505050505098975050505050505050565b5f611b466104a0565b6040517f190100000000000000000000000000000000000000000000000000000000000060208201526022810191909152604281018390526062015b604051602081830303815290604052805190602001209050919050565b5f611bb586611bae8787611eab565b8585611f80565b9695505050505050565b611bc761137f565b7fc7effa11ad597798220888e5d1ba4eeddcc8c2635d01dae8b9f958ac905c110055565b6040517fd6d7d5250000000000000000000000000000000000000000000000000000000081525f9073ffffffffffffffffffffffffffffffffffffffff84169063d6d7d52590611c3f908590600401612b6d565b602060405180830381865afa158015611c5a573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115aa91906131d6565b5f73ffffffffffffffffffffffffffffffffffffffff821115611ccd576040517f37f4f14800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090565b6040517fad03d0a500000000000000000000000000000000000000000000000000000000815263ffffffff841660048201525f907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ad03d0a590602401602060405180830381865afa158015611d61573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d8591906131ed565b611d9057505f611ea3565b5f611d9c868585612485565b905073ffffffffffffffffffffffffffffffffffffffff811615801590611e9f57506040517f68501a3e00000000000000000000000000000000000000000000000000000000815263ffffffff861660048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906368501a3e90602401602060405180830381865afa158015611e4c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e70919061320c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b9150505b949350505050565b6060818067ffffffffffffffff811115611ec757611ec7612f2e565b604051908082528060200260200182016040528015611ef0578160200160208202803683370190505b509150805f5b82811015611f77577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90910190611f4f868684818110611f3857611f38612d15565b9050602002810190611f4a91906130d0565b612519565b8451600183019286918110611f6657611f66612d15565b602002602001018181525050611ef6565b50505092915050565b5f818103611fba576040517f320499c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84158015611fc757508351155b8015611fec575082825f818110611fe057611fe0612d15565b905060200201355f1c5f145b15611ff857505f611ea3565b83515f03612032576040517fbaec3d9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82825f81811061204457612044612d15565b905060200201355f1c84518661205a919061323f565b1115612092576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83515f8167ffffffffffffffff8111156120ae576120ae612f2e565b6040519080825280602002602001820160405280156120d7578160200160208202803683370190505b5090505f8060018181898983816120f0576120f0612d15565b905060200201355f1c61211c8b8b5f81811061210e5761210e612d15565b905060200201355f1c61256e565b612126919061323f565b6121309190612f5b565b90505f8b6121498b8b5f81811061210e5761210e612d15565b612153919061323f565b90505f6001612162898461323f565b61216c9190612f5b565b90505b5f88871061219f57876121828a89613252565b8151811061219257612192612d15565b60200260200101516121a9565b6121a98783612f5b565b905080600103612216576122068c8c5f8181106121c8576121c8612d15565b602002919091013590508e8b6121df60018b612f5b565b6121e99190613252565b815181106121f9576121f9612d15565b6020026020010151612591565b9950505050505050505050611ea3565b8381148015612226575060018116155b156122d2576122568d6122398b8a613252565b8151811061224957612249612d15565b60200260200101516125d2565b8d6122618b89613252565b8151811061227157612271612d15565b6020908102919091010152600181901c8861228c8b89613252565b8151811061229c5761229c612d15565b6020026020010181815250508660010196508560010195508281146122c1575061216f565b50600192831c929190911c9061216f565b5f896122df89600161323f565b1061231857888a6122f18a600161323f565b6122fb9190613252565b8151811061230b5761230b612d15565b602002602001015161232d565b61232388600161323f565b61232d9084612f5b565b9050600182161561236c578d8a89806001019a508161234e5761234e61316f565b068151811061235f5761235f612d15565b602002602001015161238c565b8c8c8780600101985081811061238457612384612d15565b905060200201355b9a505f612399838361260c565b6123c1578d8d888060010199508181106123b5576123b5612d15565b905060200201356123f1565b8e8b8a806001019b50816123d7576123d761316f565b06815181106123e8576123e8612d15565b60200260200101515b90506123fd818d612641565b8f6124088d8b613252565b8151811061241857612418612d15565b6020908102919091010152600183901c8a6124338d8b613252565b8151811061244357612443612d15565b6020026020010181815250508760010197508483141580156124655750848214155b156124725750505061216f565b505050600192831c929190911c9061216f565b5f60405182604081146124a057604181146124e05750612511565b60208581013560ff81901c601b0190915285356040527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff166060526124f1565b60408501355f1a6020526040856040375b50845f526020604060805f60015afa505f6060523d606018519150806040525b509392505050565b6040515f90612550907f6c6561667c0000000000000000000000000000000000000000000000000000009085908590602001613265565b60405160208183030381529060405280519060200120905092915050565b5f60018211156125865761258182612682565b61049a565b61049a8260026132a0565b6040517f726f6f747c000000000000000000000000000000000000000000000000000000602082015260258101839052604581018290525f90606501612550565b6040517f6e6f64657c0000000000000000000000000000000000000000000000000000006020820152602581018290525f90604501611b82565b5f6001831615806115aa5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091011490565b6040517f6e6f64657c000000000000000000000000000000000000000000000000000000602082015260258101839052604581018290525f90606501612550565b5f61268c826126bc565b600103612697575090565b50600181811c909117600281901c17600481901c17600881901c17601081901c170190565b5f63ffffffff8211156126fb576040517f7de51b2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600182901c63555555551682039150600282901c63333333331682633333333316019150600482901c8201630f0f0f0f169150600882901c82019150601082901c8201915081607f169050919050565b828054828255905f5260205f20906007016008900481019282156127e7579160200282015f5b838211156127b557835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302612771565b80156127e55782816101000a81549063ffffffff02191690556004016020816003010492830192600103026127b5565b505b50611ccd9291505b80821115611ccd575f81556001016127ef565b803563ffffffff81168114612815575f5ffd5b919050565b803567ffffffffffffffff81168114612815575f5ffd5b5f5f83601f840112612841575f5ffd5b50813567ffffffffffffffff811115612858575f5ffd5b6020830191508360208260051b8501011115612872575f5ffd5b9250929050565b5f5f5f5f5f5f60a0878903121561288e575f5ffd5b61289787612802565b95506128a56020880161281a565b94506128b36040880161281a565b935060608701359250608087013567ffffffffffffffff8111156128d5575f5ffd5b6128e189828a01612831565b979a9699509497509295939492505050565b5f5f60408385031215612904575f5ffd5b61290d83612802565b946020939093013593505050565b5f8151808452602084019350602083015f5b8281101561295157815163ffffffff1686526020958601959091019060010161292d565b5093949350505050565b67ffffffffffffffff815116825267ffffffffffffffff60208201511660208301526bffffffffffffffffffffffff60408201511660408301525f60608201516129ad606085018263ffffffff169052565b5060808201516129c1608085018215159052565b5060a082015160a084015260c082015160e060c0850152611ea360e085018261291b565b602081525f6115aa602083018461295b565b5f5f5f5f5f5f60808789031215612a0c575f5ffd5b612a1587612802565b955060208701359450604087013567ffffffffffffffff811115612a37575f5ffd5b612a4389828a01612831565b909550935050606087013567ffffffffffffffff8111156128d5575f5ffd5b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201525f612ae860e0830189612a62565b8281036040840152612afa8189612a62565b6060840188905273ffffffffffffffffffffffffffffffffffffffff8716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015612b5c578351835260209384019390920191600101612b3e565b50909b9a5050505050505050505050565b602081525f6115aa6020830184612a62565b5f5f5f5f5f5f5f5f60c0898b031215612b96575f5ffd5b612b9f89612802565b9750612bad60208a0161281a565b9650612bbb60408a0161281a565b955060608901359450608089013567ffffffffffffffff811115612bdd575f5ffd5b612be98b828c01612831565b90955093505060a089013567ffffffffffffffff811115612c08575f5ffd5b612c148b828c01612831565b999c989b5096995094979396929594505050565b5f5f5f5f60408587031215612c3b575f5ffd5b843567ffffffffffffffff811115612c51575f5ffd5b612c5d87828801612831565b909550935050602085013567ffffffffffffffff811115612c7c575f5ffd5b612c8887828801612831565b95989497509550505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015612d09577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452612cf485835161295b565b94506020938401939190910190600101612cba565b50929695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b63ffffffff818116838216019081111561049a5761049a612d42565b81835281816020850137505f602082840101525f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b602080825281018290525f6040600584901b8301810190830185837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe136839003015b87821015612ea0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184528235818112612e50575f5ffd5b890160208101903567ffffffffffffffff811115612e6c575f5ffd5b803603821315612e7a575f5ffd5b612e85878284612d8b565b96505050602083019250602084019350600182019150612e14565b5092979650505050505050565b5f82518060208501845e5f920191825250919050565b5f60208284031215612ed3575f5ffd5b81516bffffffffffffffffffffffff811681146115aa575f5ffd5b63ffffffff828116828216039081111561049a5761049a612d42565b6bffffffffffffffffffffffff818116838216019081111561049a5761049a612d42565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8181038181111561049a5761049a612d42565b67ffffffffffffffff861681526020810185905260806040820181905281018390525f8460a08301825b86811015612fc35763ffffffff612fae84612802565b16825260209283019290910190600101612f98565b508381036060850152845180825260209182019250908501905f5b8181101561300257825163ffffffff16845260209384019390920191600101612fde565b50919998505050505050505050565b5f60208284031215613021575f5ffd5b6115aa82612802565b5f8184825b8581101561305b5763ffffffff61304583612802565b168352602092830192919091019060010161302f565b509095945050505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201525f611ea36040830184612a62565b5f82357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126130c6575f5ffd5b9190910192915050565b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613103575f5ffd5b83018035915067ffffffffffffffff82111561311d575f5ffd5b602001915036819003821315612872575f5ffd5b5f60ff821660ff810361314657613146612d42565b60010192915050565b5f6020828403121561315f575f5ffd5b815160ff811681146115aa575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f60ff8316806131ae576131ae61316f565b8060ff84160491505092915050565b60ff818116838216019081111561049a5761049a612d42565b5f602082840312156131e6575f5ffd5b5051919050565b5f602082840312156131fd575f5ffd5b815180151581146115aa575f5ffd5b5f6020828403121561321c575f5ffd5b815173ffffffffffffffffffffffffffffffffffffffff811681146115aa575f5ffd5b8082018082111561049a5761049a612d42565b5f826132605761326061316f565b500690565b7fffffffffff00000000000000000000000000000000000000000000000000000084168152818360058301375f910160050190815292915050565b808202811582820484141761049a5761049a612d4256fea2646970667358221220b05415c4b13ad99d0f0e8f00f8c447ec30372c4c0dc8e49a87698e66345e668464736f6c634300081c0033",
}

// PayerReportManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use PayerReportManagerMetaData.ABI instead.
var PayerReportManagerABI = PayerReportManagerMetaData.ABI

// PayerReportManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PayerReportManagerMetaData.Bin instead.
var PayerReportManagerBin = PayerReportManagerMetaData.Bin

// DeployPayerReportManager deploys a new Ethereum contract, binding an instance of PayerReportManager to it.
func DeployPayerReportManager(auth *bind.TransactOpts, backend bind.ContractBackend, parameterRegistry_ common.Address, nodeRegistry_ common.Address, payerRegistry_ common.Address) (common.Address, *types.Transaction, *PayerReportManager, error) {
	parsed, err := PayerReportManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PayerReportManagerBin), backend, parameterRegistry_, nodeRegistry_, payerRegistry_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PayerReportManager{PayerReportManagerCaller: PayerReportManagerCaller{contract: contract}, PayerReportManagerTransactor: PayerReportManagerTransactor{contract: contract}, PayerReportManagerFilterer: PayerReportManagerFilterer{contract: contract}}, nil
}

// PayerReportManager is an auto generated Go binding around an Ethereum contract.
type PayerReportManager struct {
	PayerReportManagerCaller     // Read-only binding to the contract
	PayerReportManagerTransactor // Write-only binding to the contract
	PayerReportManagerFilterer   // Log filterer for contract events
}

// PayerReportManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type PayerReportManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PayerReportManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PayerReportManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PayerReportManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PayerReportManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PayerReportManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PayerReportManagerSession struct {
	Contract     *PayerReportManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// PayerReportManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PayerReportManagerCallerSession struct {
	Contract *PayerReportManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// PayerReportManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PayerReportManagerTransactorSession struct {
	Contract     *PayerReportManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// PayerReportManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type PayerReportManagerRaw struct {
	Contract *PayerReportManager // Generic contract binding to access the raw methods on
}

// PayerReportManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PayerReportManagerCallerRaw struct {
	Contract *PayerReportManagerCaller // Generic read-only contract binding to access the raw methods on
}

// PayerReportManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PayerReportManagerTransactorRaw struct {
	Contract *PayerReportManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPayerReportManager creates a new instance of PayerReportManager, bound to a specific deployed contract.
func NewPayerReportManager(address common.Address, backend bind.ContractBackend) (*PayerReportManager, error) {
	contract, err := bindPayerReportManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PayerReportManager{PayerReportManagerCaller: PayerReportManagerCaller{contract: contract}, PayerReportManagerTransactor: PayerReportManagerTransactor{contract: contract}, PayerReportManagerFilterer: PayerReportManagerFilterer{contract: contract}}, nil
}

// NewPayerReportManagerCaller creates a new read-only instance of PayerReportManager, bound to a specific deployed contract.
func NewPayerReportManagerCaller(address common.Address, caller bind.ContractCaller) (*PayerReportManagerCaller, error) {
	contract, err := bindPayerReportManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PayerReportManagerCaller{contract: contract}, nil
}

// NewPayerReportManagerTransactor creates a new write-only instance of PayerReportManager, bound to a specific deployed contract.
func NewPayerReportManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*PayerReportManagerTransactor, error) {
	contract, err := bindPayerReportManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PayerReportManagerTransactor{contract: contract}, nil
}

// NewPayerReportManagerFilterer creates a new log filterer instance of PayerReportManager, bound to a specific deployed contract.
func NewPayerReportManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*PayerReportManagerFilterer, error) {
	contract, err := bindPayerReportManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PayerReportManagerFilterer{contract: contract}, nil
}

// bindPayerReportManager binds a generic wrapper to an already deployed contract.
func bindPayerReportManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PayerReportManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PayerReportManager *PayerReportManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PayerReportManager.Contract.PayerReportManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PayerReportManager *PayerReportManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PayerReportManager.Contract.PayerReportManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PayerReportManager *PayerReportManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PayerReportManager.Contract.PayerReportManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PayerReportManager *PayerReportManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PayerReportManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PayerReportManager *PayerReportManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PayerReportManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PayerReportManager *PayerReportManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PayerReportManager.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator_)
func (_PayerReportManager *PayerReportManagerCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator_)
func (_PayerReportManager *PayerReportManagerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _PayerReportManager.Contract.DOMAINSEPARATOR(&_PayerReportManager.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator_)
func (_PayerReportManager *PayerReportManagerCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _PayerReportManager.Contract.DOMAINSEPARATOR(&_PayerReportManager.CallOpts)
}

// PAYERREPORTTYPEHASH is a free data retrieval call binding the contract method 0x3d8fcde2.
//
// Solidity: function PAYER_REPORT_TYPEHASH() view returns(bytes32)
func (_PayerReportManager *PayerReportManagerCaller) PAYERREPORTTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "PAYER_REPORT_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAYERREPORTTYPEHASH is a free data retrieval call binding the contract method 0x3d8fcde2.
//
// Solidity: function PAYER_REPORT_TYPEHASH() view returns(bytes32)
func (_PayerReportManager *PayerReportManagerSession) PAYERREPORTTYPEHASH() ([32]byte, error) {
	return _PayerReportManager.Contract.PAYERREPORTTYPEHASH(&_PayerReportManager.CallOpts)
}

// PAYERREPORTTYPEHASH is a free data retrieval call binding the contract method 0x3d8fcde2.
//
// Solidity: function PAYER_REPORT_TYPEHASH() view returns(bytes32)
func (_PayerReportManager *PayerReportManagerCallerSession) PAYERREPORTTYPEHASH() ([32]byte, error) {
	return _PayerReportManager.Contract.PAYERREPORTTYPEHASH(&_PayerReportManager.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields_, string name_, string version_, uint256 chainId_, address verifyingContract_, bytes32 salt_, uint256[] extensions_)
func (_PayerReportManager *PayerReportManagerCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields_, string name_, string version_, uint256 chainId_, address verifyingContract_, bytes32 salt_, uint256[] extensions_)
func (_PayerReportManager *PayerReportManagerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _PayerReportManager.Contract.Eip712Domain(&_PayerReportManager.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields_, string name_, string version_, uint256 chainId_, address verifyingContract_, bytes32 salt_, uint256[] extensions_)
func (_PayerReportManager *PayerReportManagerCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _PayerReportManager.Contract.Eip712Domain(&_PayerReportManager.CallOpts)
}

// GetPayerReport is a free data retrieval call binding the contract method 0x22ccd722.
//
// Solidity: function getPayerReport(uint32 originatorNodeId_, uint256 payerReportIndex_) view returns((uint64,uint64,uint96,uint32,bool,bytes32,uint32[]) payerReport_)
func (_PayerReportManager *PayerReportManagerCaller) GetPayerReport(opts *bind.CallOpts, originatorNodeId_ uint32, payerReportIndex_ *big.Int) (IPayerReportManagerPayerReport, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "getPayerReport", originatorNodeId_, payerReportIndex_)

	if err != nil {
		return *new(IPayerReportManagerPayerReport), err
	}

	out0 := *abi.ConvertType(out[0], new(IPayerReportManagerPayerReport)).(*IPayerReportManagerPayerReport)

	return out0, err

}

// GetPayerReport is a free data retrieval call binding the contract method 0x22ccd722.
//
// Solidity: function getPayerReport(uint32 originatorNodeId_, uint256 payerReportIndex_) view returns((uint64,uint64,uint96,uint32,bool,bytes32,uint32[]) payerReport_)
func (_PayerReportManager *PayerReportManagerSession) GetPayerReport(originatorNodeId_ uint32, payerReportIndex_ *big.Int) (IPayerReportManagerPayerReport, error) {
	return _PayerReportManager.Contract.GetPayerReport(&_PayerReportManager.CallOpts, originatorNodeId_, payerReportIndex_)
}

// GetPayerReport is a free data retrieval call binding the contract method 0x22ccd722.
//
// Solidity: function getPayerReport(uint32 originatorNodeId_, uint256 payerReportIndex_) view returns((uint64,uint64,uint96,uint32,bool,bytes32,uint32[]) payerReport_)
func (_PayerReportManager *PayerReportManagerCallerSession) GetPayerReport(originatorNodeId_ uint32, payerReportIndex_ *big.Int) (IPayerReportManagerPayerReport, error) {
	return _PayerReportManager.Contract.GetPayerReport(&_PayerReportManager.CallOpts, originatorNodeId_, payerReportIndex_)
}

// GetPayerReportDigest is a free data retrieval call binding the contract method 0x12bd2837.
//
// Solidity: function getPayerReportDigest(uint32 originatorNodeId_, uint64 startSequenceId_, uint64 endSequenceId_, bytes32 payersMerkleRoot_, uint32[] nodeIds_) view returns(bytes32 digest_)
func (_PayerReportManager *PayerReportManagerCaller) GetPayerReportDigest(opts *bind.CallOpts, originatorNodeId_ uint32, startSequenceId_ uint64, endSequenceId_ uint64, payersMerkleRoot_ [32]byte, nodeIds_ []uint32) ([32]byte, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "getPayerReportDigest", originatorNodeId_, startSequenceId_, endSequenceId_, payersMerkleRoot_, nodeIds_)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetPayerReportDigest is a free data retrieval call binding the contract method 0x12bd2837.
//
// Solidity: function getPayerReportDigest(uint32 originatorNodeId_, uint64 startSequenceId_, uint64 endSequenceId_, bytes32 payersMerkleRoot_, uint32[] nodeIds_) view returns(bytes32 digest_)
func (_PayerReportManager *PayerReportManagerSession) GetPayerReportDigest(originatorNodeId_ uint32, startSequenceId_ uint64, endSequenceId_ uint64, payersMerkleRoot_ [32]byte, nodeIds_ []uint32) ([32]byte, error) {
	return _PayerReportManager.Contract.GetPayerReportDigest(&_PayerReportManager.CallOpts, originatorNodeId_, startSequenceId_, endSequenceId_, payersMerkleRoot_, nodeIds_)
}

// GetPayerReportDigest is a free data retrieval call binding the contract method 0x12bd2837.
//
// Solidity: function getPayerReportDigest(uint32 originatorNodeId_, uint64 startSequenceId_, uint64 endSequenceId_, bytes32 payersMerkleRoot_, uint32[] nodeIds_) view returns(bytes32 digest_)
func (_PayerReportManager *PayerReportManagerCallerSession) GetPayerReportDigest(originatorNodeId_ uint32, startSequenceId_ uint64, endSequenceId_ uint64, payersMerkleRoot_ [32]byte, nodeIds_ []uint32) ([32]byte, error) {
	return _PayerReportManager.Contract.GetPayerReportDigest(&_PayerReportManager.CallOpts, originatorNodeId_, startSequenceId_, endSequenceId_, payersMerkleRoot_, nodeIds_)
}

// GetPayerReports is a free data retrieval call binding the contract method 0xb881bca0.
//
// Solidity: function getPayerReports(uint32[] originatorNodeIds_, uint256[] payerReportIndices_) view returns((uint64,uint64,uint96,uint32,bool,bytes32,uint32[])[] payerReports_)
func (_PayerReportManager *PayerReportManagerCaller) GetPayerReports(opts *bind.CallOpts, originatorNodeIds_ []uint32, payerReportIndices_ []*big.Int) ([]IPayerReportManagerPayerReport, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "getPayerReports", originatorNodeIds_, payerReportIndices_)

	if err != nil {
		return *new([]IPayerReportManagerPayerReport), err
	}

	out0 := *abi.ConvertType(out[0], new([]IPayerReportManagerPayerReport)).(*[]IPayerReportManagerPayerReport)

	return out0, err

}

// GetPayerReports is a free data retrieval call binding the contract method 0xb881bca0.
//
// Solidity: function getPayerReports(uint32[] originatorNodeIds_, uint256[] payerReportIndices_) view returns((uint64,uint64,uint96,uint32,bool,bytes32,uint32[])[] payerReports_)
func (_PayerReportManager *PayerReportManagerSession) GetPayerReports(originatorNodeIds_ []uint32, payerReportIndices_ []*big.Int) ([]IPayerReportManagerPayerReport, error) {
	return _PayerReportManager.Contract.GetPayerReports(&_PayerReportManager.CallOpts, originatorNodeIds_, payerReportIndices_)
}

// GetPayerReports is a free data retrieval call binding the contract method 0xb881bca0.
//
// Solidity: function getPayerReports(uint32[] originatorNodeIds_, uint256[] payerReportIndices_) view returns((uint64,uint64,uint96,uint32,bool,bytes32,uint32[])[] payerReports_)
func (_PayerReportManager *PayerReportManagerCallerSession) GetPayerReports(originatorNodeIds_ []uint32, payerReportIndices_ []*big.Int) ([]IPayerReportManagerPayerReport, error) {
	return _PayerReportManager.Contract.GetPayerReports(&_PayerReportManager.CallOpts, originatorNodeIds_, payerReportIndices_)
}

// Implementation is a free data retrieval call binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() view returns(address implementation_)
func (_PayerReportManager *PayerReportManagerCaller) Implementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "implementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Implementation is a free data retrieval call binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() view returns(address implementation_)
func (_PayerReportManager *PayerReportManagerSession) Implementation() (common.Address, error) {
	return _PayerReportManager.Contract.Implementation(&_PayerReportManager.CallOpts)
}

// Implementation is a free data retrieval call binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() view returns(address implementation_)
func (_PayerReportManager *PayerReportManagerCallerSession) Implementation() (common.Address, error) {
	return _PayerReportManager.Contract.Implementation(&_PayerReportManager.CallOpts)
}

// MigratorParameterKey is a free data retrieval call binding the contract method 0x8aab82ba.
//
// Solidity: function migratorParameterKey() pure returns(bytes key_)
func (_PayerReportManager *PayerReportManagerCaller) MigratorParameterKey(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "migratorParameterKey")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// MigratorParameterKey is a free data retrieval call binding the contract method 0x8aab82ba.
//
// Solidity: function migratorParameterKey() pure returns(bytes key_)
func (_PayerReportManager *PayerReportManagerSession) MigratorParameterKey() ([]byte, error) {
	return _PayerReportManager.Contract.MigratorParameterKey(&_PayerReportManager.CallOpts)
}

// MigratorParameterKey is a free data retrieval call binding the contract method 0x8aab82ba.
//
// Solidity: function migratorParameterKey() pure returns(bytes key_)
func (_PayerReportManager *PayerReportManagerCallerSession) MigratorParameterKey() ([]byte, error) {
	return _PayerReportManager.Contract.MigratorParameterKey(&_PayerReportManager.CallOpts)
}

// NodeRegistry is a free data retrieval call binding the contract method 0xd9b5c4a5.
//
// Solidity: function nodeRegistry() view returns(address)
func (_PayerReportManager *PayerReportManagerCaller) NodeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "nodeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeRegistry is a free data retrieval call binding the contract method 0xd9b5c4a5.
//
// Solidity: function nodeRegistry() view returns(address)
func (_PayerReportManager *PayerReportManagerSession) NodeRegistry() (common.Address, error) {
	return _PayerReportManager.Contract.NodeRegistry(&_PayerReportManager.CallOpts)
}

// NodeRegistry is a free data retrieval call binding the contract method 0xd9b5c4a5.
//
// Solidity: function nodeRegistry() view returns(address)
func (_PayerReportManager *PayerReportManagerCallerSession) NodeRegistry() (common.Address, error) {
	return _PayerReportManager.Contract.NodeRegistry(&_PayerReportManager.CallOpts)
}

// ParameterRegistry is a free data retrieval call binding the contract method 0x0723499e.
//
// Solidity: function parameterRegistry() view returns(address)
func (_PayerReportManager *PayerReportManagerCaller) ParameterRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "parameterRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParameterRegistry is a free data retrieval call binding the contract method 0x0723499e.
//
// Solidity: function parameterRegistry() view returns(address)
func (_PayerReportManager *PayerReportManagerSession) ParameterRegistry() (common.Address, error) {
	return _PayerReportManager.Contract.ParameterRegistry(&_PayerReportManager.CallOpts)
}

// ParameterRegistry is a free data retrieval call binding the contract method 0x0723499e.
//
// Solidity: function parameterRegistry() view returns(address)
func (_PayerReportManager *PayerReportManagerCallerSession) ParameterRegistry() (common.Address, error) {
	return _PayerReportManager.Contract.ParameterRegistry(&_PayerReportManager.CallOpts)
}

// PayerRegistry is a free data retrieval call binding the contract method 0x1dc5f4b8.
//
// Solidity: function payerRegistry() view returns(address)
func (_PayerReportManager *PayerReportManagerCaller) PayerRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PayerReportManager.contract.Call(opts, &out, "payerRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PayerRegistry is a free data retrieval call binding the contract method 0x1dc5f4b8.
//
// Solidity: function payerRegistry() view returns(address)
func (_PayerReportManager *PayerReportManagerSession) PayerRegistry() (common.Address, error) {
	return _PayerReportManager.Contract.PayerRegistry(&_PayerReportManager.CallOpts)
}

// PayerRegistry is a free data retrieval call binding the contract method 0x1dc5f4b8.
//
// Solidity: function payerRegistry() view returns(address)
func (_PayerReportManager *PayerReportManagerCallerSession) PayerRegistry() (common.Address, error) {
	return _PayerReportManager.Contract.PayerRegistry(&_PayerReportManager.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_PayerReportManager *PayerReportManagerTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PayerReportManager.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_PayerReportManager *PayerReportManagerSession) Initialize() (*types.Transaction, error) {
	return _PayerReportManager.Contract.Initialize(&_PayerReportManager.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_PayerReportManager *PayerReportManagerTransactorSession) Initialize() (*types.Transaction, error) {
	return _PayerReportManager.Contract.Initialize(&_PayerReportManager.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_PayerReportManager *PayerReportManagerTransactor) Migrate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PayerReportManager.contract.Transact(opts, "migrate")
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_PayerReportManager *PayerReportManagerSession) Migrate() (*types.Transaction, error) {
	return _PayerReportManager.Contract.Migrate(&_PayerReportManager.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_PayerReportManager *PayerReportManagerTransactorSession) Migrate() (*types.Transaction, error) {
	return _PayerReportManager.Contract.Migrate(&_PayerReportManager.TransactOpts)
}

// Settle is a paid mutator transaction binding the contract method 0x6576143c.
//
// Solidity: function settle(uint32 originatorNodeId_, uint256 payerReportIndex_, bytes[] payerFees_, bytes32[] proofElements_) returns()
func (_PayerReportManager *PayerReportManagerTransactor) Settle(opts *bind.TransactOpts, originatorNodeId_ uint32, payerReportIndex_ *big.Int, payerFees_ [][]byte, proofElements_ [][32]byte) (*types.Transaction, error) {
	return _PayerReportManager.contract.Transact(opts, "settle", originatorNodeId_, payerReportIndex_, payerFees_, proofElements_)
}

// Settle is a paid mutator transaction binding the contract method 0x6576143c.
//
// Solidity: function settle(uint32 originatorNodeId_, uint256 payerReportIndex_, bytes[] payerFees_, bytes32[] proofElements_) returns()
func (_PayerReportManager *PayerReportManagerSession) Settle(originatorNodeId_ uint32, payerReportIndex_ *big.Int, payerFees_ [][]byte, proofElements_ [][32]byte) (*types.Transaction, error) {
	return _PayerReportManager.Contract.Settle(&_PayerReportManager.TransactOpts, originatorNodeId_, payerReportIndex_, payerFees_, proofElements_)
}

// Settle is a paid mutator transaction binding the contract method 0x6576143c.
//
// Solidity: function settle(uint32 originatorNodeId_, uint256 payerReportIndex_, bytes[] payerFees_, bytes32[] proofElements_) returns()
func (_PayerReportManager *PayerReportManagerTransactorSession) Settle(originatorNodeId_ uint32, payerReportIndex_ *big.Int, payerFees_ [][]byte, proofElements_ [][32]byte) (*types.Transaction, error) {
	return _PayerReportManager.Contract.Settle(&_PayerReportManager.TransactOpts, originatorNodeId_, payerReportIndex_, payerFees_, proofElements_)
}

// Submit is a paid mutator transaction binding the contract method 0xb8712eec.
//
// Solidity: function submit(uint32 originatorNodeId_, uint64 startSequenceId_, uint64 endSequenceId_, bytes32 payersMerkleRoot_, uint32[] nodeIds_, (uint32,bytes)[] signatures_) returns(uint256 payerReportIndex_)
func (_PayerReportManager *PayerReportManagerTransactor) Submit(opts *bind.TransactOpts, originatorNodeId_ uint32, startSequenceId_ uint64, endSequenceId_ uint64, payersMerkleRoot_ [32]byte, nodeIds_ []uint32, signatures_ []IPayerReportManagerPayerReportSignature) (*types.Transaction, error) {
	return _PayerReportManager.contract.Transact(opts, "submit", originatorNodeId_, startSequenceId_, endSequenceId_, payersMerkleRoot_, nodeIds_, signatures_)
}

// Submit is a paid mutator transaction binding the contract method 0xb8712eec.
//
// Solidity: function submit(uint32 originatorNodeId_, uint64 startSequenceId_, uint64 endSequenceId_, bytes32 payersMerkleRoot_, uint32[] nodeIds_, (uint32,bytes)[] signatures_) returns(uint256 payerReportIndex_)
func (_PayerReportManager *PayerReportManagerSession) Submit(originatorNodeId_ uint32, startSequenceId_ uint64, endSequenceId_ uint64, payersMerkleRoot_ [32]byte, nodeIds_ []uint32, signatures_ []IPayerReportManagerPayerReportSignature) (*types.Transaction, error) {
	return _PayerReportManager.Contract.Submit(&_PayerReportManager.TransactOpts, originatorNodeId_, startSequenceId_, endSequenceId_, payersMerkleRoot_, nodeIds_, signatures_)
}

// Submit is a paid mutator transaction binding the contract method 0xb8712eec.
//
// Solidity: function submit(uint32 originatorNodeId_, uint64 startSequenceId_, uint64 endSequenceId_, bytes32 payersMerkleRoot_, uint32[] nodeIds_, (uint32,bytes)[] signatures_) returns(uint256 payerReportIndex_)
func (_PayerReportManager *PayerReportManagerTransactorSession) Submit(originatorNodeId_ uint32, startSequenceId_ uint64, endSequenceId_ uint64, payersMerkleRoot_ [32]byte, nodeIds_ []uint32, signatures_ []IPayerReportManagerPayerReportSignature) (*types.Transaction, error) {
	return _PayerReportManager.Contract.Submit(&_PayerReportManager.TransactOpts, originatorNodeId_, startSequenceId_, endSequenceId_, payersMerkleRoot_, nodeIds_, signatures_)
}

// PayerReportManagerEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the PayerReportManager contract.
type PayerReportManagerEIP712DomainChangedIterator struct {
	Event *PayerReportManagerEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PayerReportManagerEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PayerReportManagerEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PayerReportManagerEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PayerReportManagerEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PayerReportManagerEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PayerReportManagerEIP712DomainChanged represents a EIP712DomainChanged event raised by the PayerReportManager contract.
type PayerReportManagerEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_PayerReportManager *PayerReportManagerFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*PayerReportManagerEIP712DomainChangedIterator, error) {

	logs, sub, err := _PayerReportManager.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &PayerReportManagerEIP712DomainChangedIterator{contract: _PayerReportManager.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_PayerReportManager *PayerReportManagerFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *PayerReportManagerEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _PayerReportManager.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PayerReportManagerEIP712DomainChanged)
				if err := _PayerReportManager.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_PayerReportManager *PayerReportManagerFilterer) ParseEIP712DomainChanged(log types.Log) (*PayerReportManagerEIP712DomainChanged, error) {
	event := new(PayerReportManagerEIP712DomainChanged)
	if err := _PayerReportManager.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PayerReportManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PayerReportManager contract.
type PayerReportManagerInitializedIterator struct {
	Event *PayerReportManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PayerReportManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PayerReportManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PayerReportManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PayerReportManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PayerReportManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PayerReportManagerInitialized represents a Initialized event raised by the PayerReportManager contract.
type PayerReportManagerInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_PayerReportManager *PayerReportManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*PayerReportManagerInitializedIterator, error) {

	logs, sub, err := _PayerReportManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PayerReportManagerInitializedIterator{contract: _PayerReportManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_PayerReportManager *PayerReportManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PayerReportManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _PayerReportManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PayerReportManagerInitialized)
				if err := _PayerReportManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_PayerReportManager *PayerReportManagerFilterer) ParseInitialized(log types.Log) (*PayerReportManagerInitialized, error) {
	event := new(PayerReportManagerInitialized)
	if err := _PayerReportManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PayerReportManagerMigratedIterator is returned from FilterMigrated and is used to iterate over the raw logs and unpacked data for Migrated events raised by the PayerReportManager contract.
type PayerReportManagerMigratedIterator struct {
	Event *PayerReportManagerMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PayerReportManagerMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PayerReportManagerMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PayerReportManagerMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PayerReportManagerMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PayerReportManagerMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PayerReportManagerMigrated represents a Migrated event raised by the PayerReportManager contract.
type PayerReportManagerMigrated struct {
	Migrator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMigrated is a free log retrieval operation binding the contract event 0xa2e7361c23d7820040603b83c0cd3f494d377bac69736377d75bb56c651a5098.
//
// Solidity: event Migrated(address indexed migrator)
func (_PayerReportManager *PayerReportManagerFilterer) FilterMigrated(opts *bind.FilterOpts, migrator []common.Address) (*PayerReportManagerMigratedIterator, error) {

	var migratorRule []interface{}
	for _, migratorItem := range migrator {
		migratorRule = append(migratorRule, migratorItem)
	}

	logs, sub, err := _PayerReportManager.contract.FilterLogs(opts, "Migrated", migratorRule)
	if err != nil {
		return nil, err
	}
	return &PayerReportManagerMigratedIterator{contract: _PayerReportManager.contract, event: "Migrated", logs: logs, sub: sub}, nil
}

// WatchMigrated is a free log subscription operation binding the contract event 0xa2e7361c23d7820040603b83c0cd3f494d377bac69736377d75bb56c651a5098.
//
// Solidity: event Migrated(address indexed migrator)
func (_PayerReportManager *PayerReportManagerFilterer) WatchMigrated(opts *bind.WatchOpts, sink chan<- *PayerReportManagerMigrated, migrator []common.Address) (event.Subscription, error) {

	var migratorRule []interface{}
	for _, migratorItem := range migrator {
		migratorRule = append(migratorRule, migratorItem)
	}

	logs, sub, err := _PayerReportManager.contract.WatchLogs(opts, "Migrated", migratorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PayerReportManagerMigrated)
				if err := _PayerReportManager.contract.UnpackLog(event, "Migrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrated is a log parse operation binding the contract event 0xa2e7361c23d7820040603b83c0cd3f494d377bac69736377d75bb56c651a5098.
//
// Solidity: event Migrated(address indexed migrator)
func (_PayerReportManager *PayerReportManagerFilterer) ParseMigrated(log types.Log) (*PayerReportManagerMigrated, error) {
	event := new(PayerReportManagerMigrated)
	if err := _PayerReportManager.contract.UnpackLog(event, "Migrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PayerReportManagerPayerReportSubmittedIterator is returned from FilterPayerReportSubmitted and is used to iterate over the raw logs and unpacked data for PayerReportSubmitted events raised by the PayerReportManager contract.
type PayerReportManagerPayerReportSubmittedIterator struct {
	Event *PayerReportManagerPayerReportSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PayerReportManagerPayerReportSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PayerReportManagerPayerReportSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PayerReportManagerPayerReportSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PayerReportManagerPayerReportSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PayerReportManagerPayerReportSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PayerReportManagerPayerReportSubmitted represents a PayerReportSubmitted event raised by the PayerReportManager contract.
type PayerReportManagerPayerReportSubmitted struct {
	OriginatorNodeId uint32
	PayerReportIndex *big.Int
	StartSequenceId  uint64
	EndSequenceId    uint64
	PayersMerkleRoot [32]byte
	NodeIds          []uint32
	SigningNodeIds   []uint32
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterPayerReportSubmitted is a free log retrieval operation binding the contract event 0xf12df7b91b93c52175586285d72faca087327f0686c9c38e514bf9f67ef59365.
//
// Solidity: event PayerReportSubmitted(uint32 indexed originatorNodeId, uint256 indexed payerReportIndex, uint64 startSequenceId, uint64 indexed endSequenceId, bytes32 payersMerkleRoot, uint32[] nodeIds, uint32[] signingNodeIds)
func (_PayerReportManager *PayerReportManagerFilterer) FilterPayerReportSubmitted(opts *bind.FilterOpts, originatorNodeId []uint32, payerReportIndex []*big.Int, endSequenceId []uint64) (*PayerReportManagerPayerReportSubmittedIterator, error) {

	var originatorNodeIdRule []interface{}
	for _, originatorNodeIdItem := range originatorNodeId {
		originatorNodeIdRule = append(originatorNodeIdRule, originatorNodeIdItem)
	}
	var payerReportIndexRule []interface{}
	for _, payerReportIndexItem := range payerReportIndex {
		payerReportIndexRule = append(payerReportIndexRule, payerReportIndexItem)
	}

	var endSequenceIdRule []interface{}
	for _, endSequenceIdItem := range endSequenceId {
		endSequenceIdRule = append(endSequenceIdRule, endSequenceIdItem)
	}

	logs, sub, err := _PayerReportManager.contract.FilterLogs(opts, "PayerReportSubmitted", originatorNodeIdRule, payerReportIndexRule, endSequenceIdRule)
	if err != nil {
		return nil, err
	}
	return &PayerReportManagerPayerReportSubmittedIterator{contract: _PayerReportManager.contract, event: "PayerReportSubmitted", logs: logs, sub: sub}, nil
}

// WatchPayerReportSubmitted is a free log subscription operation binding the contract event 0xf12df7b91b93c52175586285d72faca087327f0686c9c38e514bf9f67ef59365.
//
// Solidity: event PayerReportSubmitted(uint32 indexed originatorNodeId, uint256 indexed payerReportIndex, uint64 startSequenceId, uint64 indexed endSequenceId, bytes32 payersMerkleRoot, uint32[] nodeIds, uint32[] signingNodeIds)
func (_PayerReportManager *PayerReportManagerFilterer) WatchPayerReportSubmitted(opts *bind.WatchOpts, sink chan<- *PayerReportManagerPayerReportSubmitted, originatorNodeId []uint32, payerReportIndex []*big.Int, endSequenceId []uint64) (event.Subscription, error) {

	var originatorNodeIdRule []interface{}
	for _, originatorNodeIdItem := range originatorNodeId {
		originatorNodeIdRule = append(originatorNodeIdRule, originatorNodeIdItem)
	}
	var payerReportIndexRule []interface{}
	for _, payerReportIndexItem := range payerReportIndex {
		payerReportIndexRule = append(payerReportIndexRule, payerReportIndexItem)
	}

	var endSequenceIdRule []interface{}
	for _, endSequenceIdItem := range endSequenceId {
		endSequenceIdRule = append(endSequenceIdRule, endSequenceIdItem)
	}

	logs, sub, err := _PayerReportManager.contract.WatchLogs(opts, "PayerReportSubmitted", originatorNodeIdRule, payerReportIndexRule, endSequenceIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PayerReportManagerPayerReportSubmitted)
				if err := _PayerReportManager.contract.UnpackLog(event, "PayerReportSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePayerReportSubmitted is a log parse operation binding the contract event 0xf12df7b91b93c52175586285d72faca087327f0686c9c38e514bf9f67ef59365.
//
// Solidity: event PayerReportSubmitted(uint32 indexed originatorNodeId, uint256 indexed payerReportIndex, uint64 startSequenceId, uint64 indexed endSequenceId, bytes32 payersMerkleRoot, uint32[] nodeIds, uint32[] signingNodeIds)
func (_PayerReportManager *PayerReportManagerFilterer) ParsePayerReportSubmitted(log types.Log) (*PayerReportManagerPayerReportSubmitted, error) {
	event := new(PayerReportManagerPayerReportSubmitted)
	if err := _PayerReportManager.contract.UnpackLog(event, "PayerReportSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PayerReportManagerPayerReportSubsetSettledIterator is returned from FilterPayerReportSubsetSettled and is used to iterate over the raw logs and unpacked data for PayerReportSubsetSettled events raised by the PayerReportManager contract.
type PayerReportManagerPayerReportSubsetSettledIterator struct {
	Event *PayerReportManagerPayerReportSubsetSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PayerReportManagerPayerReportSubsetSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PayerReportManagerPayerReportSubsetSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PayerReportManagerPayerReportSubsetSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PayerReportManagerPayerReportSubsetSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PayerReportManagerPayerReportSubsetSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PayerReportManagerPayerReportSubsetSettled represents a PayerReportSubsetSettled event raised by the PayerReportManager contract.
type PayerReportManagerPayerReportSubsetSettled struct {
	OriginatorNodeId uint32
	PayerReportIndex *big.Int
	Count            uint32
	Remaining        uint32
	FeesSettled      *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterPayerReportSubsetSettled is a free log retrieval operation binding the contract event 0x3e2ef0c87bba9a992cfdc5189b278bd9852605eaca1ee05c64f285cff2c07691.
//
// Solidity: event PayerReportSubsetSettled(uint32 indexed originatorNodeId, uint256 indexed payerReportIndex, uint32 count, uint32 remaining, uint96 feesSettled)
func (_PayerReportManager *PayerReportManagerFilterer) FilterPayerReportSubsetSettled(opts *bind.FilterOpts, originatorNodeId []uint32, payerReportIndex []*big.Int) (*PayerReportManagerPayerReportSubsetSettledIterator, error) {

	var originatorNodeIdRule []interface{}
	for _, originatorNodeIdItem := range originatorNodeId {
		originatorNodeIdRule = append(originatorNodeIdRule, originatorNodeIdItem)
	}
	var payerReportIndexRule []interface{}
	for _, payerReportIndexItem := range payerReportIndex {
		payerReportIndexRule = append(payerReportIndexRule, payerReportIndexItem)
	}

	logs, sub, err := _PayerReportManager.contract.FilterLogs(opts, "PayerReportSubsetSettled", originatorNodeIdRule, payerReportIndexRule)
	if err != nil {
		return nil, err
	}
	return &PayerReportManagerPayerReportSubsetSettledIterator{contract: _PayerReportManager.contract, event: "PayerReportSubsetSettled", logs: logs, sub: sub}, nil
}

// WatchPayerReportSubsetSettled is a free log subscription operation binding the contract event 0x3e2ef0c87bba9a992cfdc5189b278bd9852605eaca1ee05c64f285cff2c07691.
//
// Solidity: event PayerReportSubsetSettled(uint32 indexed originatorNodeId, uint256 indexed payerReportIndex, uint32 count, uint32 remaining, uint96 feesSettled)
func (_PayerReportManager *PayerReportManagerFilterer) WatchPayerReportSubsetSettled(opts *bind.WatchOpts, sink chan<- *PayerReportManagerPayerReportSubsetSettled, originatorNodeId []uint32, payerReportIndex []*big.Int) (event.Subscription, error) {

	var originatorNodeIdRule []interface{}
	for _, originatorNodeIdItem := range originatorNodeId {
		originatorNodeIdRule = append(originatorNodeIdRule, originatorNodeIdItem)
	}
	var payerReportIndexRule []interface{}
	for _, payerReportIndexItem := range payerReportIndex {
		payerReportIndexRule = append(payerReportIndexRule, payerReportIndexItem)
	}

	logs, sub, err := _PayerReportManager.contract.WatchLogs(opts, "PayerReportSubsetSettled", originatorNodeIdRule, payerReportIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PayerReportManagerPayerReportSubsetSettled)
				if err := _PayerReportManager.contract.UnpackLog(event, "PayerReportSubsetSettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePayerReportSubsetSettled is a log parse operation binding the contract event 0x3e2ef0c87bba9a992cfdc5189b278bd9852605eaca1ee05c64f285cff2c07691.
//
// Solidity: event PayerReportSubsetSettled(uint32 indexed originatorNodeId, uint256 indexed payerReportIndex, uint32 count, uint32 remaining, uint96 feesSettled)
func (_PayerReportManager *PayerReportManagerFilterer) ParsePayerReportSubsetSettled(log types.Log) (*PayerReportManagerPayerReportSubsetSettled, error) {
	event := new(PayerReportManagerPayerReportSubsetSettled)
	if err := _PayerReportManager.contract.UnpackLog(event, "PayerReportSubsetSettled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PayerReportManagerUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the PayerReportManager contract.
type PayerReportManagerUpgradedIterator struct {
	Event *PayerReportManagerUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PayerReportManagerUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PayerReportManagerUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PayerReportManagerUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PayerReportManagerUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PayerReportManagerUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PayerReportManagerUpgraded represents a Upgraded event raised by the PayerReportManager contract.
type PayerReportManagerUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PayerReportManager *PayerReportManagerFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*PayerReportManagerUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PayerReportManager.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &PayerReportManagerUpgradedIterator{contract: _PayerReportManager.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PayerReportManager *PayerReportManagerFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *PayerReportManagerUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PayerReportManager.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PayerReportManagerUpgraded)
				if err := _PayerReportManager.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PayerReportManager *PayerReportManagerFilterer) ParseUpgraded(log types.Log) (*PayerReportManagerUpgraded, error) {
	event := new(PayerReportManagerUpgraded)
	if err := _PayerReportManager.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
