// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: congestion.sql

package queries

import (
	"context"
)

const getRecentOriginatorCongestion = `-- name: GetRecentOriginatorCongestion :many
SELECT 
	minutes_since_epoch,
	num_messages
FROM
	originator_congestion
WHERE
	originator_id = $1
	AND minutes_since_epoch <= $2::INT
	AND minutes_since_epoch > $2::INT - $3::INT
ORDER BY minutes_since_epoch DESC
`

type GetRecentOriginatorCongestionParams struct {
	OriginatorID int32
	EndMinute    int32
	NumMinutes   int32
}

type GetRecentOriginatorCongestionRow struct {
	MinutesSinceEpoch int32
	NumMessages       int32
}

func (q *Queries) GetRecentOriginatorCongestion(ctx context.Context, arg GetRecentOriginatorCongestionParams) ([]GetRecentOriginatorCongestionRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentOriginatorCongestion, arg.OriginatorID, arg.EndMinute, arg.NumMinutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentOriginatorCongestionRow
	for rows.Next() {
		var i GetRecentOriginatorCongestionRow
		if err := rows.Scan(&i.MinutesSinceEpoch, &i.NumMessages); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementOriginatorCongestion = `-- name: IncrementOriginatorCongestion :exec
INSERT INTO originator_congestion(originator_id, minutes_since_epoch, num_messages)
	VALUES ($1, $2, 1)
ON CONFLICT (originator_id, minutes_since_epoch)
	DO UPDATE SET
		num_messages = originator_congestion.num_messages + 1
`

type IncrementOriginatorCongestionParams struct {
	OriginatorID      int32
	MinutesSinceEpoch int32
}

func (q *Queries) IncrementOriginatorCongestion(ctx context.Context, arg IncrementOriginatorCongestionParams) error {
	_, err := q.db.ExecContext(ctx, incrementOriginatorCongestion, arg.OriginatorID, arg.MinutesSinceEpoch)
	return err
}

const sumOriginatorCongestion = `-- name: SumOriginatorCongestion :one
SELECT
	COALESCE(SUM(num_messages), 0)::BIGINT AS num_messages
FROM
	originator_congestion
WHERE
	originator_id = $1
	AND ($2::BIGINT = 0
		OR minutes_since_epoch > $2::BIGINT)
	AND ($3::BIGINT = 0
		OR minutes_since_epoch < $3::BIGINT)
`

type SumOriginatorCongestionParams struct {
	OriginatorID        int32
	MinutesSinceEpochGt int64
	MinutesSinceEpochLt int64
}

func (q *Queries) SumOriginatorCongestion(ctx context.Context, arg SumOriginatorCongestionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, sumOriginatorCongestion, arg.OriginatorID, arg.MinutesSinceEpochGt, arg.MinutesSinceEpochLt)
	var num_messages int64
	err := row.Scan(&num_messages)
	return num_messages, err
}
