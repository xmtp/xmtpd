// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: ledger.sql

package queries

import (
	"context"
)

const getLastEvent = `-- name: GetLastEvent :one
SELECT event_id, payer_id, amount_picodollars, event_type, created_at
FROM payer_ledger_events
WHERE payer_id = $1
    AND event_type = $2
ORDER BY created_at DESC
LIMIT 1
`

type GetLastEventParams struct {
	PayerID   int32
	EventType int16
}

func (q *Queries) GetLastEvent(ctx context.Context, arg GetLastEventParams) (PayerLedgerEvent, error) {
	row := q.db.QueryRowContext(ctx, getLastEvent, arg.PayerID, arg.EventType)
	var i PayerLedgerEvent
	err := row.Scan(
		&i.EventID,
		&i.PayerID,
		&i.AmountPicodollars,
		&i.EventType,
		&i.CreatedAt,
	)
	return i, err
}

const getPayerBalance = `-- name: GetPayerBalance :one
SELECT COALESCE(SUM(amount_picodollars), 0)::BIGINT AS balance
FROM payer_ledger_events
WHERE payer_id = $1
`

func (q *Queries) GetPayerBalance(ctx context.Context, payerID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPayerBalance, payerID)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const insertPayerLedgerEvent = `-- name: InsertPayerLedgerEvent :exec
INSERT INTO payer_ledger_events(
        event_id,
        payer_id,
        amount_picodollars,
        event_type
    )
VALUES (
        $1,
        $2,
        $3,
        $4
    ) ON CONFLICT (event_id) DO NOTHING
`

type InsertPayerLedgerEventParams struct {
	EventID           []byte
	PayerID           int32
	AmountPicodollars int64
	EventType         int16
}

func (q *Queries) InsertPayerLedgerEvent(ctx context.Context, arg InsertPayerLedgerEventParams) error {
	_, err := q.db.ExecContext(ctx, insertPayerLedgerEvent,
		arg.EventID,
		arg.PayerID,
		arg.AmountPicodollars,
		arg.EventType,
	)
	return err
}
