// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: node.sql

package queries

import (
	"context"
)

const insertNodeInfo = `-- name: InsertNodeInfo :execrows
INSERT INTO node_info(node_id, public_key)
	VALUES ($1, $2)
ON CONFLICT
	DO NOTHING
`

type InsertNodeInfoParams struct {
	NodeID    int32
	PublicKey []byte
}

func (q *Queries) InsertNodeInfo(ctx context.Context, arg InsertNodeInfoParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertNodeInfo, arg.NodeID, arg.PublicKey)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const selectNodeInfo = `-- name: SelectNodeInfo :one
SELECT
	node_id, public_key, singleton_id
FROM
	node_info
WHERE
	singleton_id = 1
`

func (q *Queries) SelectNodeInfo(ctx context.Context) (NodeInfo, error) {
	row := q.db.QueryRowContext(ctx, selectNodeInfo)
	var i NodeInfo
	err := row.Scan(&i.NodeID, &i.PublicKey, &i.SingletonID)
	return i, err
}
