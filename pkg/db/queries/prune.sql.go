// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: prune.sql

package queries

import (
	"context"
	"database/sql"
)

const countExpiredEnvelopes = `-- name: CountExpiredEnvelopes :one
SELECT COUNT(*)::bigint AS expired_count
FROM public.gateway_envelopes
WHERE expiry IS NOT NULL
  AND expiry < EXTRACT(EPOCH FROM now())::bigint
`

func (q *Queries) CountExpiredEnvelopes(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countExpiredEnvelopes)
	var expired_count int64
	err := row.Scan(&expired_count)
	return expired_count, err
}

const deleteExpiredEnvelopesBatch = `-- name: DeleteExpiredEnvelopesBatch :many
WITH to_delete AS (
    SELECT originator_node_id, originator_sequence_id
    FROM gateway_envelopes
    WHERE expiry IS NOT NULL
      AND expiry < EXTRACT(EPOCH FROM now())::bigint
    ORDER BY expiry
    LIMIT 1000
        FOR UPDATE SKIP LOCKED
)
DELETE FROM gateway_envelopes ge
    USING to_delete td
WHERE ge.originator_node_id = td.originator_node_id
  AND ge.originator_sequence_id = td.originator_sequence_id
RETURNING ge.originator_node_id, ge.originator_sequence_id, ge.expiry
`

type DeleteExpiredEnvelopesBatchRow struct {
	OriginatorNodeID     int32
	OriginatorSequenceID int64
	Expiry               sql.NullInt64
}

func (q *Queries) DeleteExpiredEnvelopesBatch(ctx context.Context) ([]DeleteExpiredEnvelopesBatchRow, error) {
	rows, err := q.db.QueryContext(ctx, deleteExpiredEnvelopesBatch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeleteExpiredEnvelopesBatchRow
	for rows.Next() {
		var i DeleteExpiredEnvelopesBatchRow
		if err := rows.Scan(&i.OriginatorNodeID, &i.OriginatorSequenceID, &i.Expiry); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
