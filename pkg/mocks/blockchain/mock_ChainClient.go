// Code generated by mockery v2.52.2. DO NOT EDIT.

package blockchain

import (
	big "math/big"

	context "context"

	ethereum "github.com/ethereum/go-ethereum"

	groupmessagebroadcaster "github.com/xmtp/xmtpd/pkg/abi/groupmessagebroadcaster"

	identityupdatebroadcaster "github.com/xmtp/xmtpd/pkg/abi/identityupdatebroadcaster"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockChainClient is an autogenerated mock type for the ChainClient type
type MockChainClient struct {
	mock.Mock
}

type MockChainClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChainClient) EXPECT() *MockChainClient_Expecter {
	return &MockChainClient_Expecter{mock: &_m.Mock}
}

// BlockByNumber provides a mock function with given fields: ctx, number
func (_m *MockChainClient) BlockByNumber(ctx context.Context, number *big.Int) (*types.Block, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for BlockByNumber")
	}

	var r0 *types.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (*types.Block, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) *types.Block); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChainClient_BlockByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockByNumber'
type MockChainClient_BlockByNumber_Call struct {
	*mock.Call
}

// BlockByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number *big.Int
func (_e *MockChainClient_Expecter) BlockByNumber(ctx interface{}, number interface{}) *MockChainClient_BlockByNumber_Call {
	return &MockChainClient_BlockByNumber_Call{Call: _e.mock.On("BlockByNumber", ctx, number)}
}

func (_c *MockChainClient_BlockByNumber_Call) Run(run func(ctx context.Context, number *big.Int)) *MockChainClient_BlockByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *MockChainClient_BlockByNumber_Call) Return(_a0 *types.Block, _a1 error) *MockChainClient_BlockByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChainClient_BlockByNumber_Call) RunAndReturn(run func(context.Context, *big.Int) (*types.Block, error)) *MockChainClient_BlockByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// BlockNumber provides a mock function with given fields: ctx
func (_m *MockChainClient) BlockNumber(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BlockNumber")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChainClient_BlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockNumber'
type MockChainClient_BlockNumber_Call struct {
	*mock.Call
}

// BlockNumber is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChainClient_Expecter) BlockNumber(ctx interface{}) *MockChainClient_BlockNumber_Call {
	return &MockChainClient_BlockNumber_Call{Call: _e.mock.On("BlockNumber", ctx)}
}

func (_c *MockChainClient_BlockNumber_Call) Run(run func(ctx context.Context)) *MockChainClient_BlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChainClient_BlockNumber_Call) Return(_a0 uint64, _a1 error) *MockChainClient_BlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChainClient_BlockNumber_Call) RunAndReturn(run func(context.Context) (uint64, error)) *MockChainClient_BlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// FilterLogs provides a mock function with given fields: ctx, q
func (_m *MockChainClient) FilterLogs(ctx context.Context, q ethereum.FilterQuery) ([]types.Log, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for FilterLogs")
	}

	var r0 []types.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.FilterQuery) ([]types.Log, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.FilterQuery) []types.Log); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ethereum.FilterQuery) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChainClient_FilterLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterLogs'
type MockChainClient_FilterLogs_Call struct {
	*mock.Call
}

// FilterLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - q ethereum.FilterQuery
func (_e *MockChainClient_Expecter) FilterLogs(ctx interface{}, q interface{}) *MockChainClient_FilterLogs_Call {
	return &MockChainClient_FilterLogs_Call{Call: _e.mock.On("FilterLogs", ctx, q)}
}

func (_c *MockChainClient_FilterLogs_Call) Run(run func(ctx context.Context, q ethereum.FilterQuery)) *MockChainClient_FilterLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ethereum.FilterQuery))
	})
	return _c
}

func (_c *MockChainClient_FilterLogs_Call) Return(_a0 []types.Log, _a1 error) *MockChainClient_FilterLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChainClient_FilterLogs_Call) RunAndReturn(run func(context.Context, ethereum.FilterQuery) ([]types.Log, error)) *MockChainClient_FilterLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ParseIdentityUpdateCreated provides a mock function with given fields: log
func (_m *MockChainClient) ParseIdentityUpdateCreated(log types.Log) (*identityupdatebroadcaster.IdentityUpdateBroadcasterIdentityUpdateCreated, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseIdentityUpdateCreated")
	}

	var r0 *identityupdatebroadcaster.IdentityUpdateBroadcasterIdentityUpdateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*identityupdatebroadcaster.IdentityUpdateBroadcasterIdentityUpdateCreated, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *identityupdatebroadcaster.IdentityUpdateBroadcasterIdentityUpdateCreated); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identityupdatebroadcaster.IdentityUpdateBroadcasterIdentityUpdateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChainClient_ParseIdentityUpdateCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseIdentityUpdateCreated'
type MockChainClient_ParseIdentityUpdateCreated_Call struct {
	*mock.Call
}

// ParseIdentityUpdateCreated is a helper method to define mock.On call
//   - log types.Log
func (_e *MockChainClient_Expecter) ParseIdentityUpdateCreated(log interface{}) *MockChainClient_ParseIdentityUpdateCreated_Call {
	return &MockChainClient_ParseIdentityUpdateCreated_Call{Call: _e.mock.On("ParseIdentityUpdateCreated", log)}
}

func (_c *MockChainClient_ParseIdentityUpdateCreated_Call) Run(run func(log types.Log)) *MockChainClient_ParseIdentityUpdateCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *MockChainClient_ParseIdentityUpdateCreated_Call) Return(_a0 *identityupdatebroadcaster.IdentityUpdateBroadcasterIdentityUpdateCreated, _a1 error) *MockChainClient_ParseIdentityUpdateCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChainClient_ParseIdentityUpdateCreated_Call) RunAndReturn(run func(types.Log) (*identityupdatebroadcaster.IdentityUpdateBroadcasterIdentityUpdateCreated, error)) *MockChainClient_ParseIdentityUpdateCreated_Call {
	_c.Call.Return(run)
	return _c
}

// ParseMessageSent provides a mock function with given fields: log
func (_m *MockChainClient) ParseMessageSent(log types.Log) (*groupmessagebroadcaster.GroupMessageBroadcasterMessageSent, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseMessageSent")
	}

	var r0 *groupmessagebroadcaster.GroupMessageBroadcasterMessageSent
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*groupmessagebroadcaster.GroupMessageBroadcasterMessageSent, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *groupmessagebroadcaster.GroupMessageBroadcasterMessageSent); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groupmessagebroadcaster.GroupMessageBroadcasterMessageSent)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChainClient_ParseMessageSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseMessageSent'
type MockChainClient_ParseMessageSent_Call struct {
	*mock.Call
}

// ParseMessageSent is a helper method to define mock.On call
//   - log types.Log
func (_e *MockChainClient_Expecter) ParseMessageSent(log interface{}) *MockChainClient_ParseMessageSent_Call {
	return &MockChainClient_ParseMessageSent_Call{Call: _e.mock.On("ParseMessageSent", log)}
}

func (_c *MockChainClient_ParseMessageSent_Call) Run(run func(log types.Log)) *MockChainClient_ParseMessageSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *MockChainClient_ParseMessageSent_Call) Return(_a0 *groupmessagebroadcaster.GroupMessageBroadcasterMessageSent, _a1 error) *MockChainClient_ParseMessageSent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChainClient_ParseMessageSent_Call) RunAndReturn(run func(types.Log) (*groupmessagebroadcaster.GroupMessageBroadcasterMessageSent, error)) *MockChainClient_ParseMessageSent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChainClient creates a new instance of MockChainClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChainClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChainClient {
	mock := &MockChainClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
