// Code generated by mockery v2.52.2. DO NOT EDIT.

package blockchain

import (
	context "context"
	big "math/big"

	blockchain "github.com/xmtp/xmtpd/pkg/blockchain"

	mock "github.com/stretchr/testify/mock"
)

// MockNonceManager is an autogenerated mock type for the NonceManager type
type MockNonceManager struct {
	mock.Mock
}

type MockNonceManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNonceManager) EXPECT() *MockNonceManager_Expecter {
	return &MockNonceManager_Expecter{mock: &_m.Mock}
}

// FastForwardNonce provides a mock function with given fields: ctx, nonce
func (_m *MockNonceManager) FastForwardNonce(ctx context.Context, nonce big.Int) error {
	ret := _m.Called(ctx, nonce)

	if len(ret) == 0 {
		panic("no return value specified for FastForwardNonce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, big.Int) error); ok {
		r0 = rf(ctx, nonce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNonceManager_FastForwardNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FastForwardNonce'
type MockNonceManager_FastForwardNonce_Call struct {
	*mock.Call
}

// FastForwardNonce is a helper method to define mock.On call
//   - ctx context.Context
//   - nonce big.Int
func (_e *MockNonceManager_Expecter) FastForwardNonce(ctx interface{}, nonce interface{}) *MockNonceManager_FastForwardNonce_Call {
	return &MockNonceManager_FastForwardNonce_Call{Call: _e.mock.On("FastForwardNonce", ctx, nonce)}
}

func (_c *MockNonceManager_FastForwardNonce_Call) Run(run func(ctx context.Context, nonce big.Int)) *MockNonceManager_FastForwardNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(big.Int))
	})
	return _c
}

func (_c *MockNonceManager_FastForwardNonce_Call) Return(_a0 error) *MockNonceManager_FastForwardNonce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNonceManager_FastForwardNonce_Call) RunAndReturn(run func(context.Context, big.Int) error) *MockNonceManager_FastForwardNonce_Call {
	_c.Call.Return(run)
	return _c
}

// GetNonce provides a mock function with given fields: ctx
func (_m *MockNonceManager) GetNonce(ctx context.Context) (*blockchain.NonceContext, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNonce")
	}

	var r0 *blockchain.NonceContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*blockchain.NonceContext, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *blockchain.NonceContext); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blockchain.NonceContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNonceManager_GetNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNonce'
type MockNonceManager_GetNonce_Call struct {
	*mock.Call
}

// GetNonce is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNonceManager_Expecter) GetNonce(ctx interface{}) *MockNonceManager_GetNonce_Call {
	return &MockNonceManager_GetNonce_Call{Call: _e.mock.On("GetNonce", ctx)}
}

func (_c *MockNonceManager_GetNonce_Call) Run(run func(ctx context.Context)) *MockNonceManager_GetNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNonceManager_GetNonce_Call) Return(_a0 *blockchain.NonceContext, _a1 error) *MockNonceManager_GetNonce_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNonceManager_GetNonce_Call) RunAndReturn(run func(context.Context) (*blockchain.NonceContext, error)) *MockNonceManager_GetNonce_Call {
	_c.Call.Return(run)
	return _c
}

// Replenish provides a mock function with given fields: ctx, nonce
func (_m *MockNonceManager) Replenish(ctx context.Context, nonce big.Int) error {
	ret := _m.Called(ctx, nonce)

	if len(ret) == 0 {
		panic("no return value specified for Replenish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, big.Int) error); ok {
		r0 = rf(ctx, nonce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNonceManager_Replenish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replenish'
type MockNonceManager_Replenish_Call struct {
	*mock.Call
}

// Replenish is a helper method to define mock.On call
//   - ctx context.Context
//   - nonce big.Int
func (_e *MockNonceManager_Expecter) Replenish(ctx interface{}, nonce interface{}) *MockNonceManager_Replenish_Call {
	return &MockNonceManager_Replenish_Call{Call: _e.mock.On("Replenish", ctx, nonce)}
}

func (_c *MockNonceManager_Replenish_Call) Run(run func(ctx context.Context, nonce big.Int)) *MockNonceManager_Replenish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(big.Int))
	})
	return _c
}

func (_c *MockNonceManager_Replenish_Call) Return(_a0 error) *MockNonceManager_Replenish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNonceManager_Replenish_Call) RunAndReturn(run func(context.Context, big.Int) error) *MockNonceManager_Replenish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNonceManager creates a new instance of MockNonceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNonceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNonceManager {
	mock := &MockNonceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
