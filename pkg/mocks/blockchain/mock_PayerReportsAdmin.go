// Code generated by mockery v2.52.2. DO NOT EDIT.

package blockchain

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	payerreport "github.com/xmtp/xmtpd/pkg/payerreport"
)

// MockPayerReportsAdmin is an autogenerated mock type for the PayerReportsAdmin type
type MockPayerReportsAdmin struct {
	mock.Mock
}

type MockPayerReportsAdmin_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPayerReportsAdmin) EXPECT() *MockPayerReportsAdmin_Expecter {
	return &MockPayerReportsAdmin_Expecter{mock: &_m.Mock}
}

// GetDomainSeparator provides a mock function with given fields: ctx
func (_m *MockPayerReportsAdmin) GetDomainSeparator(ctx context.Context) (common.Hash, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainSeparator")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (common.Hash, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) common.Hash); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayerReportsAdmin_GetDomainSeparator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomainSeparator'
type MockPayerReportsAdmin_GetDomainSeparator_Call struct {
	*mock.Call
}

// GetDomainSeparator is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPayerReportsAdmin_Expecter) GetDomainSeparator(ctx interface{}) *MockPayerReportsAdmin_GetDomainSeparator_Call {
	return &MockPayerReportsAdmin_GetDomainSeparator_Call{Call: _e.mock.On("GetDomainSeparator", ctx)}
}

func (_c *MockPayerReportsAdmin_GetDomainSeparator_Call) Run(run func(ctx context.Context)) *MockPayerReportsAdmin_GetDomainSeparator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPayerReportsAdmin_GetDomainSeparator_Call) Return(_a0 common.Hash, _a1 error) *MockPayerReportsAdmin_GetDomainSeparator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayerReportsAdmin_GetDomainSeparator_Call) RunAndReturn(run func(context.Context) (common.Hash, error)) *MockPayerReportsAdmin_GetDomainSeparator_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitPayerReport provides a mock function with given fields: ctx, report
func (_m *MockPayerReportsAdmin) SubmitPayerReport(ctx context.Context, report *payerreport.PayerReportWithStatus) error {
	ret := _m.Called(ctx, report)

	if len(ret) == 0 {
		panic("no return value specified for SubmitPayerReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *payerreport.PayerReportWithStatus) error); ok {
		r0 = rf(ctx, report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPayerReportsAdmin_SubmitPayerReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitPayerReport'
type MockPayerReportsAdmin_SubmitPayerReport_Call struct {
	*mock.Call
}

// SubmitPayerReport is a helper method to define mock.On call
//   - ctx context.Context
//   - report *payerreport.PayerReportWithStatus
func (_e *MockPayerReportsAdmin_Expecter) SubmitPayerReport(ctx interface{}, report interface{}) *MockPayerReportsAdmin_SubmitPayerReport_Call {
	return &MockPayerReportsAdmin_SubmitPayerReport_Call{Call: _e.mock.On("SubmitPayerReport", ctx, report)}
}

func (_c *MockPayerReportsAdmin_SubmitPayerReport_Call) Run(run func(ctx context.Context, report *payerreport.PayerReportWithStatus)) *MockPayerReportsAdmin_SubmitPayerReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*payerreport.PayerReportWithStatus))
	})
	return _c
}

func (_c *MockPayerReportsAdmin_SubmitPayerReport_Call) Return(_a0 error) *MockPayerReportsAdmin_SubmitPayerReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPayerReportsAdmin_SubmitPayerReport_Call) RunAndReturn(run func(context.Context, *payerreport.PayerReportWithStatus) error) *MockPayerReportsAdmin_SubmitPayerReport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPayerReportsAdmin creates a new instance of MockPayerReportsAdmin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPayerReportsAdmin(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPayerReportsAdmin {
	mock := &MockPayerReportsAdmin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
