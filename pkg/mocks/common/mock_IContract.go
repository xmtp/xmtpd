// Code generated by mockery v2.52.2. DO NOT EDIT.

package common

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	retryable_errors "github.com/xmtp/xmtpd/pkg/errors"

	types "github.com/ethereum/go-ethereum/core/types"

	zap "go.uber.org/zap"
)

// MockIContract is an autogenerated mock type for the IContract type
type MockIContract struct {
	mock.Mock
}

type MockIContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIContract) EXPECT() *MockIContract_Expecter {
	return &MockIContract_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with no fields
func (_m *MockIContract) Address() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// MockIContract_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type MockIContract_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *MockIContract_Expecter) Address() *MockIContract_Address_Call {
	return &MockIContract_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *MockIContract_Address_Call) Run(run func()) *MockIContract_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIContract_Address_Call) Return(_a0 common.Address) *MockIContract_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIContract_Address_Call) RunAndReturn(run func() common.Address) *MockIContract_Address_Call {
	_c.Call.Return(run)
	return _c
}

// FindReorgPoint provides a mock function with given fields: detectedAt
func (_m *MockIContract) FindReorgPoint(detectedAt uint64) (uint64, []byte, error) {
	ret := _m.Called(detectedAt)

	if len(ret) == 0 {
		panic("no return value specified for FindReorgPoint")
	}

	var r0 uint64
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, []byte, error)); ok {
		return rf(detectedAt)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(detectedAt)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) []byte); ok {
		r1 = rf(detectedAt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(detectedAt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIContract_FindReorgPoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindReorgPoint'
type MockIContract_FindReorgPoint_Call struct {
	*mock.Call
}

// FindReorgPoint is a helper method to define mock.On call
//   - detectedAt uint64
func (_e *MockIContract_Expecter) FindReorgPoint(detectedAt interface{}) *MockIContract_FindReorgPoint_Call {
	return &MockIContract_FindReorgPoint_Call{Call: _e.mock.On("FindReorgPoint", detectedAt)}
}

func (_c *MockIContract_FindReorgPoint_Call) Run(run func(detectedAt uint64)) *MockIContract_FindReorgPoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockIContract_FindReorgPoint_Call) Return(_a0 uint64, _a1 []byte, _a2 error) *MockIContract_FindReorgPoint_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIContract_FindReorgPoint_Call) RunAndReturn(run func(uint64) (uint64, []byte, error)) *MockIContract_FindReorgPoint_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with no fields
func (_m *MockIContract) GetLatestBlock() (uint64, []byte) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 uint64
	var r1 []byte
	if rf, ok := ret.Get(0).(func() (uint64, []byte)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	return r0, r1
}

// MockIContract_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type MockIContract_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
func (_e *MockIContract_Expecter) GetLatestBlock() *MockIContract_GetLatestBlock_Call {
	return &MockIContract_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock")}
}

func (_c *MockIContract_GetLatestBlock_Call) Run(run func()) *MockIContract_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIContract_GetLatestBlock_Call) Return(_a0 uint64, _a1 []byte) *MockIContract_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIContract_GetLatestBlock_Call) RunAndReturn(run func() (uint64, []byte)) *MockIContract_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function with no fields
func (_m *MockIContract) Logger() *zap.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func() *zap.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// MockIContract_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type MockIContract_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *MockIContract_Expecter) Logger() *MockIContract_Logger_Call {
	return &MockIContract_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *MockIContract_Logger_Call) Run(run func()) *MockIContract_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIContract_Logger_Call) Return(_a0 *zap.Logger) *MockIContract_Logger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIContract_Logger_Call) RunAndReturn(run func() *zap.Logger) *MockIContract_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// StoreLog provides a mock function with given fields: ctx, event
func (_m *MockIContract) StoreLog(ctx context.Context, event types.Log) retryable_errors.RetryableError {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for StoreLog")
	}

	var r0 retryable_errors.RetryableError
	if rf, ok := ret.Get(0).(func(context.Context, types.Log) retryable_errors.RetryableError); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(retryable_errors.RetryableError)
		}
	}

	return r0
}

// MockIContract_StoreLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreLog'
type MockIContract_StoreLog_Call struct {
	*mock.Call
}

// StoreLog is a helper method to define mock.On call
//   - ctx context.Context
//   - event types.Log
func (_e *MockIContract_Expecter) StoreLog(ctx interface{}, event interface{}) *MockIContract_StoreLog_Call {
	return &MockIContract_StoreLog_Call{Call: _e.mock.On("StoreLog", ctx, event)}
}

func (_c *MockIContract_StoreLog_Call) Run(run func(ctx context.Context, event types.Log)) *MockIContract_StoreLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Log))
	})
	return _c
}

func (_c *MockIContract_StoreLog_Call) Return(_a0 retryable_errors.RetryableError) *MockIContract_StoreLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIContract_StoreLog_Call) RunAndReturn(run func(context.Context, types.Log) retryable_errors.RetryableError) *MockIContract_StoreLog_Call {
	_c.Call.Return(run)
	return _c
}

// Topics provides a mock function with no fields
func (_m *MockIContract) Topics() []common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topics")
	}

	var r0 []common.Hash
	if rf, ok := ret.Get(0).(func() []common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Hash)
		}
	}

	return r0
}

// MockIContract_Topics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topics'
type MockIContract_Topics_Call struct {
	*mock.Call
}

// Topics is a helper method to define mock.On call
func (_e *MockIContract_Expecter) Topics() *MockIContract_Topics_Call {
	return &MockIContract_Topics_Call{Call: _e.mock.On("Topics")}
}

func (_c *MockIContract_Topics_Call) Run(run func()) *MockIContract_Topics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIContract_Topics_Call) Return(_a0 []common.Hash) *MockIContract_Topics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIContract_Topics_Call) RunAndReturn(run func() []common.Hash) *MockIContract_Topics_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLatestBlock provides a mock function with given fields: ctx, block, hash
func (_m *MockIContract) UpdateLatestBlock(ctx context.Context, block uint64, hash []byte) error {
	ret := _m.Called(ctx, block, hash)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLatestBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte) error); ok {
		r0 = rf(ctx, block, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIContract_UpdateLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLatestBlock'
type MockIContract_UpdateLatestBlock_Call struct {
	*mock.Call
}

// UpdateLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - block uint64
//   - hash []byte
func (_e *MockIContract_Expecter) UpdateLatestBlock(ctx interface{}, block interface{}, hash interface{}) *MockIContract_UpdateLatestBlock_Call {
	return &MockIContract_UpdateLatestBlock_Call{Call: _e.mock.On("UpdateLatestBlock", ctx, block, hash)}
}

func (_c *MockIContract_UpdateLatestBlock_Call) Run(run func(ctx context.Context, block uint64, hash []byte)) *MockIContract_UpdateLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].([]byte))
	})
	return _c
}

func (_c *MockIContract_UpdateLatestBlock_Call) Return(_a0 error) *MockIContract_UpdateLatestBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIContract_UpdateLatestBlock_Call) RunAndReturn(run func(context.Context, uint64, []byte) error) *MockIContract_UpdateLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIContract creates a new instance of MockIContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIContract {
	mock := &MockIContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
