// Code generated by mockery v2.53.5. DO NOT EDIT.

package common

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	retryerrors "github.com/xmtp/xmtpd/pkg/utils/retryerrors"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockIReorgHandler is an autogenerated mock type for the IReorgHandler type
type MockIReorgHandler struct {
	mock.Mock
}

type MockIReorgHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIReorgHandler) EXPECT() *MockIReorgHandler_Expecter {
	return &MockIReorgHandler_Expecter{mock: &_m.Mock}
}

// HandleLog provides a mock function with given fields: ctx, event
func (_m *MockIReorgHandler) HandleLog(ctx context.Context, event types.Log) retryerrors.RetryableError {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for HandleLog")
	}

	var r0 retryerrors.RetryableError
	if rf, ok := ret.Get(0).(func(context.Context, types.Log) retryerrors.RetryableError); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(retryerrors.RetryableError)
		}
	}

	return r0
}

// MockIReorgHandler_HandleLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleLog'
type MockIReorgHandler_HandleLog_Call struct {
	*mock.Call
}

// HandleLog is a helper method to define mock.On call
//   - ctx context.Context
//   - event types.Log
func (_e *MockIReorgHandler_Expecter) HandleLog(ctx interface{}, event interface{}) *MockIReorgHandler_HandleLog_Call {
	return &MockIReorgHandler_HandleLog_Call{Call: _e.mock.On("HandleLog", ctx, event)}
}

func (_c *MockIReorgHandler_HandleLog_Call) Run(run func(ctx context.Context, event types.Log)) *MockIReorgHandler_HandleLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Log))
	})
	return _c
}

func (_c *MockIReorgHandler_HandleLog_Call) Return(_a0 retryerrors.RetryableError) *MockIReorgHandler_HandleLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIReorgHandler_HandleLog_Call) RunAndReturn(run func(context.Context, types.Log) retryerrors.RetryableError) *MockIReorgHandler_HandleLog_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIReorgHandler creates a new instance of MockIReorgHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIReorgHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIReorgHandler {
	mock := &MockIReorgHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
