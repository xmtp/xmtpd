// Code generated by mockery v2.53.5. DO NOT EDIT.

package contracts

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind/v2"

	mock "github.com/stretchr/testify/mock"

	payerreportmanager "github.com/xmtp/xmtpd/pkg/abi/payerreportmanager"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockPayerReportManagerContract is an autogenerated mock type for the PayerReportManagerContract type
type MockPayerReportManagerContract struct {
	mock.Mock
}

type MockPayerReportManagerContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPayerReportManagerContract) EXPECT() *MockPayerReportManagerContract_Expecter {
	return &MockPayerReportManagerContract_Expecter{mock: &_m.Mock}
}

// DOMAINSEPARATOR provides a mock function with given fields: opts
func (_m *MockPayerReportManagerContract) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for DOMAINSEPARATOR")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([32]byte, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) [32]byte); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayerReportManagerContract_DOMAINSEPARATOR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DOMAINSEPARATOR'
type MockPayerReportManagerContract_DOMAINSEPARATOR_Call struct {
	*mock.Call
}

// DOMAINSEPARATOR is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MockPayerReportManagerContract_Expecter) DOMAINSEPARATOR(opts interface{}) *MockPayerReportManagerContract_DOMAINSEPARATOR_Call {
	return &MockPayerReportManagerContract_DOMAINSEPARATOR_Call{Call: _e.mock.On("DOMAINSEPARATOR", opts)}
}

func (_c *MockPayerReportManagerContract_DOMAINSEPARATOR_Call) Run(run func(opts *bind.CallOpts)) *MockPayerReportManagerContract_DOMAINSEPARATOR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MockPayerReportManagerContract_DOMAINSEPARATOR_Call) Return(_a0 [32]byte, _a1 error) *MockPayerReportManagerContract_DOMAINSEPARATOR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayerReportManagerContract_DOMAINSEPARATOR_Call) RunAndReturn(run func(*bind.CallOpts) ([32]byte, error)) *MockPayerReportManagerContract_DOMAINSEPARATOR_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayerReport provides a mock function with given fields: opts, originatorNodeID, payerReportIndex
func (_m *MockPayerReportManagerContract) GetPayerReport(opts *bind.CallOpts, originatorNodeID uint32, payerReportIndex *big.Int) (payerreportmanager.IPayerReportManagerPayerReport, error) {
	ret := _m.Called(opts, originatorNodeID, payerReportIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetPayerReport")
	}

	var r0 payerreportmanager.IPayerReportManagerPayerReport
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint32, *big.Int) (payerreportmanager.IPayerReportManagerPayerReport, error)); ok {
		return rf(opts, originatorNodeID, payerReportIndex)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint32, *big.Int) payerreportmanager.IPayerReportManagerPayerReport); ok {
		r0 = rf(opts, originatorNodeID, payerReportIndex)
	} else {
		r0 = ret.Get(0).(payerreportmanager.IPayerReportManagerPayerReport)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, uint32, *big.Int) error); ok {
		r1 = rf(opts, originatorNodeID, payerReportIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayerReportManagerContract_GetPayerReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayerReport'
type MockPayerReportManagerContract_GetPayerReport_Call struct {
	*mock.Call
}

// GetPayerReport is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - originatorNodeID uint32
//   - payerReportIndex *big.Int
func (_e *MockPayerReportManagerContract_Expecter) GetPayerReport(opts interface{}, originatorNodeID interface{}, payerReportIndex interface{}) *MockPayerReportManagerContract_GetPayerReport_Call {
	return &MockPayerReportManagerContract_GetPayerReport_Call{Call: _e.mock.On("GetPayerReport", opts, originatorNodeID, payerReportIndex)}
}

func (_c *MockPayerReportManagerContract_GetPayerReport_Call) Run(run func(opts *bind.CallOpts, originatorNodeID uint32, payerReportIndex *big.Int)) *MockPayerReportManagerContract_GetPayerReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(uint32), args[2].(*big.Int))
	})
	return _c
}

func (_c *MockPayerReportManagerContract_GetPayerReport_Call) Return(_a0 payerreportmanager.IPayerReportManagerPayerReport, _a1 error) *MockPayerReportManagerContract_GetPayerReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayerReportManagerContract_GetPayerReport_Call) RunAndReturn(run func(*bind.CallOpts, uint32, *big.Int) (payerreportmanager.IPayerReportManagerPayerReport, error)) *MockPayerReportManagerContract_GetPayerReport_Call {
	_c.Call.Return(run)
	return _c
}

// ParsePayerReportSubmitted provides a mock function with given fields: log
func (_m *MockPayerReportManagerContract) ParsePayerReportSubmitted(log types.Log) (*payerreportmanager.PayerReportManagerPayerReportSubmitted, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParsePayerReportSubmitted")
	}

	var r0 *payerreportmanager.PayerReportManagerPayerReportSubmitted
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*payerreportmanager.PayerReportManagerPayerReportSubmitted, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *payerreportmanager.PayerReportManagerPayerReportSubmitted); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payerreportmanager.PayerReportManagerPayerReportSubmitted)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayerReportManagerContract_ParsePayerReportSubmitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParsePayerReportSubmitted'
type MockPayerReportManagerContract_ParsePayerReportSubmitted_Call struct {
	*mock.Call
}

// ParsePayerReportSubmitted is a helper method to define mock.On call
//   - log types.Log
func (_e *MockPayerReportManagerContract_Expecter) ParsePayerReportSubmitted(log interface{}) *MockPayerReportManagerContract_ParsePayerReportSubmitted_Call {
	return &MockPayerReportManagerContract_ParsePayerReportSubmitted_Call{Call: _e.mock.On("ParsePayerReportSubmitted", log)}
}

func (_c *MockPayerReportManagerContract_ParsePayerReportSubmitted_Call) Run(run func(log types.Log)) *MockPayerReportManagerContract_ParsePayerReportSubmitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *MockPayerReportManagerContract_ParsePayerReportSubmitted_Call) Return(_a0 *payerreportmanager.PayerReportManagerPayerReportSubmitted, _a1 error) *MockPayerReportManagerContract_ParsePayerReportSubmitted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayerReportManagerContract_ParsePayerReportSubmitted_Call) RunAndReturn(run func(types.Log) (*payerreportmanager.PayerReportManagerPayerReportSubmitted, error)) *MockPayerReportManagerContract_ParsePayerReportSubmitted_Call {
	_c.Call.Return(run)
	return _c
}

// ParsePayerReportSubsetSettled provides a mock function with given fields: log
func (_m *MockPayerReportManagerContract) ParsePayerReportSubsetSettled(log types.Log) (*payerreportmanager.PayerReportManagerPayerReportSubsetSettled, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParsePayerReportSubsetSettled")
	}

	var r0 *payerreportmanager.PayerReportManagerPayerReportSubsetSettled
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*payerreportmanager.PayerReportManagerPayerReportSubsetSettled, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *payerreportmanager.PayerReportManagerPayerReportSubsetSettled); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payerreportmanager.PayerReportManagerPayerReportSubsetSettled)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParsePayerReportSubsetSettled'
type MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call struct {
	*mock.Call
}

// ParsePayerReportSubsetSettled is a helper method to define mock.On call
//   - log types.Log
func (_e *MockPayerReportManagerContract_Expecter) ParsePayerReportSubsetSettled(log interface{}) *MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call {
	return &MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call{Call: _e.mock.On("ParsePayerReportSubsetSettled", log)}
}

func (_c *MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call) Run(run func(log types.Log)) *MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call) Return(_a0 *payerreportmanager.PayerReportManagerPayerReportSubsetSettled, _a1 error) *MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call) RunAndReturn(run func(types.Log) (*payerreportmanager.PayerReportManagerPayerReportSubsetSettled, error)) *MockPayerReportManagerContract_ParsePayerReportSubsetSettled_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPayerReportManagerContract creates a new instance of MockPayerReportManagerContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPayerReportManagerContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPayerReportManagerContract {
	mock := &MockPayerReportManagerContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
