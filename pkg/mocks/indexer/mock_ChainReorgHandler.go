// Code generated by mockery v2.52.2. DO NOT EDIT.

package indexer

import mock "github.com/stretchr/testify/mock"

// MockChainReorgHandler is an autogenerated mock type for the ChainReorgHandler type
type MockChainReorgHandler struct {
	mock.Mock
}

type MockChainReorgHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChainReorgHandler) EXPECT() *MockChainReorgHandler_Expecter {
	return &MockChainReorgHandler_Expecter{mock: &_m.Mock}
}

// FindReorgPoint provides a mock function with given fields: detectedAt
func (_m *MockChainReorgHandler) FindReorgPoint(detectedAt uint64) (uint64, []byte, error) {
	ret := _m.Called(detectedAt)

	if len(ret) == 0 {
		panic("no return value specified for FindReorgPoint")
	}

	var r0 uint64
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, []byte, error)); ok {
		return rf(detectedAt)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(detectedAt)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) []byte); ok {
		r1 = rf(detectedAt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(detectedAt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockChainReorgHandler_FindReorgPoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindReorgPoint'
type MockChainReorgHandler_FindReorgPoint_Call struct {
	*mock.Call
}

// FindReorgPoint is a helper method to define mock.On call
//   - detectedAt uint64
func (_e *MockChainReorgHandler_Expecter) FindReorgPoint(detectedAt interface{}) *MockChainReorgHandler_FindReorgPoint_Call {
	return &MockChainReorgHandler_FindReorgPoint_Call{Call: _e.mock.On("FindReorgPoint", detectedAt)}
}

func (_c *MockChainReorgHandler_FindReorgPoint_Call) Run(run func(detectedAt uint64)) *MockChainReorgHandler_FindReorgPoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockChainReorgHandler_FindReorgPoint_Call) Return(_a0 uint64, _a1 []byte, _a2 error) *MockChainReorgHandler_FindReorgPoint_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockChainReorgHandler_FindReorgPoint_Call) RunAndReturn(run func(uint64) (uint64, []byte, error)) *MockChainReorgHandler_FindReorgPoint_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChainReorgHandler creates a new instance of MockChainReorgHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChainReorgHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChainReorgHandler {
	mock := &MockChainReorgHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
