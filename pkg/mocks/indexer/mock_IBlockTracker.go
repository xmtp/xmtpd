// Code generated by mockery v2.44.1. DO NOT EDIT.

package indexer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIBlockTracker is an autogenerated mock type for the IBlockTracker type
type MockIBlockTracker struct {
	mock.Mock
}

type MockIBlockTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIBlockTracker) EXPECT() *MockIBlockTracker_Expecter {
	return &MockIBlockTracker_Expecter{mock: &_m.Mock}
}

// GetLatestBlockHash provides a mock function with given fields:
func (_m *MockIBlockTracker) GetLatestBlockHash() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHash")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockIBlockTracker_GetLatestBlockHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHash'
type MockIBlockTracker_GetLatestBlockHash_Call struct {
	*mock.Call
}

// GetLatestBlockHash is a helper method to define mock.On call
func (_e *MockIBlockTracker_Expecter) GetLatestBlockHash() *MockIBlockTracker_GetLatestBlockHash_Call {
	return &MockIBlockTracker_GetLatestBlockHash_Call{Call: _e.mock.On("GetLatestBlockHash")}
}

func (_c *MockIBlockTracker_GetLatestBlockHash_Call) Run(run func()) *MockIBlockTracker_GetLatestBlockHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIBlockTracker_GetLatestBlockHash_Call) Return(_a0 []byte) *MockIBlockTracker_GetLatestBlockHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIBlockTracker_GetLatestBlockHash_Call) RunAndReturn(run func() []byte) *MockIBlockTracker_GetLatestBlockHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockNumber provides a mock function with given fields:
func (_m *MockIBlockTracker) GetLatestBlockNumber() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockNumber")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockIBlockTracker_GetLatestBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockNumber'
type MockIBlockTracker_GetLatestBlockNumber_Call struct {
	*mock.Call
}

// GetLatestBlockNumber is a helper method to define mock.On call
func (_e *MockIBlockTracker_Expecter) GetLatestBlockNumber() *MockIBlockTracker_GetLatestBlockNumber_Call {
	return &MockIBlockTracker_GetLatestBlockNumber_Call{Call: _e.mock.On("GetLatestBlockNumber")}
}

func (_c *MockIBlockTracker_GetLatestBlockNumber_Call) Run(run func()) *MockIBlockTracker_GetLatestBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIBlockTracker_GetLatestBlockNumber_Call) Return(_a0 uint64) *MockIBlockTracker_GetLatestBlockNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIBlockTracker_GetLatestBlockNumber_Call) RunAndReturn(run func() uint64) *MockIBlockTracker_GetLatestBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLatestBlock provides a mock function with given fields: ctx, block, hash
func (_m *MockIBlockTracker) UpdateLatestBlock(ctx context.Context, block uint64, hash []byte) error {
	ret := _m.Called(ctx, block, hash)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLatestBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte) error); ok {
		r0 = rf(ctx, block, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIBlockTracker_UpdateLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLatestBlock'
type MockIBlockTracker_UpdateLatestBlock_Call struct {
	*mock.Call
}

// UpdateLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - block uint64
//   - hash []byte
func (_e *MockIBlockTracker_Expecter) UpdateLatestBlock(ctx interface{}, block interface{}, hash interface{}) *MockIBlockTracker_UpdateLatestBlock_Call {
	return &MockIBlockTracker_UpdateLatestBlock_Call{Call: _e.mock.On("UpdateLatestBlock", ctx, block, hash)}
}

func (_c *MockIBlockTracker_UpdateLatestBlock_Call) Run(run func(ctx context.Context, block uint64, hash []byte)) *MockIBlockTracker_UpdateLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].([]byte))
	})
	return _c
}

func (_c *MockIBlockTracker_UpdateLatestBlock_Call) Return(_a0 error) *MockIBlockTracker_UpdateLatestBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIBlockTracker_UpdateLatestBlock_Call) RunAndReturn(run func(context.Context, uint64, []byte) error) *MockIBlockTracker_UpdateLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIBlockTracker creates a new instance of MockIBlockTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIBlockTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIBlockTracker {
	mock := &MockIBlockTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
