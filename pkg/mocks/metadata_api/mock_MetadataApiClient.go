// Code generated by mockery v2.51.1. DO NOT EDIT.

package metadata_api

import (
	context "context"

	grpc "google.golang.org/grpc"

	metadata_api "github.com/xmtp/xmtpd/pkg/proto/xmtpv4/metadata_api"

	mock "github.com/stretchr/testify/mock"
)

// MockMetadataApiClient is an autogenerated mock type for the MetadataApiClient type
type MockMetadataApiClient struct {
	mock.Mock
}

type MockMetadataApiClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetadataApiClient) EXPECT() *MockMetadataApiClient_Expecter {
	return &MockMetadataApiClient_Expecter{mock: &_m.Mock}
}

// GetSyncCursor provides a mock function with given fields: ctx, in, opts
func (_m *MockMetadataApiClient) GetSyncCursor(ctx context.Context, in *metadata_api.GetSyncCursorRequest, opts ...grpc.CallOption) (*metadata_api.GetSyncCursorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncCursor")
	}

	var r0 *metadata_api.GetSyncCursorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metadata_api.GetSyncCursorRequest, ...grpc.CallOption) (*metadata_api.GetSyncCursorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metadata_api.GetSyncCursorRequest, ...grpc.CallOption) *metadata_api.GetSyncCursorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata_api.GetSyncCursorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metadata_api.GetSyncCursorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetadataApiClient_GetSyncCursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncCursor'
type MockMetadataApiClient_GetSyncCursor_Call struct {
	*mock.Call
}

// GetSyncCursor is a helper method to define mock.On call
//   - ctx context.Context
//   - in *metadata_api.GetSyncCursorRequest
//   - opts ...grpc.CallOption
func (_e *MockMetadataApiClient_Expecter) GetSyncCursor(ctx interface{}, in interface{}, opts ...interface{}) *MockMetadataApiClient_GetSyncCursor_Call {
	return &MockMetadataApiClient_GetSyncCursor_Call{Call: _e.mock.On("GetSyncCursor",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetadataApiClient_GetSyncCursor_Call) Run(run func(ctx context.Context, in *metadata_api.GetSyncCursorRequest, opts ...grpc.CallOption)) *MockMetadataApiClient_GetSyncCursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*metadata_api.GetSyncCursorRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockMetadataApiClient_GetSyncCursor_Call) Return(_a0 *metadata_api.GetSyncCursorResponse, _a1 error) *MockMetadataApiClient_GetSyncCursor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetadataApiClient_GetSyncCursor_Call) RunAndReturn(run func(context.Context, *metadata_api.GetSyncCursorRequest, ...grpc.CallOption) (*metadata_api.GetSyncCursorResponse, error)) *MockMetadataApiClient_GetSyncCursor_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeSyncCursor provides a mock function with given fields: ctx, in, opts
func (_m *MockMetadataApiClient) SubscribeSyncCursor(ctx context.Context, in *metadata_api.GetSyncCursorRequest, opts ...grpc.CallOption) (metadata_api.MetadataApi_SubscribeSyncCursorClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeSyncCursor")
	}

	var r0 metadata_api.MetadataApi_SubscribeSyncCursorClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metadata_api.GetSyncCursorRequest, ...grpc.CallOption) (metadata_api.MetadataApi_SubscribeSyncCursorClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metadata_api.GetSyncCursorRequest, ...grpc.CallOption) metadata_api.MetadataApi_SubscribeSyncCursorClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata_api.MetadataApi_SubscribeSyncCursorClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metadata_api.GetSyncCursorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetadataApiClient_SubscribeSyncCursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeSyncCursor'
type MockMetadataApiClient_SubscribeSyncCursor_Call struct {
	*mock.Call
}

// SubscribeSyncCursor is a helper method to define mock.On call
//   - ctx context.Context
//   - in *metadata_api.GetSyncCursorRequest
//   - opts ...grpc.CallOption
func (_e *MockMetadataApiClient_Expecter) SubscribeSyncCursor(ctx interface{}, in interface{}, opts ...interface{}) *MockMetadataApiClient_SubscribeSyncCursor_Call {
	return &MockMetadataApiClient_SubscribeSyncCursor_Call{Call: _e.mock.On("SubscribeSyncCursor",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetadataApiClient_SubscribeSyncCursor_Call) Run(run func(ctx context.Context, in *metadata_api.GetSyncCursorRequest, opts ...grpc.CallOption)) *MockMetadataApiClient_SubscribeSyncCursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*metadata_api.GetSyncCursorRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockMetadataApiClient_SubscribeSyncCursor_Call) Return(_a0 metadata_api.MetadataApi_SubscribeSyncCursorClient, _a1 error) *MockMetadataApiClient_SubscribeSyncCursor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetadataApiClient_SubscribeSyncCursor_Call) RunAndReturn(run func(context.Context, *metadata_api.GetSyncCursorRequest, ...grpc.CallOption) (metadata_api.MetadataApi_SubscribeSyncCursorClient, error)) *MockMetadataApiClient_SubscribeSyncCursor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetadataApiClient creates a new instance of MockMetadataApiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetadataApiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetadataApiClient {
	mock := &MockMetadataApiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
