// Code generated by mockery v2.52.2. DO NOT EDIT.

package payerreport

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	payerreport "github.com/xmtp/xmtpd/pkg/payerreport"
)

// MockIPayerReportVerifier is an autogenerated mock type for the IPayerReportVerifier type
type MockIPayerReportVerifier struct {
	mock.Mock
}

type MockIPayerReportVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPayerReportVerifier) EXPECT() *MockIPayerReportVerifier_Expecter {
	return &MockIPayerReportVerifier_Expecter{mock: &_m.Mock}
}

// IsValidReport provides a mock function with given fields: ctx, prevReport, newReport
func (_m *MockIPayerReportVerifier) IsValidReport(ctx context.Context, prevReport *payerreport.PayerReport, newReport *payerreport.PayerReport) (bool, error) {
	ret := _m.Called(ctx, prevReport, newReport)

	if len(ret) == 0 {
		panic("no return value specified for IsValidReport")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *payerreport.PayerReport, *payerreport.PayerReport) (bool, error)); ok {
		return rf(ctx, prevReport, newReport)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *payerreport.PayerReport, *payerreport.PayerReport) bool); ok {
		r0 = rf(ctx, prevReport, newReport)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *payerreport.PayerReport, *payerreport.PayerReport) error); ok {
		r1 = rf(ctx, prevReport, newReport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPayerReportVerifier_IsValidReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidReport'
type MockIPayerReportVerifier_IsValidReport_Call struct {
	*mock.Call
}

// IsValidReport is a helper method to define mock.On call
//   - ctx context.Context
//   - prevReport *payerreport.PayerReport
//   - newReport *payerreport.PayerReport
func (_e *MockIPayerReportVerifier_Expecter) IsValidReport(ctx interface{}, prevReport interface{}, newReport interface{}) *MockIPayerReportVerifier_IsValidReport_Call {
	return &MockIPayerReportVerifier_IsValidReport_Call{Call: _e.mock.On("IsValidReport", ctx, prevReport, newReport)}
}

func (_c *MockIPayerReportVerifier_IsValidReport_Call) Run(run func(ctx context.Context, prevReport *payerreport.PayerReport, newReport *payerreport.PayerReport)) *MockIPayerReportVerifier_IsValidReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*payerreport.PayerReport), args[2].(*payerreport.PayerReport))
	})
	return _c
}

func (_c *MockIPayerReportVerifier_IsValidReport_Call) Return(_a0 bool, _a1 error) *MockIPayerReportVerifier_IsValidReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPayerReportVerifier_IsValidReport_Call) RunAndReturn(run func(context.Context, *payerreport.PayerReport, *payerreport.PayerReport) (bool, error)) *MockIPayerReportVerifier_IsValidReport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIPayerReportVerifier creates a new instance of MockIPayerReportVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPayerReportVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPayerReportVerifier {
	mock := &MockIPayerReportVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
