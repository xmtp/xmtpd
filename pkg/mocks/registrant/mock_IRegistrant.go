// Code generated by mockery v2.52.2. DO NOT EDIT.

package registrant

import (
	authn "github.com/xmtp/xmtpd/pkg/authn"
	currency "github.com/xmtp/xmtpd/pkg/currency"

	envelopes "github.com/xmtp/xmtpd/pkg/proto/xmtpv4/envelopes"

	mock "github.com/stretchr/testify/mock"

	queries "github.com/xmtp/xmtpd/pkg/db/queries"
)

// MockIRegistrant is an autogenerated mock type for the IRegistrant type
type MockIRegistrant struct {
	mock.Mock
}

type MockIRegistrant_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRegistrant) EXPECT() *MockIRegistrant_Expecter {
	return &MockIRegistrant_Expecter{mock: &_m.Mock}
}

// NodeID provides a mock function with no fields
func (_m *MockIRegistrant) NodeID() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeID")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// MockIRegistrant_NodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeID'
type MockIRegistrant_NodeID_Call struct {
	*mock.Call
}

// NodeID is a helper method to define mock.On call
func (_e *MockIRegistrant_Expecter) NodeID() *MockIRegistrant_NodeID_Call {
	return &MockIRegistrant_NodeID_Call{Call: _e.mock.On("NodeID")}
}

func (_c *MockIRegistrant_NodeID_Call) Run(run func()) *MockIRegistrant_NodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRegistrant_NodeID_Call) Return(_a0 uint32) *MockIRegistrant_NodeID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRegistrant_NodeID_Call) RunAndReturn(run func() uint32) *MockIRegistrant_NodeID_Call {
	_c.Call.Return(run)
	return _c
}

// SignStagedEnvelope provides a mock function with given fields: stagedEnv, baseFee, congestionFee
func (_m *MockIRegistrant) SignStagedEnvelope(stagedEnv queries.StagedOriginatorEnvelope, baseFee currency.PicoDollar, congestionFee currency.PicoDollar) (*envelopes.OriginatorEnvelope, error) {
	ret := _m.Called(stagedEnv, baseFee, congestionFee)

	if len(ret) == 0 {
		panic("no return value specified for SignStagedEnvelope")
	}

	var r0 *envelopes.OriginatorEnvelope
	var r1 error
	if rf, ok := ret.Get(0).(func(queries.StagedOriginatorEnvelope, currency.PicoDollar, currency.PicoDollar) (*envelopes.OriginatorEnvelope, error)); ok {
		return rf(stagedEnv, baseFee, congestionFee)
	}
	if rf, ok := ret.Get(0).(func(queries.StagedOriginatorEnvelope, currency.PicoDollar, currency.PicoDollar) *envelopes.OriginatorEnvelope); ok {
		r0 = rf(stagedEnv, baseFee, congestionFee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*envelopes.OriginatorEnvelope)
		}
	}

	if rf, ok := ret.Get(1).(func(queries.StagedOriginatorEnvelope, currency.PicoDollar, currency.PicoDollar) error); ok {
		r1 = rf(stagedEnv, baseFee, congestionFee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRegistrant_SignStagedEnvelope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignStagedEnvelope'
type MockIRegistrant_SignStagedEnvelope_Call struct {
	*mock.Call
}

// SignStagedEnvelope is a helper method to define mock.On call
//   - stagedEnv queries.StagedOriginatorEnvelope
//   - baseFee currency.PicoDollar
//   - congestionFee currency.PicoDollar
func (_e *MockIRegistrant_Expecter) SignStagedEnvelope(stagedEnv interface{}, baseFee interface{}, congestionFee interface{}) *MockIRegistrant_SignStagedEnvelope_Call {
	return &MockIRegistrant_SignStagedEnvelope_Call{Call: _e.mock.On("SignStagedEnvelope", stagedEnv, baseFee, congestionFee)}
}

func (_c *MockIRegistrant_SignStagedEnvelope_Call) Run(run func(stagedEnv queries.StagedOriginatorEnvelope, baseFee currency.PicoDollar, congestionFee currency.PicoDollar)) *MockIRegistrant_SignStagedEnvelope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(queries.StagedOriginatorEnvelope), args[1].(currency.PicoDollar), args[2].(currency.PicoDollar))
	})
	return _c
}

func (_c *MockIRegistrant_SignStagedEnvelope_Call) Return(_a0 *envelopes.OriginatorEnvelope, _a1 error) *MockIRegistrant_SignStagedEnvelope_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRegistrant_SignStagedEnvelope_Call) RunAndReturn(run func(queries.StagedOriginatorEnvelope, currency.PicoDollar, currency.PicoDollar) (*envelopes.OriginatorEnvelope, error)) *MockIRegistrant_SignStagedEnvelope_Call {
	_c.Call.Return(run)
	return _c
}

// TokenFactory provides a mock function with no fields
func (_m *MockIRegistrant) TokenFactory() authn.TokenFactory {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TokenFactory")
	}

	var r0 authn.TokenFactory
	if rf, ok := ret.Get(0).(func() authn.TokenFactory); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(authn.TokenFactory)
	}

	return r0
}

// MockIRegistrant_TokenFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenFactory'
type MockIRegistrant_TokenFactory_Call struct {
	*mock.Call
}

// TokenFactory is a helper method to define mock.On call
func (_e *MockIRegistrant_Expecter) TokenFactory() *MockIRegistrant_TokenFactory_Call {
	return &MockIRegistrant_TokenFactory_Call{Call: _e.mock.On("TokenFactory")}
}

func (_c *MockIRegistrant_TokenFactory_Call) Run(run func()) *MockIRegistrant_TokenFactory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRegistrant_TokenFactory_Call) Return(_a0 authn.TokenFactory) *MockIRegistrant_TokenFactory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRegistrant_TokenFactory_Call) RunAndReturn(run func() authn.TokenFactory) *MockIRegistrant_TokenFactory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRegistrant creates a new instance of MockIRegistrant. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRegistrant(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRegistrant {
	mock := &MockIRegistrant{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
