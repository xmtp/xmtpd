// Code generated by mockery v2.52.2. DO NOT EDIT.

package registry

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	mock "github.com/stretchr/testify/mock"

	noderegistry "github.com/xmtp/xmtpd/pkg/abi/noderegistry"
)

// MockNodeRegistryContract is an autogenerated mock type for the NodeRegistryContract type
type MockNodeRegistryContract struct {
	mock.Mock
}

type MockNodeRegistryContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeRegistryContract) EXPECT() *MockNodeRegistryContract_Expecter {
	return &MockNodeRegistryContract_Expecter{mock: &_m.Mock}
}

// GetAllNodes provides a mock function with given fields: opts
func (_m *MockNodeRegistryContract) GetAllNodes(opts *bind.CallOpts) ([]noderegistry.INodeRegistryNodeWithId, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNodes")
	}

	var r0 []noderegistry.INodeRegistryNodeWithId
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]noderegistry.INodeRegistryNodeWithId, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []noderegistry.INodeRegistryNodeWithId); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]noderegistry.INodeRegistryNodeWithId)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodeRegistryContract_GetAllNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNodes'
type MockNodeRegistryContract_GetAllNodes_Call struct {
	*mock.Call
}

// GetAllNodes is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MockNodeRegistryContract_Expecter) GetAllNodes(opts interface{}) *MockNodeRegistryContract_GetAllNodes_Call {
	return &MockNodeRegistryContract_GetAllNodes_Call{Call: _e.mock.On("GetAllNodes", opts)}
}

func (_c *MockNodeRegistryContract_GetAllNodes_Call) Run(run func(opts *bind.CallOpts)) *MockNodeRegistryContract_GetAllNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MockNodeRegistryContract_GetAllNodes_Call) Return(_a0 []noderegistry.INodeRegistryNodeWithId, _a1 error) *MockNodeRegistryContract_GetAllNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNodeRegistryContract_GetAllNodes_Call) RunAndReturn(run func(*bind.CallOpts) ([]noderegistry.INodeRegistryNodeWithId, error)) *MockNodeRegistryContract_GetAllNodes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodeRegistryContract creates a new instance of MockNodeRegistryContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeRegistryContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeRegistryContract {
	mock := &MockNodeRegistryContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
