// Code generated by mockery v2.52.2. DO NOT EDIT.

package retryable_errors

import mock "github.com/stretchr/testify/mock"

// MockRetryableError is an autogenerated mock type for the RetryableError type
type MockRetryableError struct {
	mock.Mock
}

type MockRetryableError_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRetryableError) EXPECT() *MockRetryableError_Expecter {
	return &MockRetryableError_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with no fields
func (_m *MockRetryableError) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRetryableError_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockRetryableError_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockRetryableError_Expecter) Error() *MockRetryableError_Error_Call {
	return &MockRetryableError_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockRetryableError_Error_Call) Run(run func()) *MockRetryableError_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRetryableError_Error_Call) Return(_a0 string) *MockRetryableError_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRetryableError_Error_Call) RunAndReturn(run func() string) *MockRetryableError_Error_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldRetry provides a mock function with no fields
func (_m *MockRetryableError) ShouldRetry() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShouldRetry")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRetryableError_ShouldRetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldRetry'
type MockRetryableError_ShouldRetry_Call struct {
	*mock.Call
}

// ShouldRetry is a helper method to define mock.On call
func (_e *MockRetryableError_Expecter) ShouldRetry() *MockRetryableError_ShouldRetry_Call {
	return &MockRetryableError_ShouldRetry_Call{Call: _e.mock.On("ShouldRetry")}
}

func (_c *MockRetryableError_ShouldRetry_Call) Run(run func()) *MockRetryableError_ShouldRetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRetryableError_ShouldRetry_Call) Return(_a0 bool) *MockRetryableError_ShouldRetry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRetryableError_ShouldRetry_Call) RunAndReturn(run func() bool) *MockRetryableError_ShouldRetry_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRetryableError creates a new instance of MockRetryableError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRetryableError(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRetryableError {
	mock := &MockRetryableError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
