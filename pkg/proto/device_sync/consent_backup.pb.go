// Definitions for backups

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: device_sync/consent_backup.proto

package device_sync

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Consent record type
type ConsentTypeSave int32

const (
	ConsentTypeSave_CONSENT_TYPE_SAVE_UNSPECIFIED     ConsentTypeSave = 0
	ConsentTypeSave_CONSENT_TYPE_SAVE_CONVERSATION_ID ConsentTypeSave = 1
	ConsentTypeSave_CONSENT_TYPE_SAVE_INBOX_ID        ConsentTypeSave = 2
	ConsentTypeSave_CONSENT_TYPE_SAVE_ADDRESS         ConsentTypeSave = 3
)

// Enum value maps for ConsentTypeSave.
var (
	ConsentTypeSave_name = map[int32]string{
		0: "CONSENT_TYPE_SAVE_UNSPECIFIED",
		1: "CONSENT_TYPE_SAVE_CONVERSATION_ID",
		2: "CONSENT_TYPE_SAVE_INBOX_ID",
		3: "CONSENT_TYPE_SAVE_ADDRESS",
	}
	ConsentTypeSave_value = map[string]int32{
		"CONSENT_TYPE_SAVE_UNSPECIFIED":     0,
		"CONSENT_TYPE_SAVE_CONVERSATION_ID": 1,
		"CONSENT_TYPE_SAVE_INBOX_ID":        2,
		"CONSENT_TYPE_SAVE_ADDRESS":         3,
	}
)

func (x ConsentTypeSave) Enum() *ConsentTypeSave {
	p := new(ConsentTypeSave)
	*p = x
	return p
}

func (x ConsentTypeSave) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentTypeSave) Descriptor() protoreflect.EnumDescriptor {
	return file_device_sync_consent_backup_proto_enumTypes[0].Descriptor()
}

func (ConsentTypeSave) Type() protoreflect.EnumType {
	return &file_device_sync_consent_backup_proto_enumTypes[0]
}

func (x ConsentTypeSave) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentTypeSave.Descriptor instead.
func (ConsentTypeSave) EnumDescriptor() ([]byte, []int) {
	return file_device_sync_consent_backup_proto_rawDescGZIP(), []int{0}
}

// Consent record state
type ConsentStateSave int32

const (
	ConsentStateSave_CONSENT_STATE_SAVE_UNSPECIFIED ConsentStateSave = 0
	ConsentStateSave_CONSENT_STATE_SAVE_UNKNOWN     ConsentStateSave = 1
	ConsentStateSave_CONSENT_STATE_SAVE_ALLOWED     ConsentStateSave = 2
	ConsentStateSave_CONSENT_STATE_SAVE_DENIED      ConsentStateSave = 3
)

// Enum value maps for ConsentStateSave.
var (
	ConsentStateSave_name = map[int32]string{
		0: "CONSENT_STATE_SAVE_UNSPECIFIED",
		1: "CONSENT_STATE_SAVE_UNKNOWN",
		2: "CONSENT_STATE_SAVE_ALLOWED",
		3: "CONSENT_STATE_SAVE_DENIED",
	}
	ConsentStateSave_value = map[string]int32{
		"CONSENT_STATE_SAVE_UNSPECIFIED": 0,
		"CONSENT_STATE_SAVE_UNKNOWN":     1,
		"CONSENT_STATE_SAVE_ALLOWED":     2,
		"CONSENT_STATE_SAVE_DENIED":      3,
	}
)

func (x ConsentStateSave) Enum() *ConsentStateSave {
	p := new(ConsentStateSave)
	*p = x
	return p
}

func (x ConsentStateSave) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentStateSave) Descriptor() protoreflect.EnumDescriptor {
	return file_device_sync_consent_backup_proto_enumTypes[1].Descriptor()
}

func (ConsentStateSave) Type() protoreflect.EnumType {
	return &file_device_sync_consent_backup_proto_enumTypes[1]
}

func (x ConsentStateSave) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentStateSave.Descriptor instead.
func (ConsentStateSave) EnumDescriptor() ([]byte, []int) {
	return file_device_sync_consent_backup_proto_rawDescGZIP(), []int{1}
}

// Proto representation of a consent record save
type ConsentSave struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityType    ConsentTypeSave        `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=xmtp.device_sync.consent_backup.ConsentTypeSave" json:"entity_type,omitempty"`
	State         ConsentStateSave       `protobuf:"varint,2,opt,name=state,proto3,enum=xmtp.device_sync.consent_backup.ConsentStateSave" json:"state,omitempty"`
	Entity        string                 `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsentSave) Reset() {
	*x = ConsentSave{}
	mi := &file_device_sync_consent_backup_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsentSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentSave) ProtoMessage() {}

func (x *ConsentSave) ProtoReflect() protoreflect.Message {
	mi := &file_device_sync_consent_backup_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentSave.ProtoReflect.Descriptor instead.
func (*ConsentSave) Descriptor() ([]byte, []int) {
	return file_device_sync_consent_backup_proto_rawDescGZIP(), []int{0}
}

func (x *ConsentSave) GetEntityType() ConsentTypeSave {
	if x != nil {
		return x.EntityType
	}
	return ConsentTypeSave_CONSENT_TYPE_SAVE_UNSPECIFIED
}

func (x *ConsentSave) GetState() ConsentStateSave {
	if x != nil {
		return x.State
	}
	return ConsentStateSave_CONSENT_STATE_SAVE_UNSPECIFIED
}

func (x *ConsentSave) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

var File_device_sync_consent_backup_proto protoreflect.FileDescriptor

var file_device_sync_consent_backup_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1f, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x61, 0x76, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2a, 0x9a, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x61, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x41, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58,
	0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x2a, 0x95, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x41, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x41, 0x56, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x41, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x03, 0x42, 0xfc, 0x01, 0x0a,
	0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x42, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x6d, 0x74, 0x70, 0x2f, 0x78, 0x6d, 0x74, 0x70,
	0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0xa2, 0x02, 0x03, 0x58, 0x44, 0x43, 0xaa, 0x02, 0x1d,
	0x58, 0x6d, 0x74, 0x70, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0xca, 0x02, 0x1d,
	0x58, 0x6d, 0x74, 0x70, 0x5c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x5c,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0xe2, 0x02, 0x29,
	0x58, 0x6d, 0x74, 0x70, 0x5c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x5c,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x58, 0x6d, 0x74, 0x70,
	0x3a, 0x3a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x3a, 0x3a, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_device_sync_consent_backup_proto_rawDescOnce sync.Once
	file_device_sync_consent_backup_proto_rawDescData []byte
)

func file_device_sync_consent_backup_proto_rawDescGZIP() []byte {
	file_device_sync_consent_backup_proto_rawDescOnce.Do(func() {
		file_device_sync_consent_backup_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_device_sync_consent_backup_proto_rawDesc), len(file_device_sync_consent_backup_proto_rawDesc)))
	})
	return file_device_sync_consent_backup_proto_rawDescData
}

var file_device_sync_consent_backup_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_device_sync_consent_backup_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_device_sync_consent_backup_proto_goTypes = []any{
	(ConsentTypeSave)(0),  // 0: xmtp.device_sync.consent_backup.ConsentTypeSave
	(ConsentStateSave)(0), // 1: xmtp.device_sync.consent_backup.ConsentStateSave
	(*ConsentSave)(nil),   // 2: xmtp.device_sync.consent_backup.ConsentSave
}
var file_device_sync_consent_backup_proto_depIdxs = []int32{
	0, // 0: xmtp.device_sync.consent_backup.ConsentSave.entity_type:type_name -> xmtp.device_sync.consent_backup.ConsentTypeSave
	1, // 1: xmtp.device_sync.consent_backup.ConsentSave.state:type_name -> xmtp.device_sync.consent_backup.ConsentStateSave
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_device_sync_consent_backup_proto_init() }
func file_device_sync_consent_backup_proto_init() {
	if File_device_sync_consent_backup_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_device_sync_consent_backup_proto_rawDesc), len(file_device_sync_consent_backup_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_device_sync_consent_backup_proto_goTypes,
		DependencyIndexes: file_device_sync_consent_backup_proto_depIdxs,
		EnumInfos:         file_device_sync_consent_backup_proto_enumTypes,
		MessageInfos:      file_device_sync_consent_backup_proto_msgTypes,
	}.Build()
	File_device_sync_consent_backup_proto = out.File
	file_device_sync_consent_backup_proto_goTypes = nil
	file_device_sync_consent_backup_proto_depIdxs = nil
}
