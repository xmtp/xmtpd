// Sync group messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: device_sync/content.proto

package device_sync

import (
	message_contents "github.com/xmtp/xmtpd/pkg/proto/mls/message_contents"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All potential device sync group messages
type DeviceSyncContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*DeviceSyncContent_Request
	//	*DeviceSyncContent_Acknowledge
	//	*DeviceSyncContent_Reply
	//	*DeviceSyncContent_PreferenceUpdates
	Content       isDeviceSyncContent_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceSyncContent) Reset() {
	*x = DeviceSyncContent{}
	mi := &file_device_sync_content_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSyncContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSyncContent) ProtoMessage() {}

func (x *DeviceSyncContent) ProtoReflect() protoreflect.Message {
	mi := &file_device_sync_content_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSyncContent.ProtoReflect.Descriptor instead.
func (*DeviceSyncContent) Descriptor() ([]byte, []int) {
	return file_device_sync_content_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceSyncContent) GetContent() isDeviceSyncContent_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *DeviceSyncContent) GetRequest() *message_contents.DeviceSyncRequest {
	if x != nil {
		if x, ok := x.Content.(*DeviceSyncContent_Request); ok {
			return x.Request
		}
	}
	return nil
}

func (x *DeviceSyncContent) GetAcknowledge() *DeviceSyncAcknowledge {
	if x != nil {
		if x, ok := x.Content.(*DeviceSyncContent_Acknowledge); ok {
			return x.Acknowledge
		}
	}
	return nil
}

func (x *DeviceSyncContent) GetReply() *message_contents.DeviceSyncReply {
	if x != nil {
		if x, ok := x.Content.(*DeviceSyncContent_Reply); ok {
			return x.Reply
		}
	}
	return nil
}

func (x *DeviceSyncContent) GetPreferenceUpdates() *PreferenceUpdates {
	if x != nil {
		if x, ok := x.Content.(*DeviceSyncContent_PreferenceUpdates); ok {
			return x.PreferenceUpdates
		}
	}
	return nil
}

type isDeviceSyncContent_Content interface {
	isDeviceSyncContent_Content()
}

type DeviceSyncContent_Request struct {
	Request *message_contents.DeviceSyncRequest `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

type DeviceSyncContent_Acknowledge struct {
	Acknowledge *DeviceSyncAcknowledge `protobuf:"bytes,2,opt,name=acknowledge,proto3,oneof"`
}

type DeviceSyncContent_Reply struct {
	Reply *message_contents.DeviceSyncReply `protobuf:"bytes,3,opt,name=reply,proto3,oneof"`
}

type DeviceSyncContent_PreferenceUpdates struct {
	PreferenceUpdates *PreferenceUpdates `protobuf:"bytes,4,opt,name=preference_updates,json=preferenceUpdates,proto3,oneof"`
}

func (*DeviceSyncContent_Request) isDeviceSyncContent_Content() {}

func (*DeviceSyncContent_Acknowledge) isDeviceSyncContent_Content() {}

func (*DeviceSyncContent_Reply) isDeviceSyncContent_Content() {}

func (*DeviceSyncContent_PreferenceUpdates) isDeviceSyncContent_Content() {}

// Acknowledges a request
type DeviceSyncAcknowledge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceSyncAcknowledge) Reset() {
	*x = DeviceSyncAcknowledge{}
	mi := &file_device_sync_content_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSyncAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSyncAcknowledge) ProtoMessage() {}

func (x *DeviceSyncAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_device_sync_content_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSyncAcknowledge.ProtoReflect.Descriptor instead.
func (*DeviceSyncAcknowledge) Descriptor() ([]byte, []int) {
	return file_device_sync_content_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceSyncAcknowledge) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Preference updates
type PreferenceUpdates struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Updates       []*UserPreferenceUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreferenceUpdates) Reset() {
	*x = PreferenceUpdates{}
	mi := &file_device_sync_content_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreferenceUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferenceUpdates) ProtoMessage() {}

func (x *PreferenceUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_device_sync_content_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferenceUpdates.ProtoReflect.Descriptor instead.
func (*PreferenceUpdates) Descriptor() ([]byte, []int) {
	return file_device_sync_content_proto_rawDescGZIP(), []int{2}
}

func (x *PreferenceUpdates) GetUpdates() []*UserPreferenceUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Preference update
type UserPreferenceUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Update:
	//
	//	*UserPreferenceUpdate_Consent
	//	*UserPreferenceUpdate_Hmac
	Update        isUserPreferenceUpdate_Update `protobuf_oneof:"update"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPreferenceUpdate) Reset() {
	*x = UserPreferenceUpdate{}
	mi := &file_device_sync_content_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPreferenceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPreferenceUpdate) ProtoMessage() {}

func (x *UserPreferenceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_device_sync_content_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPreferenceUpdate.ProtoReflect.Descriptor instead.
func (*UserPreferenceUpdate) Descriptor() ([]byte, []int) {
	return file_device_sync_content_proto_rawDescGZIP(), []int{3}
}

func (x *UserPreferenceUpdate) GetUpdate() isUserPreferenceUpdate_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UserPreferenceUpdate) GetConsent() *ConsentSave {
	if x != nil {
		if x, ok := x.Update.(*UserPreferenceUpdate_Consent); ok {
			return x.Consent
		}
	}
	return nil
}

func (x *UserPreferenceUpdate) GetHmac() *HmacKeyUpdate {
	if x != nil {
		if x, ok := x.Update.(*UserPreferenceUpdate_Hmac); ok {
			return x.Hmac
		}
	}
	return nil
}

type isUserPreferenceUpdate_Update interface {
	isUserPreferenceUpdate_Update()
}

type UserPreferenceUpdate_Consent struct {
	Consent *ConsentSave `protobuf:"bytes,1,opt,name=consent,proto3,oneof"`
}

type UserPreferenceUpdate_Hmac struct {
	Hmac *HmacKeyUpdate `protobuf:"bytes,2,opt,name=hmac,proto3,oneof"`
}

func (*UserPreferenceUpdate_Consent) isUserPreferenceUpdate_Update() {}

func (*UserPreferenceUpdate_Hmac) isUserPreferenceUpdate_Update() {}

// Hmac key update
type HmacKeyUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CycledAtNs    int64                  `protobuf:"varint,2,opt,name=cycled_at_ns,json=cycledAtNs,proto3" json:"cycled_at_ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HmacKeyUpdate) Reset() {
	*x = HmacKeyUpdate{}
	mi := &file_device_sync_content_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HmacKeyUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacKeyUpdate) ProtoMessage() {}

func (x *HmacKeyUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_device_sync_content_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacKeyUpdate.ProtoReflect.Descriptor instead.
func (*HmacKeyUpdate) Descriptor() ([]byte, []int) {
	return file_device_sync_content_proto_rawDescGZIP(), []int{4}
}

func (x *HmacKeyUpdate) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *HmacKeyUpdate) GetCycledAtNs() int64 {
	if x != nil {
		return x.CycledAtNs
	}
	return 0
}

var File_device_sync_content_proto protoreflect.FileDescriptor

const file_device_sync_content_proto_rawDesc = "" +
	"\n" +
	"\x19device_sync/content.proto\x12\x18xmtp.device_sync.content\x1a device_sync/consent_backup.proto\x1a\"mls/message_contents/content.proto\"\xdf\x02\n" +
	"\x11DeviceSyncContent\x12H\n" +
	"\arequest\x18\x01 \x01(\v2,.xmtp.mls.message_contents.DeviceSyncRequestH\x00R\arequest\x12S\n" +
	"\vacknowledge\x18\x02 \x01(\v2/.xmtp.device_sync.content.DeviceSyncAcknowledgeH\x00R\vacknowledge\x12B\n" +
	"\x05reply\x18\x03 \x01(\v2*.xmtp.mls.message_contents.DeviceSyncReplyH\x00R\x05reply\x12\\\n" +
	"\x12preference_updates\x18\x04 \x01(\v2+.xmtp.device_sync.content.PreferenceUpdatesH\x00R\x11preferenceUpdatesB\t\n" +
	"\acontent\"6\n" +
	"\x15DeviceSyncAcknowledge\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\"]\n" +
	"\x11PreferenceUpdates\x12H\n" +
	"\aupdates\x18\x01 \x03(\v2..xmtp.device_sync.content.UserPreferenceUpdateR\aupdates\"\xa9\x01\n" +
	"\x14UserPreferenceUpdate\x12H\n" +
	"\aconsent\x18\x01 \x01(\v2,.xmtp.device_sync.consent_backup.ConsentSaveH\x00R\aconsent\x12=\n" +
	"\x04hmac\x18\x02 \x01(\v2'.xmtp.device_sync.content.HmacKeyUpdateH\x00R\x04hmacB\b\n" +
	"\x06update\"C\n" +
	"\rHmacKeyUpdate\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12 \n" +
	"\fcycled_at_ns\x18\x02 \x01(\x03R\n" +
	"cycledAtNsB\xd7\x01\n" +
	"\x1ccom.xmtp.device_sync.contentB\fContentProtoP\x01Z+github.com/xmtp/xmtpd/pkg/proto/device_sync\xa2\x02\x03XDC\xaa\x02\x17Xmtp.DeviceSync.Content\xca\x02\x17Xmtp\\DeviceSync\\Content\xe2\x02#Xmtp\\DeviceSync\\Content\\GPBMetadata\xea\x02\x19Xmtp::DeviceSync::Contentb\x06proto3"

var (
	file_device_sync_content_proto_rawDescOnce sync.Once
	file_device_sync_content_proto_rawDescData []byte
)

func file_device_sync_content_proto_rawDescGZIP() []byte {
	file_device_sync_content_proto_rawDescOnce.Do(func() {
		file_device_sync_content_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_device_sync_content_proto_rawDesc), len(file_device_sync_content_proto_rawDesc)))
	})
	return file_device_sync_content_proto_rawDescData
}

var file_device_sync_content_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_device_sync_content_proto_goTypes = []any{
	(*DeviceSyncContent)(nil),                  // 0: xmtp.device_sync.content.DeviceSyncContent
	(*DeviceSyncAcknowledge)(nil),              // 1: xmtp.device_sync.content.DeviceSyncAcknowledge
	(*PreferenceUpdates)(nil),                  // 2: xmtp.device_sync.content.PreferenceUpdates
	(*UserPreferenceUpdate)(nil),               // 3: xmtp.device_sync.content.UserPreferenceUpdate
	(*HmacKeyUpdate)(nil),                      // 4: xmtp.device_sync.content.HmacKeyUpdate
	(*message_contents.DeviceSyncRequest)(nil), // 5: xmtp.mls.message_contents.DeviceSyncRequest
	(*message_contents.DeviceSyncReply)(nil),   // 6: xmtp.mls.message_contents.DeviceSyncReply
	(*ConsentSave)(nil),                        // 7: xmtp.device_sync.consent_backup.ConsentSave
}
var file_device_sync_content_proto_depIdxs = []int32{
	5, // 0: xmtp.device_sync.content.DeviceSyncContent.request:type_name -> xmtp.mls.message_contents.DeviceSyncRequest
	1, // 1: xmtp.device_sync.content.DeviceSyncContent.acknowledge:type_name -> xmtp.device_sync.content.DeviceSyncAcknowledge
	6, // 2: xmtp.device_sync.content.DeviceSyncContent.reply:type_name -> xmtp.mls.message_contents.DeviceSyncReply
	2, // 3: xmtp.device_sync.content.DeviceSyncContent.preference_updates:type_name -> xmtp.device_sync.content.PreferenceUpdates
	3, // 4: xmtp.device_sync.content.PreferenceUpdates.updates:type_name -> xmtp.device_sync.content.UserPreferenceUpdate
	7, // 5: xmtp.device_sync.content.UserPreferenceUpdate.consent:type_name -> xmtp.device_sync.consent_backup.ConsentSave
	4, // 6: xmtp.device_sync.content.UserPreferenceUpdate.hmac:type_name -> xmtp.device_sync.content.HmacKeyUpdate
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_device_sync_content_proto_init() }
func file_device_sync_content_proto_init() {
	if File_device_sync_content_proto != nil {
		return
	}
	file_device_sync_consent_backup_proto_init()
	file_device_sync_content_proto_msgTypes[0].OneofWrappers = []any{
		(*DeviceSyncContent_Request)(nil),
		(*DeviceSyncContent_Acknowledge)(nil),
		(*DeviceSyncContent_Reply)(nil),
		(*DeviceSyncContent_PreferenceUpdates)(nil),
	}
	file_device_sync_content_proto_msgTypes[3].OneofWrappers = []any{
		(*UserPreferenceUpdate_Consent)(nil),
		(*UserPreferenceUpdate_Hmac)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_device_sync_content_proto_rawDesc), len(file_device_sync_content_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_device_sync_content_proto_goTypes,
		DependencyIndexes: file_device_sync_content_proto_depIdxs,
		MessageInfos:      file_device_sync_content_proto_msgTypes,
	}.Build()
	File_device_sync_content_proto = out.File
	file_device_sync_content_proto_goTypes = nil
	file_device_sync_content_proto_depIdxs = nil
}
