// Message API

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: identity/api/v1/identity.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/xmtp/xmtpd/pkg/proto/identity/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IdentityApiName is the fully-qualified name of the IdentityApi service.
	IdentityApiName = "xmtp.identity.api.v1.IdentityApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IdentityApiPublishIdentityUpdateProcedure is the fully-qualified name of the IdentityApi's
	// PublishIdentityUpdate RPC.
	IdentityApiPublishIdentityUpdateProcedure = "/xmtp.identity.api.v1.IdentityApi/PublishIdentityUpdate"
	// IdentityApiGetIdentityUpdatesProcedure is the fully-qualified name of the IdentityApi's
	// GetIdentityUpdates RPC.
	IdentityApiGetIdentityUpdatesProcedure = "/xmtp.identity.api.v1.IdentityApi/GetIdentityUpdates"
	// IdentityApiGetInboxIdsProcedure is the fully-qualified name of the IdentityApi's GetInboxIds RPC.
	IdentityApiGetInboxIdsProcedure = "/xmtp.identity.api.v1.IdentityApi/GetInboxIds"
	// IdentityApiVerifySmartContractWalletSignaturesProcedure is the fully-qualified name of the
	// IdentityApi's VerifySmartContractWalletSignatures RPC.
	IdentityApiVerifySmartContractWalletSignaturesProcedure = "/xmtp.identity.api.v1.IdentityApi/VerifySmartContractWalletSignatures"
)

// IdentityApiClient is a client for the xmtp.identity.api.v1.IdentityApi service.
type IdentityApiClient interface {
	// Publishes an identity update for an XID or wallet. An identity update may
	// consist of multiple identity actions that have been batch signed.
	PublishIdentityUpdate(context.Context, *connect.Request[v1.PublishIdentityUpdateRequest]) (*connect.Response[v1.PublishIdentityUpdateResponse], error)
	// Used to check for changes related to members of a group.
	// Would return an array of any new installations associated with the wallet
	// address, and any revocations that have happened.
	GetIdentityUpdates(context.Context, *connect.Request[v1.GetIdentityUpdatesRequest]) (*connect.Response[v1.GetIdentityUpdatesResponse], error)
	// Retrieve the XIDs for the given addresses
	GetInboxIds(context.Context, *connect.Request[v1.GetInboxIdsRequest]) (*connect.Response[v1.GetInboxIdsResponse], error)
	// Verify an unverified smart contract wallet signature
	VerifySmartContractWalletSignatures(context.Context, *connect.Request[v1.VerifySmartContractWalletSignaturesRequest]) (*connect.Response[v1.VerifySmartContractWalletSignaturesResponse], error)
}

// NewIdentityApiClient constructs a client for the xmtp.identity.api.v1.IdentityApi service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIdentityApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IdentityApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	identityApiMethods := v1.File_identity_api_v1_identity_proto.Services().ByName("IdentityApi").Methods()
	return &identityApiClient{
		publishIdentityUpdate: connect.NewClient[v1.PublishIdentityUpdateRequest, v1.PublishIdentityUpdateResponse](
			httpClient,
			baseURL+IdentityApiPublishIdentityUpdateProcedure,
			connect.WithSchema(identityApiMethods.ByName("PublishIdentityUpdate")),
			connect.WithClientOptions(opts...),
		),
		getIdentityUpdates: connect.NewClient[v1.GetIdentityUpdatesRequest, v1.GetIdentityUpdatesResponse](
			httpClient,
			baseURL+IdentityApiGetIdentityUpdatesProcedure,
			connect.WithSchema(identityApiMethods.ByName("GetIdentityUpdates")),
			connect.WithClientOptions(opts...),
		),
		getInboxIds: connect.NewClient[v1.GetInboxIdsRequest, v1.GetInboxIdsResponse](
			httpClient,
			baseURL+IdentityApiGetInboxIdsProcedure,
			connect.WithSchema(identityApiMethods.ByName("GetInboxIds")),
			connect.WithClientOptions(opts...),
		),
		verifySmartContractWalletSignatures: connect.NewClient[v1.VerifySmartContractWalletSignaturesRequest, v1.VerifySmartContractWalletSignaturesResponse](
			httpClient,
			baseURL+IdentityApiVerifySmartContractWalletSignaturesProcedure,
			connect.WithSchema(identityApiMethods.ByName("VerifySmartContractWalletSignatures")),
			connect.WithClientOptions(opts...),
		),
	}
}

// identityApiClient implements IdentityApiClient.
type identityApiClient struct {
	publishIdentityUpdate               *connect.Client[v1.PublishIdentityUpdateRequest, v1.PublishIdentityUpdateResponse]
	getIdentityUpdates                  *connect.Client[v1.GetIdentityUpdatesRequest, v1.GetIdentityUpdatesResponse]
	getInboxIds                         *connect.Client[v1.GetInboxIdsRequest, v1.GetInboxIdsResponse]
	verifySmartContractWalletSignatures *connect.Client[v1.VerifySmartContractWalletSignaturesRequest, v1.VerifySmartContractWalletSignaturesResponse]
}

// PublishIdentityUpdate calls xmtp.identity.api.v1.IdentityApi.PublishIdentityUpdate.
func (c *identityApiClient) PublishIdentityUpdate(ctx context.Context, req *connect.Request[v1.PublishIdentityUpdateRequest]) (*connect.Response[v1.PublishIdentityUpdateResponse], error) {
	return c.publishIdentityUpdate.CallUnary(ctx, req)
}

// GetIdentityUpdates calls xmtp.identity.api.v1.IdentityApi.GetIdentityUpdates.
func (c *identityApiClient) GetIdentityUpdates(ctx context.Context, req *connect.Request[v1.GetIdentityUpdatesRequest]) (*connect.Response[v1.GetIdentityUpdatesResponse], error) {
	return c.getIdentityUpdates.CallUnary(ctx, req)
}

// GetInboxIds calls xmtp.identity.api.v1.IdentityApi.GetInboxIds.
func (c *identityApiClient) GetInboxIds(ctx context.Context, req *connect.Request[v1.GetInboxIdsRequest]) (*connect.Response[v1.GetInboxIdsResponse], error) {
	return c.getInboxIds.CallUnary(ctx, req)
}

// VerifySmartContractWalletSignatures calls
// xmtp.identity.api.v1.IdentityApi.VerifySmartContractWalletSignatures.
func (c *identityApiClient) VerifySmartContractWalletSignatures(ctx context.Context, req *connect.Request[v1.VerifySmartContractWalletSignaturesRequest]) (*connect.Response[v1.VerifySmartContractWalletSignaturesResponse], error) {
	return c.verifySmartContractWalletSignatures.CallUnary(ctx, req)
}

// IdentityApiHandler is an implementation of the xmtp.identity.api.v1.IdentityApi service.
type IdentityApiHandler interface {
	// Publishes an identity update for an XID or wallet. An identity update may
	// consist of multiple identity actions that have been batch signed.
	PublishIdentityUpdate(context.Context, *connect.Request[v1.PublishIdentityUpdateRequest]) (*connect.Response[v1.PublishIdentityUpdateResponse], error)
	// Used to check for changes related to members of a group.
	// Would return an array of any new installations associated with the wallet
	// address, and any revocations that have happened.
	GetIdentityUpdates(context.Context, *connect.Request[v1.GetIdentityUpdatesRequest]) (*connect.Response[v1.GetIdentityUpdatesResponse], error)
	// Retrieve the XIDs for the given addresses
	GetInboxIds(context.Context, *connect.Request[v1.GetInboxIdsRequest]) (*connect.Response[v1.GetInboxIdsResponse], error)
	// Verify an unverified smart contract wallet signature
	VerifySmartContractWalletSignatures(context.Context, *connect.Request[v1.VerifySmartContractWalletSignaturesRequest]) (*connect.Response[v1.VerifySmartContractWalletSignaturesResponse], error)
}

// NewIdentityApiHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIdentityApiHandler(svc IdentityApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	identityApiMethods := v1.File_identity_api_v1_identity_proto.Services().ByName("IdentityApi").Methods()
	identityApiPublishIdentityUpdateHandler := connect.NewUnaryHandler(
		IdentityApiPublishIdentityUpdateProcedure,
		svc.PublishIdentityUpdate,
		connect.WithSchema(identityApiMethods.ByName("PublishIdentityUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	identityApiGetIdentityUpdatesHandler := connect.NewUnaryHandler(
		IdentityApiGetIdentityUpdatesProcedure,
		svc.GetIdentityUpdates,
		connect.WithSchema(identityApiMethods.ByName("GetIdentityUpdates")),
		connect.WithHandlerOptions(opts...),
	)
	identityApiGetInboxIdsHandler := connect.NewUnaryHandler(
		IdentityApiGetInboxIdsProcedure,
		svc.GetInboxIds,
		connect.WithSchema(identityApiMethods.ByName("GetInboxIds")),
		connect.WithHandlerOptions(opts...),
	)
	identityApiVerifySmartContractWalletSignaturesHandler := connect.NewUnaryHandler(
		IdentityApiVerifySmartContractWalletSignaturesProcedure,
		svc.VerifySmartContractWalletSignatures,
		connect.WithSchema(identityApiMethods.ByName("VerifySmartContractWalletSignatures")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xmtp.identity.api.v1.IdentityApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IdentityApiPublishIdentityUpdateProcedure:
			identityApiPublishIdentityUpdateHandler.ServeHTTP(w, r)
		case IdentityApiGetIdentityUpdatesProcedure:
			identityApiGetIdentityUpdatesHandler.ServeHTTP(w, r)
		case IdentityApiGetInboxIdsProcedure:
			identityApiGetInboxIdsHandler.ServeHTTP(w, r)
		case IdentityApiVerifySmartContractWalletSignaturesProcedure:
			identityApiVerifySmartContractWalletSignaturesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIdentityApiHandler returns CodeUnimplemented from all methods.
type UnimplementedIdentityApiHandler struct{}

func (UnimplementedIdentityApiHandler) PublishIdentityUpdate(context.Context, *connect.Request[v1.PublishIdentityUpdateRequest]) (*connect.Response[v1.PublishIdentityUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.identity.api.v1.IdentityApi.PublishIdentityUpdate is not implemented"))
}

func (UnimplementedIdentityApiHandler) GetIdentityUpdates(context.Context, *connect.Request[v1.GetIdentityUpdatesRequest]) (*connect.Response[v1.GetIdentityUpdatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.identity.api.v1.IdentityApi.GetIdentityUpdates is not implemented"))
}

func (UnimplementedIdentityApiHandler) GetInboxIds(context.Context, *connect.Request[v1.GetInboxIdsRequest]) (*connect.Response[v1.GetInboxIdsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.identity.api.v1.IdentityApi.GetInboxIds is not implemented"))
}

func (UnimplementedIdentityApiHandler) VerifySmartContractWalletSignatures(context.Context, *connect.Request[v1.VerifySmartContractWalletSignaturesRequest]) (*connect.Response[v1.VerifySmartContractWalletSignaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.identity.api.v1.IdentityApi.VerifySmartContractWalletSignatures is not implemented"))
}
