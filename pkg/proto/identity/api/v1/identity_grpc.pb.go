// Message API

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: identity/api/v1/identity.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdentityApi_PublishIdentityUpdate_FullMethodName               = "/xmtp.identity.api.v1.IdentityApi/PublishIdentityUpdate"
	IdentityApi_GetIdentityUpdates_FullMethodName                  = "/xmtp.identity.api.v1.IdentityApi/GetIdentityUpdates"
	IdentityApi_GetInboxIds_FullMethodName                         = "/xmtp.identity.api.v1.IdentityApi/GetInboxIds"
	IdentityApi_VerifySmartContractWalletSignatures_FullMethodName = "/xmtp.identity.api.v1.IdentityApi/VerifySmartContractWalletSignatures"
)

// IdentityApiClient is the client API for IdentityApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityApiClient interface {
	// Publishes an identity update for an XID or wallet. An identity update may
	// consist of multiple identity actions that have been batch signed.
	PublishIdentityUpdate(ctx context.Context, in *PublishIdentityUpdateRequest, opts ...grpc.CallOption) (*PublishIdentityUpdateResponse, error)
	// Used to check for changes related to members of a group.
	// Would return an array of any new installations associated with the wallet
	// address, and any revocations that have happened.
	GetIdentityUpdates(ctx context.Context, in *GetIdentityUpdatesRequest, opts ...grpc.CallOption) (*GetIdentityUpdatesResponse, error)
	// Retrieve the XIDs for the given addresses
	GetInboxIds(ctx context.Context, in *GetInboxIdsRequest, opts ...grpc.CallOption) (*GetInboxIdsResponse, error)
	// Verify an unverified smart contract wallet signature
	VerifySmartContractWalletSignatures(ctx context.Context, in *VerifySmartContractWalletSignaturesRequest, opts ...grpc.CallOption) (*VerifySmartContractWalletSignaturesResponse, error)
}

type identityApiClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityApiClient(cc grpc.ClientConnInterface) IdentityApiClient {
	return &identityApiClient{cc}
}

func (c *identityApiClient) PublishIdentityUpdate(ctx context.Context, in *PublishIdentityUpdateRequest, opts ...grpc.CallOption) (*PublishIdentityUpdateResponse, error) {
	out := new(PublishIdentityUpdateResponse)
	err := c.cc.Invoke(ctx, IdentityApi_PublishIdentityUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityApiClient) GetIdentityUpdates(ctx context.Context, in *GetIdentityUpdatesRequest, opts ...grpc.CallOption) (*GetIdentityUpdatesResponse, error) {
	out := new(GetIdentityUpdatesResponse)
	err := c.cc.Invoke(ctx, IdentityApi_GetIdentityUpdates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityApiClient) GetInboxIds(ctx context.Context, in *GetInboxIdsRequest, opts ...grpc.CallOption) (*GetInboxIdsResponse, error) {
	out := new(GetInboxIdsResponse)
	err := c.cc.Invoke(ctx, IdentityApi_GetInboxIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityApiClient) VerifySmartContractWalletSignatures(ctx context.Context, in *VerifySmartContractWalletSignaturesRequest, opts ...grpc.CallOption) (*VerifySmartContractWalletSignaturesResponse, error) {
	out := new(VerifySmartContractWalletSignaturesResponse)
	err := c.cc.Invoke(ctx, IdentityApi_VerifySmartContractWalletSignatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityApiServer is the server API for IdentityApi service.
// All implementations must embed UnimplementedIdentityApiServer
// for forward compatibility
type IdentityApiServer interface {
	// Publishes an identity update for an XID or wallet. An identity update may
	// consist of multiple identity actions that have been batch signed.
	PublishIdentityUpdate(context.Context, *PublishIdentityUpdateRequest) (*PublishIdentityUpdateResponse, error)
	// Used to check for changes related to members of a group.
	// Would return an array of any new installations associated with the wallet
	// address, and any revocations that have happened.
	GetIdentityUpdates(context.Context, *GetIdentityUpdatesRequest) (*GetIdentityUpdatesResponse, error)
	// Retrieve the XIDs for the given addresses
	GetInboxIds(context.Context, *GetInboxIdsRequest) (*GetInboxIdsResponse, error)
	// Verify an unverified smart contract wallet signature
	VerifySmartContractWalletSignatures(context.Context, *VerifySmartContractWalletSignaturesRequest) (*VerifySmartContractWalletSignaturesResponse, error)
	mustEmbedUnimplementedIdentityApiServer()
}

// UnimplementedIdentityApiServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityApiServer struct {
}

func (UnimplementedIdentityApiServer) PublishIdentityUpdate(context.Context, *PublishIdentityUpdateRequest) (*PublishIdentityUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishIdentityUpdate not implemented")
}
func (UnimplementedIdentityApiServer) GetIdentityUpdates(context.Context, *GetIdentityUpdatesRequest) (*GetIdentityUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityUpdates not implemented")
}
func (UnimplementedIdentityApiServer) GetInboxIds(context.Context, *GetInboxIdsRequest) (*GetInboxIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboxIds not implemented")
}
func (UnimplementedIdentityApiServer) VerifySmartContractWalletSignatures(context.Context, *VerifySmartContractWalletSignaturesRequest) (*VerifySmartContractWalletSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySmartContractWalletSignatures not implemented")
}
func (UnimplementedIdentityApiServer) mustEmbedUnimplementedIdentityApiServer() {}

// UnsafeIdentityApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityApiServer will
// result in compilation errors.
type UnsafeIdentityApiServer interface {
	mustEmbedUnimplementedIdentityApiServer()
}

func RegisterIdentityApiServer(s grpc.ServiceRegistrar, srv IdentityApiServer) {
	s.RegisterService(&IdentityApi_ServiceDesc, srv)
}

func _IdentityApi_PublishIdentityUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishIdentityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityApiServer).PublishIdentityUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityApi_PublishIdentityUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityApiServer).PublishIdentityUpdate(ctx, req.(*PublishIdentityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityApi_GetIdentityUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityApiServer).GetIdentityUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityApi_GetIdentityUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityApiServer).GetIdentityUpdates(ctx, req.(*GetIdentityUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityApi_GetInboxIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboxIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityApiServer).GetInboxIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityApi_GetInboxIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityApiServer).GetInboxIds(ctx, req.(*GetInboxIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityApi_VerifySmartContractWalletSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySmartContractWalletSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityApiServer).VerifySmartContractWalletSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityApi_VerifySmartContractWalletSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityApiServer).VerifySmartContractWalletSignatures(ctx, req.(*VerifySmartContractWalletSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityApi_ServiceDesc is the grpc.ServiceDesc for IdentityApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xmtp.identity.api.v1.IdentityApi",
	HandlerType: (*IdentityApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishIdentityUpdate",
			Handler:    _IdentityApi_PublishIdentityUpdate_Handler,
		},
		{
			MethodName: "GetIdentityUpdates",
			Handler:    _IdentityApi_GetIdentityUpdates_Handler,
		},
		{
			MethodName: "GetInboxIds",
			Handler:    _IdentityApi_GetInboxIds_Handler,
		},
		{
			MethodName: "VerifySmartContractWalletSignatures",
			Handler:    _IdentityApi_VerifySmartContractWalletSignatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/api/v1/identity.proto",
}
