// Signing methods for identity associations

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: identity/associations/signature.proto

package associations

import (
	message_contents "github.com/xmtp/xmtpd/pkg/proto/message_contents"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RecoverableEcdsaSignature for EIP-191 and V2 signatures
type RecoverableEcdsaSignature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 65-bytes [ R || S || V ], with recovery id as the last byte
	Bytes         []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecoverableEcdsaSignature) Reset() {
	*x = RecoverableEcdsaSignature{}
	mi := &file_identity_associations_signature_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverableEcdsaSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverableEcdsaSignature) ProtoMessage() {}

func (x *RecoverableEcdsaSignature) ProtoReflect() protoreflect.Message {
	mi := &file_identity_associations_signature_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverableEcdsaSignature.ProtoReflect.Descriptor instead.
func (*RecoverableEcdsaSignature) Descriptor() ([]byte, []int) {
	return file_identity_associations_signature_proto_rawDescGZIP(), []int{0}
}

func (x *RecoverableEcdsaSignature) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

// EdDSA signature for 25519
type RecoverableEd25519Signature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 64 bytes [R(32 bytes) || S(32 bytes)]
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// 32 bytes
	PublicKey     []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecoverableEd25519Signature) Reset() {
	*x = RecoverableEd25519Signature{}
	mi := &file_identity_associations_signature_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverableEd25519Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverableEd25519Signature) ProtoMessage() {}

func (x *RecoverableEd25519Signature) ProtoReflect() protoreflect.Message {
	mi := &file_identity_associations_signature_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverableEd25519Signature.ProtoReflect.Descriptor instead.
func (*RecoverableEd25519Signature) Descriptor() ([]byte, []int) {
	return file_identity_associations_signature_proto_rawDescGZIP(), []int{1}
}

func (x *RecoverableEd25519Signature) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *RecoverableEd25519Signature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Smart Contract Wallet signature
type SmartContractWalletSignature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CAIP-10 string
	// https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Specify the block number to verify the signature against
	BlockNumber uint64 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// The actual signature bytes
	Signature     []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmartContractWalletSignature) Reset() {
	*x = SmartContractWalletSignature{}
	mi := &file_identity_associations_signature_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmartContractWalletSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractWalletSignature) ProtoMessage() {}

func (x *SmartContractWalletSignature) ProtoReflect() protoreflect.Message {
	mi := &file_identity_associations_signature_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractWalletSignature.ProtoReflect.Descriptor instead.
func (*SmartContractWalletSignature) Descriptor() ([]byte, []int) {
	return file_identity_associations_signature_proto_rawDescGZIP(), []int{2}
}

func (x *SmartContractWalletSignature) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SmartContractWalletSignature) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *SmartContractWalletSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Passkey signature
type RecoverablePasskeySignature struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PublicKey         []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature         []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	AuthenticatorData []byte                 `protobuf:"bytes,3,opt,name=authenticator_data,json=authenticatorData,proto3" json:"authenticator_data,omitempty"`
	ClientDataJson    []byte                 `protobuf:"bytes,4,opt,name=client_data_json,json=clientDataJson,proto3" json:"client_data_json,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RecoverablePasskeySignature) Reset() {
	*x = RecoverablePasskeySignature{}
	mi := &file_identity_associations_signature_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverablePasskeySignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverablePasskeySignature) ProtoMessage() {}

func (x *RecoverablePasskeySignature) ProtoReflect() protoreflect.Message {
	mi := &file_identity_associations_signature_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverablePasskeySignature.ProtoReflect.Descriptor instead.
func (*RecoverablePasskeySignature) Descriptor() ([]byte, []int) {
	return file_identity_associations_signature_proto_rawDescGZIP(), []int{3}
}

func (x *RecoverablePasskeySignature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RecoverablePasskeySignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RecoverablePasskeySignature) GetAuthenticatorData() []byte {
	if x != nil {
		return x.AuthenticatorData
	}
	return nil
}

func (x *RecoverablePasskeySignature) GetClientDataJson() []byte {
	if x != nil {
		return x.ClientDataJson
	}
	return nil
}

// An existing address on xmtpv2 may have already signed a legacy identity key
// of type SignedPublicKey via the 'Create Identity' signature.
// For migration to xmtpv3, the legacy key is permitted to sign on behalf of the
// address to create a matching xmtpv3 installation key.
// This signature type can ONLY be used for CreateXid and AddAssociation
// payloads, and can only be used once in xmtpv3.
type LegacyDelegatedSignature struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	DelegatedKey  *message_contents.SignedPublicKey `protobuf:"bytes,1,opt,name=delegated_key,json=delegatedKey,proto3" json:"delegated_key,omitempty"`
	Signature     *RecoverableEcdsaSignature        `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyDelegatedSignature) Reset() {
	*x = LegacyDelegatedSignature{}
	mi := &file_identity_associations_signature_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyDelegatedSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyDelegatedSignature) ProtoMessage() {}

func (x *LegacyDelegatedSignature) ProtoReflect() protoreflect.Message {
	mi := &file_identity_associations_signature_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyDelegatedSignature.ProtoReflect.Descriptor instead.
func (*LegacyDelegatedSignature) Descriptor() ([]byte, []int) {
	return file_identity_associations_signature_proto_rawDescGZIP(), []int{4}
}

func (x *LegacyDelegatedSignature) GetDelegatedKey() *message_contents.SignedPublicKey {
	if x != nil {
		return x.DelegatedKey
	}
	return nil
}

func (x *LegacyDelegatedSignature) GetSignature() *RecoverableEcdsaSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A wrapper for all possible signature types
type Signature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Must have two properties:
	//  1. An identifier (address or public key) for the signer must either be
	//     recoverable, or specified as a field.
	//  2. The signer certifies that the signing payload is correct. The payload
	//     must be inferred from the context in which the signature is provided.
	//
	// Types that are valid to be assigned to Signature:
	//
	//	*Signature_Erc_191
	//	*Signature_Erc_6492
	//	*Signature_InstallationKey
	//	*Signature_DelegatedErc_191
	//	*Signature_Passkey
	Signature     isSignature_Signature `protobuf_oneof:"signature"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_identity_associations_signature_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_identity_associations_signature_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_identity_associations_signature_proto_rawDescGZIP(), []int{5}
}

func (x *Signature) GetSignature() isSignature_Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signature) GetErc_191() *RecoverableEcdsaSignature {
	if x != nil {
		if x, ok := x.Signature.(*Signature_Erc_191); ok {
			return x.Erc_191
		}
	}
	return nil
}

func (x *Signature) GetErc_6492() *SmartContractWalletSignature {
	if x != nil {
		if x, ok := x.Signature.(*Signature_Erc_6492); ok {
			return x.Erc_6492
		}
	}
	return nil
}

func (x *Signature) GetInstallationKey() *RecoverableEd25519Signature {
	if x != nil {
		if x, ok := x.Signature.(*Signature_InstallationKey); ok {
			return x.InstallationKey
		}
	}
	return nil
}

func (x *Signature) GetDelegatedErc_191() *LegacyDelegatedSignature {
	if x != nil {
		if x, ok := x.Signature.(*Signature_DelegatedErc_191); ok {
			return x.DelegatedErc_191
		}
	}
	return nil
}

func (x *Signature) GetPasskey() *RecoverablePasskeySignature {
	if x != nil {
		if x, ok := x.Signature.(*Signature_Passkey); ok {
			return x.Passkey
		}
	}
	return nil
}

type isSignature_Signature interface {
	isSignature_Signature()
}

type Signature_Erc_191 struct {
	Erc_191 *RecoverableEcdsaSignature `protobuf:"bytes,1,opt,name=erc_191,json=erc191,proto3,oneof"`
}

type Signature_Erc_6492 struct {
	Erc_6492 *SmartContractWalletSignature `protobuf:"bytes,2,opt,name=erc_6492,json=erc6492,proto3,oneof"`
}

type Signature_InstallationKey struct {
	InstallationKey *RecoverableEd25519Signature `protobuf:"bytes,3,opt,name=installation_key,json=installationKey,proto3,oneof"`
}

type Signature_DelegatedErc_191 struct {
	DelegatedErc_191 *LegacyDelegatedSignature `protobuf:"bytes,4,opt,name=delegated_erc_191,json=delegatedErc191,proto3,oneof"`
}

type Signature_Passkey struct {
	Passkey *RecoverablePasskeySignature `protobuf:"bytes,5,opt,name=passkey,proto3,oneof"`
}

func (*Signature_Erc_191) isSignature_Signature() {}

func (*Signature_Erc_6492) isSignature_Signature() {}

func (*Signature_InstallationKey) isSignature_Signature() {}

func (*Signature_DelegatedErc_191) isSignature_Signature() {}

func (*Signature_Passkey) isSignature_Signature() {}

var File_identity_associations_signature_proto protoreflect.FileDescriptor

const file_identity_associations_signature_proto_rawDesc = "" +
	"\n" +
	"%identity/associations/signature.proto\x12\x1axmtp.identity.associations\x1a!message_contents/public_key.proto\"1\n" +
	"\x19RecoverableEcdsaSignature\x12\x14\n" +
	"\x05bytes\x18\x01 \x01(\fR\x05bytes\"R\n" +
	"\x1bRecoverableEd25519Signature\x12\x14\n" +
	"\x05bytes\x18\x01 \x01(\fR\x05bytes\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\"~\n" +
	"\x1cSmartContractWalletSignature\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12!\n" +
	"\fblock_number\x18\x02 \x01(\x04R\vblockNumber\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\"\xb3\x01\n" +
	"\x1bRecoverablePasskeySignature\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x12-\n" +
	"\x12authenticator_data\x18\x03 \x01(\fR\x11authenticatorData\x12(\n" +
	"\x10client_data_json\x18\x04 \x01(\fR\x0eclientDataJson\"\xbc\x01\n" +
	"\x18LegacyDelegatedSignature\x12K\n" +
	"\rdelegated_key\x18\x01 \x01(\v2&.xmtp.message_contents.SignedPublicKeyR\fdelegatedKey\x12S\n" +
	"\tsignature\x18\x02 \x01(\v25.xmtp.identity.associations.RecoverableEcdsaSignatureR\tsignature\"\xe0\x03\n" +
	"\tSignature\x12P\n" +
	"\aerc_191\x18\x01 \x01(\v25.xmtp.identity.associations.RecoverableEcdsaSignatureH\x00R\x06erc191\x12U\n" +
	"\berc_6492\x18\x02 \x01(\v28.xmtp.identity.associations.SmartContractWalletSignatureH\x00R\aerc6492\x12d\n" +
	"\x10installation_key\x18\x03 \x01(\v27.xmtp.identity.associations.RecoverableEd25519SignatureH\x00R\x0finstallationKey\x12b\n" +
	"\x11delegated_erc_191\x18\x04 \x01(\v24.xmtp.identity.associations.LegacyDelegatedSignatureH\x00R\x0fdelegatedErc191\x12S\n" +
	"\apasskey\x18\x05 \x01(\v27.xmtp.identity.associations.RecoverablePasskeySignatureH\x00R\apasskeyB\v\n" +
	"\tsignatureB\xf1\x01\n" +
	"\x1ecom.xmtp.identity.associationsB\x0eSignatureProtoP\x01Z5github.com/xmtp/xmtpd/pkg/proto/identity/associations\xa2\x02\x03XIA\xaa\x02\x1aXmtp.Identity.Associations\xca\x02\x1aXmtp\\Identity\\Associations\xe2\x02&Xmtp\\Identity\\Associations\\GPBMetadata\xea\x02\x1cXmtp::Identity::Associationsb\x06proto3"

var (
	file_identity_associations_signature_proto_rawDescOnce sync.Once
	file_identity_associations_signature_proto_rawDescData []byte
)

func file_identity_associations_signature_proto_rawDescGZIP() []byte {
	file_identity_associations_signature_proto_rawDescOnce.Do(func() {
		file_identity_associations_signature_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_identity_associations_signature_proto_rawDesc), len(file_identity_associations_signature_proto_rawDesc)))
	})
	return file_identity_associations_signature_proto_rawDescData
}

var file_identity_associations_signature_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_identity_associations_signature_proto_goTypes = []any{
	(*RecoverableEcdsaSignature)(nil),        // 0: xmtp.identity.associations.RecoverableEcdsaSignature
	(*RecoverableEd25519Signature)(nil),      // 1: xmtp.identity.associations.RecoverableEd25519Signature
	(*SmartContractWalletSignature)(nil),     // 2: xmtp.identity.associations.SmartContractWalletSignature
	(*RecoverablePasskeySignature)(nil),      // 3: xmtp.identity.associations.RecoverablePasskeySignature
	(*LegacyDelegatedSignature)(nil),         // 4: xmtp.identity.associations.LegacyDelegatedSignature
	(*Signature)(nil),                        // 5: xmtp.identity.associations.Signature
	(*message_contents.SignedPublicKey)(nil), // 6: xmtp.message_contents.SignedPublicKey
}
var file_identity_associations_signature_proto_depIdxs = []int32{
	6, // 0: xmtp.identity.associations.LegacyDelegatedSignature.delegated_key:type_name -> xmtp.message_contents.SignedPublicKey
	0, // 1: xmtp.identity.associations.LegacyDelegatedSignature.signature:type_name -> xmtp.identity.associations.RecoverableEcdsaSignature
	0, // 2: xmtp.identity.associations.Signature.erc_191:type_name -> xmtp.identity.associations.RecoverableEcdsaSignature
	2, // 3: xmtp.identity.associations.Signature.erc_6492:type_name -> xmtp.identity.associations.SmartContractWalletSignature
	1, // 4: xmtp.identity.associations.Signature.installation_key:type_name -> xmtp.identity.associations.RecoverableEd25519Signature
	4, // 5: xmtp.identity.associations.Signature.delegated_erc_191:type_name -> xmtp.identity.associations.LegacyDelegatedSignature
	3, // 6: xmtp.identity.associations.Signature.passkey:type_name -> xmtp.identity.associations.RecoverablePasskeySignature
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_identity_associations_signature_proto_init() }
func file_identity_associations_signature_proto_init() {
	if File_identity_associations_signature_proto != nil {
		return
	}
	file_identity_associations_signature_proto_msgTypes[5].OneofWrappers = []any{
		(*Signature_Erc_191)(nil),
		(*Signature_Erc_6492)(nil),
		(*Signature_InstallationKey)(nil),
		(*Signature_DelegatedErc_191)(nil),
		(*Signature_Passkey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_identity_associations_signature_proto_rawDesc), len(file_identity_associations_signature_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_identity_associations_signature_proto_goTypes,
		DependencyIndexes: file_identity_associations_signature_proto_depIdxs,
		MessageInfos:      file_identity_associations_signature_proto_msgTypes,
	}.Build()
	File_identity_associations_signature_proto = out.File
	file_identity_associations_signature_proto_goTypes = nil
	file_identity_associations_signature_proto_depIdxs = nil
}
