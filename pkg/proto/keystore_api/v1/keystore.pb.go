// Message content encoding structures

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: keystore_api/v1/keystore.proto

package keystore_apiv1

import (
	message_contents "github.com/xmtp/xmtpd/pkg/proto/message_contents"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Application-specific error codes for the Keystore API.
type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED        ErrorCode = 0
	ErrorCode_ERROR_CODE_INVALID_INPUT      ErrorCode = 1
	ErrorCode_ERROR_CODE_NO_MATCHING_PREKEY ErrorCode = 2
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_UNSPECIFIED",
		1: "ERROR_CODE_INVALID_INPUT",
		2: "ERROR_CODE_NO_MATCHING_PREKEY",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":        0,
		"ERROR_CODE_INVALID_INPUT":      1,
		"ERROR_CODE_NO_MATCHING_PREKEY": 2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_keystore_api_v1_keystore_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_keystore_api_v1_keystore_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{0}
}

// JobType is used to specify the type of job the caller would like info on
type JobType int32

const (
	JobType_JOB_TYPE_UNSPECIFIED  JobType = 0
	JobType_JOB_TYPE_REFRESH_V1   JobType = 1
	JobType_JOB_TYPE_REFRESH_V2   JobType = 2
	JobType_JOB_TYPE_REFRESH_PPPP JobType = 3
)

// Enum value maps for JobType.
var (
	JobType_name = map[int32]string{
		0: "JOB_TYPE_UNSPECIFIED",
		1: "JOB_TYPE_REFRESH_V1",
		2: "JOB_TYPE_REFRESH_V2",
		3: "JOB_TYPE_REFRESH_PPPP",
	}
	JobType_value = map[string]int32{
		"JOB_TYPE_UNSPECIFIED":  0,
		"JOB_TYPE_REFRESH_V1":   1,
		"JOB_TYPE_REFRESH_V2":   2,
		"JOB_TYPE_REFRESH_PPPP": 3,
	}
)

func (x JobType) Enum() *JobType {
	p := new(JobType)
	*p = x
	return p
}

func (x JobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobType) Descriptor() protoreflect.EnumDescriptor {
	return file_keystore_api_v1_keystore_proto_enumTypes[1].Descriptor()
}

func (JobType) Type() protoreflect.EnumType {
	return &file_keystore_api_v1_keystore_proto_enumTypes[1]
}

func (x JobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobType.Descriptor instead.
func (JobType) EnumDescriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{1}
}

// Status of the Keystore for the specified wallet address
type GetKeystoreStatusResponse_KeystoreStatus int32

const (
	GetKeystoreStatusResponse_KEYSTORE_STATUS_UNSPECIFIED   GetKeystoreStatusResponse_KeystoreStatus = 0
	GetKeystoreStatusResponse_KEYSTORE_STATUS_UNINITIALIZED GetKeystoreStatusResponse_KeystoreStatus = 1
	GetKeystoreStatusResponse_KEYSTORE_STATUS_INITIALIZED   GetKeystoreStatusResponse_KeystoreStatus = 2
)

// Enum value maps for GetKeystoreStatusResponse_KeystoreStatus.
var (
	GetKeystoreStatusResponse_KeystoreStatus_name = map[int32]string{
		0: "KEYSTORE_STATUS_UNSPECIFIED",
		1: "KEYSTORE_STATUS_UNINITIALIZED",
		2: "KEYSTORE_STATUS_INITIALIZED",
	}
	GetKeystoreStatusResponse_KeystoreStatus_value = map[string]int32{
		"KEYSTORE_STATUS_UNSPECIFIED":   0,
		"KEYSTORE_STATUS_UNINITIALIZED": 1,
		"KEYSTORE_STATUS_INITIALIZED":   2,
	}
)

func (x GetKeystoreStatusResponse_KeystoreStatus) Enum() *GetKeystoreStatusResponse_KeystoreStatus {
	p := new(GetKeystoreStatusResponse_KeystoreStatus)
	*p = x
	return p
}

func (x GetKeystoreStatusResponse_KeystoreStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetKeystoreStatusResponse_KeystoreStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_keystore_api_v1_keystore_proto_enumTypes[2].Descriptor()
}

func (GetKeystoreStatusResponse_KeystoreStatus) Type() protoreflect.EnumType {
	return &file_keystore_api_v1_keystore_proto_enumTypes[2]
}

func (x GetKeystoreStatusResponse_KeystoreStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetKeystoreStatusResponse_KeystoreStatus.Descriptor instead.
func (GetKeystoreStatusResponse_KeystoreStatus) EnumDescriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{20, 0}
}

// Wrapper class for errors from the Keystore API
type KeystoreError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code          ErrorCode              `protobuf:"varint,2,opt,name=code,proto3,enum=xmtp.keystore_api.v1.ErrorCode" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeystoreError) Reset() {
	*x = KeystoreError{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeystoreError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeystoreError) ProtoMessage() {}

func (x *KeystoreError) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeystoreError.ProtoReflect.Descriptor instead.
func (*KeystoreError) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{0}
}

func (x *KeystoreError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KeystoreError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

// Decrypt a batch of messages using X3DH key agreement
type DecryptV1Request struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Requests      []*DecryptV1Request_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptV1Request) Reset() {
	*x = DecryptV1Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptV1Request) ProtoMessage() {}

func (x *DecryptV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptV1Request.ProtoReflect.Descriptor instead.
func (*DecryptV1Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{1}
}

func (x *DecryptV1Request) GetRequests() []*DecryptV1Request_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Response type for both V1 and V2 decryption requests
type DecryptResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Responses     []*DecryptResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptResponse) Reset() {
	*x = DecryptResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptResponse) ProtoMessage() {}

func (x *DecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptResponse.ProtoReflect.Descriptor instead.
func (*DecryptResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{2}
}

func (x *DecryptResponse) GetResponses() []*DecryptResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

// Decrypt a batch of messages using the appropriate topic keys
type DecryptV2Request struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Requests      []*DecryptV2Request_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptV2Request) Reset() {
	*x = DecryptV2Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptV2Request) ProtoMessage() {}

func (x *DecryptV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptV2Request.ProtoReflect.Descriptor instead.
func (*DecryptV2Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{3}
}

func (x *DecryptV2Request) GetRequests() []*DecryptV2Request_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Encrypt a batch of messages using X3DH key agreement
type EncryptV1Request struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Requests      []*EncryptV1Request_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptV1Request) Reset() {
	*x = EncryptV1Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptV1Request) ProtoMessage() {}

func (x *EncryptV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptV1Request.ProtoReflect.Descriptor instead.
func (*EncryptV1Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{4}
}

func (x *EncryptV1Request) GetRequests() []*EncryptV1Request_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Response type for both V1 and V2 encryption requests
type EncryptResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Responses     []*EncryptResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptResponse) Reset() {
	*x = EncryptResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptResponse) ProtoMessage() {}

func (x *EncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptResponse.ProtoReflect.Descriptor instead.
func (*EncryptResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{5}
}

func (x *EncryptResponse) GetResponses() []*EncryptResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

// Encrypt a batch of messages using the appropriate topic keys
type EncryptV2Request struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Requests      []*EncryptV2Request_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptV2Request) Reset() {
	*x = EncryptV2Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptV2Request) ProtoMessage() {}

func (x *EncryptV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptV2Request.ProtoReflect.Descriptor instead.
func (*EncryptV2Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{6}
}

func (x *EncryptV2Request) GetRequests() []*EncryptV2Request_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Encrypt a message for yourself
type SelfEncryptRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Requests      []*SelfEncryptRequest_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelfEncryptRequest) Reset() {
	*x = SelfEncryptRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfEncryptRequest) ProtoMessage() {}

func (x *SelfEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfEncryptRequest.ProtoReflect.Descriptor instead.
func (*SelfEncryptRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{7}
}

func (x *SelfEncryptRequest) GetRequests() []*SelfEncryptRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Response type for SelfEncryptRequest
type SelfEncryptResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Responses     []*SelfEncryptResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelfEncryptResponse) Reset() {
	*x = SelfEncryptResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfEncryptResponse) ProtoMessage() {}

func (x *SelfEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfEncryptResponse.ProtoReflect.Descriptor instead.
func (*SelfEncryptResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{8}
}

func (x *SelfEncryptResponse) GetResponses() []*SelfEncryptResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

// SelfDecryptRequest
type SelfDecryptRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Requests      []*SelfDecryptRequest_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelfDecryptRequest) Reset() {
	*x = SelfDecryptRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfDecryptRequest) ProtoMessage() {}

func (x *SelfDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfDecryptRequest.ProtoReflect.Descriptor instead.
func (*SelfDecryptRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{9}
}

func (x *SelfDecryptRequest) GetRequests() []*SelfDecryptRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Get the private preferences topic identifier
type GetPrivatePreferencesTopicIdentifierResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    string                 `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPrivatePreferencesTopicIdentifierResponse) Reset() {
	*x = GetPrivatePreferencesTopicIdentifierResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPrivatePreferencesTopicIdentifierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivatePreferencesTopicIdentifierResponse) ProtoMessage() {}

func (x *GetPrivatePreferencesTopicIdentifierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivatePreferencesTopicIdentifierResponse.ProtoReflect.Descriptor instead.
func (*GetPrivatePreferencesTopicIdentifierResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{10}
}

func (x *GetPrivatePreferencesTopicIdentifierResponse) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

// Request to create an invite payload, and store the topic keys in the Keystore
type CreateInviteRequest struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Context       *message_contents.InvitationV1_Context  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Recipient     *message_contents.SignedPublicKeyBundle `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	CreatedNs     uint64                                  `protobuf:"varint,3,opt,name=created_ns,json=createdNs,proto3" json:"created_ns,omitempty"`
	ConsentProof  *message_contents.ConsentProofPayload   `protobuf:"bytes,4,opt,name=consent_proof,json=consentProof,proto3" json:"consent_proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateInviteRequest) Reset() {
	*x = CreateInviteRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteRequest) ProtoMessage() {}

func (x *CreateInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteRequest.ProtoReflect.Descriptor instead.
func (*CreateInviteRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{11}
}

func (x *CreateInviteRequest) GetContext() *message_contents.InvitationV1_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CreateInviteRequest) GetRecipient() *message_contents.SignedPublicKeyBundle {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *CreateInviteRequest) GetCreatedNs() uint64 {
	if x != nil {
		return x.CreatedNs
	}
	return 0
}

func (x *CreateInviteRequest) GetConsentProof() *message_contents.ConsentProofPayload {
	if x != nil {
		return x.ConsentProof
	}
	return nil
}

// Response to a CreateInviteRequest
type CreateInviteResponse struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Conversation  *message_contents.ConversationReference `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Payload       []byte                                  `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateInviteResponse) Reset() {
	*x = CreateInviteResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInviteResponse) ProtoMessage() {}

func (x *CreateInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInviteResponse.ProtoReflect.Descriptor instead.
func (*CreateInviteResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{12}
}

func (x *CreateInviteResponse) GetConversation() *message_contents.ConversationReference {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *CreateInviteResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Request to save a batch of invite messages to the Keystore
type SaveInvitesRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Requests      []*SaveInvitesRequest_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveInvitesRequest) Reset() {
	*x = SaveInvitesRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveInvitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveInvitesRequest) ProtoMessage() {}

func (x *SaveInvitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveInvitesRequest.ProtoReflect.Descriptor instead.
func (*SaveInvitesRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{13}
}

func (x *SaveInvitesRequest) GetRequests() []*SaveInvitesRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Response to a SaveInvitesRequest
type SaveInvitesResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Responses     []*SaveInvitesResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveInvitesResponse) Reset() {
	*x = SaveInvitesResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveInvitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveInvitesResponse) ProtoMessage() {}

func (x *SaveInvitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveInvitesResponse.ProtoReflect.Descriptor instead.
func (*SaveInvitesResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{14}
}

func (x *SaveInvitesResponse) GetResponses() []*SaveInvitesResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

// CreateAuthTokenRequest is used to create an auth token for the XMTP API
type CreateAuthTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimestampNs   *uint64                `protobuf:"varint,1,opt,name=timestamp_ns,json=timestampNs,proto3,oneof" json:"timestamp_ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAuthTokenRequest) Reset() {
	*x = CreateAuthTokenRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAuthTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuthTokenRequest) ProtoMessage() {}

func (x *CreateAuthTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuthTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateAuthTokenRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{15}
}

func (x *CreateAuthTokenRequest) GetTimestampNs() uint64 {
	if x != nil && x.TimestampNs != nil {
		return *x.TimestampNs
	}
	return 0
}

// SaveV1ConversationsRequest is used to save a batch of conversations to the
// built in persistence
type SaveV1ConversationsRequest struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Conversations []*message_contents.ConversationReference `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveV1ConversationsRequest) Reset() {
	*x = SaveV1ConversationsRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveV1ConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveV1ConversationsRequest) ProtoMessage() {}

func (x *SaveV1ConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveV1ConversationsRequest.ProtoReflect.Descriptor instead.
func (*SaveV1ConversationsRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{16}
}

func (x *SaveV1ConversationsRequest) GetConversations() []*message_contents.ConversationReference {
	if x != nil {
		return x.Conversations
	}
	return nil
}

// Placeholder response type for SaveV1Conversations
type SaveV1ConversationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveV1ConversationsResponse) Reset() {
	*x = SaveV1ConversationsResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveV1ConversationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveV1ConversationsResponse) ProtoMessage() {}

func (x *SaveV1ConversationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveV1ConversationsResponse.ProtoReflect.Descriptor instead.
func (*SaveV1ConversationsResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{17}
}

// Response for GetV2Conversations
type GetConversationsResponse struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Conversations []*message_contents.ConversationReference `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationsResponse) Reset() {
	*x = GetConversationsResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsResponse) ProtoMessage() {}

func (x *GetConversationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsResponse.ProtoReflect.Descriptor instead.
func (*GetConversationsResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{18}
}

func (x *GetConversationsResponse) GetConversations() []*message_contents.ConversationReference {
	if x != nil {
		return x.Conversations
	}
	return nil
}

// Used to check if the Keystore implementation has been setup for the given
// wallet address Only used for MM Snap Keystore currently
type GetKeystoreStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalletAddress string                 `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeystoreStatusRequest) Reset() {
	*x = GetKeystoreStatusRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeystoreStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeystoreStatusRequest) ProtoMessage() {}

func (x *GetKeystoreStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeystoreStatusRequest.ProtoReflect.Descriptor instead.
func (*GetKeystoreStatusRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{19}
}

func (x *GetKeystoreStatusRequest) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

// Response to GetKeystoreStatusRequest
type GetKeystoreStatusResponse struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Status        GetKeystoreStatusResponse_KeystoreStatus `protobuf:"varint,1,opt,name=status,proto3,enum=xmtp.keystore_api.v1.GetKeystoreStatusResponse_KeystoreStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeystoreStatusResponse) Reset() {
	*x = GetKeystoreStatusResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeystoreStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeystoreStatusResponse) ProtoMessage() {}

func (x *GetKeystoreStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeystoreStatusResponse.ProtoReflect.Descriptor instead.
func (*GetKeystoreStatusResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{20}
}

func (x *GetKeystoreStatusResponse) GetStatus() GetKeystoreStatusResponse_KeystoreStatus {
	if x != nil {
		return x.Status
	}
	return GetKeystoreStatusResponse_KEYSTORE_STATUS_UNSPECIFIED
}

// Used to initialize the Keystore with a private key bundle retrieved from the
// client
type InitKeystoreRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Bundle:
	//
	//	*InitKeystoreRequest_V1
	Bundle        isInitKeystoreRequest_Bundle `protobuf_oneof:"bundle"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitKeystoreRequest) Reset() {
	*x = InitKeystoreRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitKeystoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitKeystoreRequest) ProtoMessage() {}

func (x *InitKeystoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitKeystoreRequest.ProtoReflect.Descriptor instead.
func (*InitKeystoreRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{21}
}

func (x *InitKeystoreRequest) GetBundle() isInitKeystoreRequest_Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *InitKeystoreRequest) GetV1() *message_contents.PrivateKeyBundleV1 {
	if x != nil {
		if x, ok := x.Bundle.(*InitKeystoreRequest_V1); ok {
			return x.V1
		}
	}
	return nil
}

type isInitKeystoreRequest_Bundle interface {
	isInitKeystoreRequest_Bundle()
}

type InitKeystoreRequest_V1 struct {
	V1 *message_contents.PrivateKeyBundleV1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

func (*InitKeystoreRequest_V1) isInitKeystoreRequest_Bundle() {}

// Response to the request to initialize the Keystore
type InitKeystoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *KeystoreError         `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitKeystoreResponse) Reset() {
	*x = InitKeystoreResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitKeystoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitKeystoreResponse) ProtoMessage() {}

func (x *InitKeystoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitKeystoreResponse.ProtoReflect.Descriptor instead.
func (*InitKeystoreResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{22}
}

func (x *InitKeystoreResponse) GetError() *KeystoreError {
	if x != nil {
		return x.Error
	}
	return nil
}

// SignDigestRequest is used to sign a digest with either the identity key
// or a prekey
type SignDigestRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Digest []byte                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// Types that are valid to be assigned to Signer:
	//
	//	*SignDigestRequest_IdentityKey
	//	*SignDigestRequest_PrekeyIndex
	Signer        isSignDigestRequest_Signer `protobuf_oneof:"signer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignDigestRequest) Reset() {
	*x = SignDigestRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignDigestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignDigestRequest) ProtoMessage() {}

func (x *SignDigestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignDigestRequest.ProtoReflect.Descriptor instead.
func (*SignDigestRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{23}
}

func (x *SignDigestRequest) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *SignDigestRequest) GetSigner() isSignDigestRequest_Signer {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *SignDigestRequest) GetIdentityKey() bool {
	if x != nil {
		if x, ok := x.Signer.(*SignDigestRequest_IdentityKey); ok {
			return x.IdentityKey
		}
	}
	return false
}

func (x *SignDigestRequest) GetPrekeyIndex() uint32 {
	if x != nil {
		if x, ok := x.Signer.(*SignDigestRequest_PrekeyIndex); ok {
			return x.PrekeyIndex
		}
	}
	return 0
}

type isSignDigestRequest_Signer interface {
	isSignDigestRequest_Signer()
}

type SignDigestRequest_IdentityKey struct {
	IdentityKey bool `protobuf:"varint,2,opt,name=identity_key,json=identityKey,proto3,oneof"`
}

type SignDigestRequest_PrekeyIndex struct {
	PrekeyIndex uint32 `protobuf:"varint,3,opt,name=prekey_index,json=prekeyIndex,proto3,oneof"`
}

func (*SignDigestRequest_IdentityKey) isSignDigestRequest_Signer() {}

func (*SignDigestRequest_PrekeyIndex) isSignDigestRequest_Signer() {}

// GetRefreshJobRequest is used to get the last run time of a refresh job
type GetRefreshJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobType       JobType                `protobuf:"varint,1,opt,name=job_type,json=jobType,proto3,enum=xmtp.keystore_api.v1.JobType" json:"job_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRefreshJobRequest) Reset() {
	*x = GetRefreshJobRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRefreshJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRefreshJobRequest) ProtoMessage() {}

func (x *GetRefreshJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRefreshJobRequest.ProtoReflect.Descriptor instead.
func (*GetRefreshJobRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{24}
}

func (x *GetRefreshJobRequest) GetJobType() JobType {
	if x != nil {
		return x.JobType
	}
	return JobType_JOB_TYPE_UNSPECIFIED
}

// GetRefreshJobResponse is used to return the last run time of a refresh job
type GetRefreshJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastRunNs     int64                  `protobuf:"varint,1,opt,name=last_run_ns,json=lastRunNs,proto3" json:"last_run_ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRefreshJobResponse) Reset() {
	*x = GetRefreshJobResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRefreshJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRefreshJobResponse) ProtoMessage() {}

func (x *GetRefreshJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRefreshJobResponse.ProtoReflect.Descriptor instead.
func (*GetRefreshJobResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{25}
}

func (x *GetRefreshJobResponse) GetLastRunNs() int64 {
	if x != nil {
		return x.LastRunNs
	}
	return 0
}

// SetRefreshJobRequest is used to set the last run time of a refresh job
type SetRefeshJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobType       JobType                `protobuf:"varint,1,opt,name=job_type,json=jobType,proto3,enum=xmtp.keystore_api.v1.JobType" json:"job_type,omitempty"`
	LastRunNs     int64                  `protobuf:"varint,2,opt,name=last_run_ns,json=lastRunNs,proto3" json:"last_run_ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRefeshJobRequest) Reset() {
	*x = SetRefeshJobRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRefeshJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRefeshJobRequest) ProtoMessage() {}

func (x *SetRefeshJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRefeshJobRequest.ProtoReflect.Descriptor instead.
func (*SetRefeshJobRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{26}
}

func (x *SetRefeshJobRequest) GetJobType() JobType {
	if x != nil {
		return x.JobType
	}
	return JobType_JOB_TYPE_UNSPECIFIED
}

func (x *SetRefeshJobRequest) GetLastRunNs() int64 {
	if x != nil {
		return x.LastRunNs
	}
	return 0
}

// SetRefreshJobResponse is an empty response type
type SetRefreshJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRefreshJobResponse) Reset() {
	*x = SetRefreshJobResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRefreshJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRefreshJobResponse) ProtoMessage() {}

func (x *SetRefreshJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRefreshJobResponse.ProtoReflect.Descriptor instead.
func (*SetRefreshJobResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{27}
}

// A mapping of topics to their decrypted invitations
type TopicMap struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Topics        map[string]*TopicMap_TopicData `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicMap) Reset() {
	*x = TopicMap{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicMap) ProtoMessage() {}

func (x *TopicMap) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicMap.ProtoReflect.Descriptor instead.
func (*TopicMap) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{28}
}

func (x *TopicMap) GetTopics() map[string]*TopicMap_TopicData {
	if x != nil {
		return x.Topics
	}
	return nil
}

// Used to get a mapping of conversation topics to their HMAC keys
type GetConversationHmacKeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []string               `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationHmacKeysRequest) Reset() {
	*x = GetConversationHmacKeysRequest{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationHmacKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationHmacKeysRequest) ProtoMessage() {}

func (x *GetConversationHmacKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationHmacKeysRequest.ProtoReflect.Descriptor instead.
func (*GetConversationHmacKeysRequest) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{29}
}

func (x *GetConversationHmacKeysRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

// A mapping of topics to their HMAC keys
type GetConversationHmacKeysResponse struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	HmacKeys      map[string]*GetConversationHmacKeysResponse_HmacKeys `protobuf:"bytes,1,rep,name=hmac_keys,json=hmacKeys,proto3" json:"hmac_keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationHmacKeysResponse) Reset() {
	*x = GetConversationHmacKeysResponse{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationHmacKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationHmacKeysResponse) ProtoMessage() {}

func (x *GetConversationHmacKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationHmacKeysResponse.ProtoReflect.Descriptor instead.
func (*GetConversationHmacKeysResponse) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{30}
}

func (x *GetConversationHmacKeysResponse) GetHmacKeys() map[string]*GetConversationHmacKeysResponse_HmacKeys {
	if x != nil {
		return x.HmacKeys
	}
	return nil
}

// A mapping of message hashes to their private preferences action
type PrivatePreferencesActionMap struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Actions       map[string]*message_contents.PrivatePreferencesAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivatePreferencesActionMap) Reset() {
	*x = PrivatePreferencesActionMap{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivatePreferencesActionMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivatePreferencesActionMap) ProtoMessage() {}

func (x *PrivatePreferencesActionMap) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivatePreferencesActionMap.ProtoReflect.Descriptor instead.
func (*PrivatePreferencesActionMap) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{31}
}

func (x *PrivatePreferencesActionMap) GetActions() map[string]*message_contents.PrivatePreferencesAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// A single decryption request
type DecryptV1Request_Request struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Payload       *message_contents.Ciphertext      `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	PeerKeys      *message_contents.PublicKeyBundle `protobuf:"bytes,2,opt,name=peer_keys,json=peerKeys,proto3" json:"peer_keys,omitempty"`
	HeaderBytes   []byte                            `protobuf:"bytes,3,opt,name=header_bytes,json=headerBytes,proto3" json:"header_bytes,omitempty"`
	IsSender      bool                              `protobuf:"varint,4,opt,name=is_sender,json=isSender,proto3" json:"is_sender,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptV1Request_Request) Reset() {
	*x = DecryptV1Request_Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptV1Request_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptV1Request_Request) ProtoMessage() {}

func (x *DecryptV1Request_Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptV1Request_Request.ProtoReflect.Descriptor instead.
func (*DecryptV1Request_Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DecryptV1Request_Request) GetPayload() *message_contents.Ciphertext {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DecryptV1Request_Request) GetPeerKeys() *message_contents.PublicKeyBundle {
	if x != nil {
		return x.PeerKeys
	}
	return nil
}

func (x *DecryptV1Request_Request) GetHeaderBytes() []byte {
	if x != nil {
		return x.HeaderBytes
	}
	return nil
}

func (x *DecryptV1Request_Request) GetIsSender() bool {
	if x != nil {
		return x.IsSender
	}
	return false
}

// A single decryption response
type DecryptResponse_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*DecryptResponse_Response_Result
	//	*DecryptResponse_Response_Error
	Response      isDecryptResponse_Response_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptResponse_Response) Reset() {
	*x = DecryptResponse_Response{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptResponse_Response) ProtoMessage() {}

func (x *DecryptResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptResponse_Response.ProtoReflect.Descriptor instead.
func (*DecryptResponse_Response) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{2, 0}
}

func (x *DecryptResponse_Response) GetResponse() isDecryptResponse_Response_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DecryptResponse_Response) GetResult() *DecryptResponse_Response_Success {
	if x != nil {
		if x, ok := x.Response.(*DecryptResponse_Response_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *DecryptResponse_Response) GetError() *KeystoreError {
	if x != nil {
		if x, ok := x.Response.(*DecryptResponse_Response_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isDecryptResponse_Response_Response interface {
	isDecryptResponse_Response_Response()
}

type DecryptResponse_Response_Result struct {
	Result *DecryptResponse_Response_Success `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type DecryptResponse_Response_Error struct {
	Error *KeystoreError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*DecryptResponse_Response_Result) isDecryptResponse_Response_Response() {}

func (*DecryptResponse_Response_Error) isDecryptResponse_Response_Response() {}

// Wrapper object for success response
type DecryptResponse_Response_Success struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Decrypted     []byte                 `protobuf:"bytes,1,opt,name=decrypted,proto3" json:"decrypted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptResponse_Response_Success) Reset() {
	*x = DecryptResponse_Response_Success{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptResponse_Response_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptResponse_Response_Success) ProtoMessage() {}

func (x *DecryptResponse_Response_Success) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptResponse_Response_Success.ProtoReflect.Descriptor instead.
func (*DecryptResponse_Response_Success) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *DecryptResponse_Response_Success) GetDecrypted() []byte {
	if x != nil {
		return x.Decrypted
	}
	return nil
}

// A single decryption request
type DecryptV2Request_Request struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Payload       *message_contents.Ciphertext `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	HeaderBytes   []byte                       `protobuf:"bytes,2,opt,name=header_bytes,json=headerBytes,proto3" json:"header_bytes,omitempty"`
	ContentTopic  string                       `protobuf:"bytes,3,opt,name=content_topic,json=contentTopic,proto3" json:"content_topic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptV2Request_Request) Reset() {
	*x = DecryptV2Request_Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptV2Request_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptV2Request_Request) ProtoMessage() {}

func (x *DecryptV2Request_Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptV2Request_Request.ProtoReflect.Descriptor instead.
func (*DecryptV2Request_Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DecryptV2Request_Request) GetPayload() *message_contents.Ciphertext {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DecryptV2Request_Request) GetHeaderBytes() []byte {
	if x != nil {
		return x.HeaderBytes
	}
	return nil
}

func (x *DecryptV2Request_Request) GetContentTopic() string {
	if x != nil {
		return x.ContentTopic
	}
	return ""
}

// A single encryption request
type EncryptV1Request_Request struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Recipient     *message_contents.PublicKeyBundle `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Payload       []byte                            `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	HeaderBytes   []byte                            `protobuf:"bytes,3,opt,name=header_bytes,json=headerBytes,proto3" json:"header_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptV1Request_Request) Reset() {
	*x = EncryptV1Request_Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptV1Request_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptV1Request_Request) ProtoMessage() {}

func (x *EncryptV1Request_Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptV1Request_Request.ProtoReflect.Descriptor instead.
func (*EncryptV1Request_Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{4, 0}
}

func (x *EncryptV1Request_Request) GetRecipient() *message_contents.PublicKeyBundle {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *EncryptV1Request_Request) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EncryptV1Request_Request) GetHeaderBytes() []byte {
	if x != nil {
		return x.HeaderBytes
	}
	return nil
}

// A single encryption response
type EncryptResponse_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*EncryptResponse_Response_Result
	//	*EncryptResponse_Response_Error
	Response      isEncryptResponse_Response_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptResponse_Response) Reset() {
	*x = EncryptResponse_Response{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptResponse_Response) ProtoMessage() {}

func (x *EncryptResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptResponse_Response.ProtoReflect.Descriptor instead.
func (*EncryptResponse_Response) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{5, 0}
}

func (x *EncryptResponse_Response) GetResponse() isEncryptResponse_Response_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *EncryptResponse_Response) GetResult() *EncryptResponse_Response_Success {
	if x != nil {
		if x, ok := x.Response.(*EncryptResponse_Response_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *EncryptResponse_Response) GetError() *KeystoreError {
	if x != nil {
		if x, ok := x.Response.(*EncryptResponse_Response_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isEncryptResponse_Response_Response interface {
	isEncryptResponse_Response_Response()
}

type EncryptResponse_Response_Result struct {
	Result *EncryptResponse_Response_Success `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type EncryptResponse_Response_Error struct {
	Error *KeystoreError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*EncryptResponse_Response_Result) isEncryptResponse_Response_Response() {}

func (*EncryptResponse_Response_Error) isEncryptResponse_Response_Response() {}

// Wrapper object for success response
type EncryptResponse_Response_Success struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Encrypted     *message_contents.Ciphertext `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	SenderHmac    []byte                       `protobuf:"bytes,2,opt,name=sender_hmac,json=senderHmac,proto3" json:"sender_hmac,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptResponse_Response_Success) Reset() {
	*x = EncryptResponse_Response_Success{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptResponse_Response_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptResponse_Response_Success) ProtoMessage() {}

func (x *EncryptResponse_Response_Success) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptResponse_Response_Success.ProtoReflect.Descriptor instead.
func (*EncryptResponse_Response_Success) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *EncryptResponse_Response_Success) GetEncrypted() *message_contents.Ciphertext {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (x *EncryptResponse_Response_Success) GetSenderHmac() []byte {
	if x != nil {
		return x.SenderHmac
	}
	return nil
}

// A single encryption request
type EncryptV2Request_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	HeaderBytes   []byte                 `protobuf:"bytes,2,opt,name=header_bytes,json=headerBytes,proto3" json:"header_bytes,omitempty"`
	ContentTopic  string                 `protobuf:"bytes,3,opt,name=content_topic,json=contentTopic,proto3" json:"content_topic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptV2Request_Request) Reset() {
	*x = EncryptV2Request_Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptV2Request_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptV2Request_Request) ProtoMessage() {}

func (x *EncryptV2Request_Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptV2Request_Request.ProtoReflect.Descriptor instead.
func (*EncryptV2Request_Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{6, 0}
}

func (x *EncryptV2Request_Request) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EncryptV2Request_Request) GetHeaderBytes() []byte {
	if x != nil {
		return x.HeaderBytes
	}
	return nil
}

func (x *EncryptV2Request_Request) GetContentTopic() string {
	if x != nil {
		return x.ContentTopic
	}
	return ""
}

// Request type
type SelfEncryptRequest_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelfEncryptRequest_Request) Reset() {
	*x = SelfEncryptRequest_Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfEncryptRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfEncryptRequest_Request) ProtoMessage() {}

func (x *SelfEncryptRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfEncryptRequest_Request.ProtoReflect.Descriptor instead.
func (*SelfEncryptRequest_Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SelfEncryptRequest_Request) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Response type
type SelfEncryptResponse_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SelfEncryptResponse_Response_Result
	//	*SelfEncryptResponse_Response_Error
	Response      isSelfEncryptResponse_Response_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelfEncryptResponse_Response) Reset() {
	*x = SelfEncryptResponse_Response{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfEncryptResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfEncryptResponse_Response) ProtoMessage() {}

func (x *SelfEncryptResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfEncryptResponse_Response.ProtoReflect.Descriptor instead.
func (*SelfEncryptResponse_Response) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SelfEncryptResponse_Response) GetResponse() isSelfEncryptResponse_Response_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SelfEncryptResponse_Response) GetResult() *SelfEncryptResponse_Response_Success {
	if x != nil {
		if x, ok := x.Response.(*SelfEncryptResponse_Response_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *SelfEncryptResponse_Response) GetError() *KeystoreError {
	if x != nil {
		if x, ok := x.Response.(*SelfEncryptResponse_Response_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isSelfEncryptResponse_Response_Response interface {
	isSelfEncryptResponse_Response_Response()
}

type SelfEncryptResponse_Response_Result struct {
	Result *SelfEncryptResponse_Response_Success `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type SelfEncryptResponse_Response_Error struct {
	Error *KeystoreError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*SelfEncryptResponse_Response_Result) isSelfEncryptResponse_Response_Response() {}

func (*SelfEncryptResponse_Response_Error) isSelfEncryptResponse_Response_Response() {}

// Success response
type SelfEncryptResponse_Response_Success struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Encrypted     []byte                 `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelfEncryptResponse_Response_Success) Reset() {
	*x = SelfEncryptResponse_Response_Success{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfEncryptResponse_Response_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfEncryptResponse_Response_Success) ProtoMessage() {}

func (x *SelfEncryptResponse_Response_Success) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfEncryptResponse_Response_Success.ProtoReflect.Descriptor instead.
func (*SelfEncryptResponse_Response_Success) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *SelfEncryptResponse_Response_Success) GetEncrypted() []byte {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

// Request type
type SelfDecryptRequest_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelfDecryptRequest_Request) Reset() {
	*x = SelfDecryptRequest_Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfDecryptRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfDecryptRequest_Request) ProtoMessage() {}

func (x *SelfDecryptRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfDecryptRequest_Request.ProtoReflect.Descriptor instead.
func (*SelfDecryptRequest_Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SelfDecryptRequest_Request) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Mirrors xmtp.envelope schema
type SaveInvitesRequest_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentTopic  string                 `protobuf:"bytes,1,opt,name=content_topic,json=contentTopic,proto3" json:"content_topic,omitempty"`
	TimestampNs   uint64                 `protobuf:"varint,2,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveInvitesRequest_Request) Reset() {
	*x = SaveInvitesRequest_Request{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveInvitesRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveInvitesRequest_Request) ProtoMessage() {}

func (x *SaveInvitesRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveInvitesRequest_Request.ProtoReflect.Descriptor instead.
func (*SaveInvitesRequest_Request) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SaveInvitesRequest_Request) GetContentTopic() string {
	if x != nil {
		return x.ContentTopic
	}
	return ""
}

func (x *SaveInvitesRequest_Request) GetTimestampNs() uint64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *SaveInvitesRequest_Request) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// A single response
type SaveInvitesResponse_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SaveInvitesResponse_Response_Result
	//	*SaveInvitesResponse_Response_Error
	Response      isSaveInvitesResponse_Response_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveInvitesResponse_Response) Reset() {
	*x = SaveInvitesResponse_Response{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveInvitesResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveInvitesResponse_Response) ProtoMessage() {}

func (x *SaveInvitesResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveInvitesResponse_Response.ProtoReflect.Descriptor instead.
func (*SaveInvitesResponse_Response) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SaveInvitesResponse_Response) GetResponse() isSaveInvitesResponse_Response_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SaveInvitesResponse_Response) GetResult() *SaveInvitesResponse_Response_Success {
	if x != nil {
		if x, ok := x.Response.(*SaveInvitesResponse_Response_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *SaveInvitesResponse_Response) GetError() *KeystoreError {
	if x != nil {
		if x, ok := x.Response.(*SaveInvitesResponse_Response_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isSaveInvitesResponse_Response_Response interface {
	isSaveInvitesResponse_Response_Response()
}

type SaveInvitesResponse_Response_Result struct {
	Result *SaveInvitesResponse_Response_Success `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type SaveInvitesResponse_Response_Error struct {
	Error *KeystoreError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*SaveInvitesResponse_Response_Result) isSaveInvitesResponse_Response_Response() {}

func (*SaveInvitesResponse_Response_Error) isSaveInvitesResponse_Response_Response() {}

// Wrapper object for success response
type SaveInvitesResponse_Response_Success struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Conversation  *message_contents.ConversationReference `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveInvitesResponse_Response_Success) Reset() {
	*x = SaveInvitesResponse_Response_Success{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveInvitesResponse_Response_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveInvitesResponse_Response_Success) ProtoMessage() {}

func (x *SaveInvitesResponse_Response_Success) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveInvitesResponse_Response_Success.ProtoReflect.Descriptor instead.
func (*SaveInvitesResponse_Response_Success) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (x *SaveInvitesResponse_Response_Success) GetConversation() *message_contents.ConversationReference {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// TopicData wraps the invitation and the timestamp it was created
type TopicMap_TopicData struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	CreatedNs     uint64                         `protobuf:"varint,1,opt,name=created_ns,json=createdNs,proto3" json:"created_ns,omitempty"`
	PeerAddress   string                         `protobuf:"bytes,2,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	Invitation    *message_contents.InvitationV1 `protobuf:"bytes,3,opt,name=invitation,proto3" json:"invitation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicMap_TopicData) Reset() {
	*x = TopicMap_TopicData{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicMap_TopicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicMap_TopicData) ProtoMessage() {}

func (x *TopicMap_TopicData) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicMap_TopicData.ProtoReflect.Descriptor instead.
func (*TopicMap_TopicData) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{28, 0}
}

func (x *TopicMap_TopicData) GetCreatedNs() uint64 {
	if x != nil {
		return x.CreatedNs
	}
	return 0
}

func (x *TopicMap_TopicData) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

func (x *TopicMap_TopicData) GetInvitation() *message_contents.InvitationV1 {
	if x != nil {
		return x.Invitation
	}
	return nil
}

// HmacKeyData wraps the HMAC key and the number of 30 day periods since epoch
type GetConversationHmacKeysResponse_HmacKeyData struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	ThirtyDayPeriodsSinceEpoch int32                  `protobuf:"varint,1,opt,name=thirty_day_periods_since_epoch,json=thirtyDayPeriodsSinceEpoch,proto3" json:"thirty_day_periods_since_epoch,omitempty"`
	HmacKey                    []byte                 `protobuf:"bytes,2,opt,name=hmac_key,json=hmacKey,proto3" json:"hmac_key,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *GetConversationHmacKeysResponse_HmacKeyData) Reset() {
	*x = GetConversationHmacKeysResponse_HmacKeyData{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationHmacKeysResponse_HmacKeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationHmacKeysResponse_HmacKeyData) ProtoMessage() {}

func (x *GetConversationHmacKeysResponse_HmacKeyData) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationHmacKeysResponse_HmacKeyData.ProtoReflect.Descriptor instead.
func (*GetConversationHmacKeysResponse_HmacKeyData) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{30, 0}
}

func (x *GetConversationHmacKeysResponse_HmacKeyData) GetThirtyDayPeriodsSinceEpoch() int32 {
	if x != nil {
		return x.ThirtyDayPeriodsSinceEpoch
	}
	return 0
}

func (x *GetConversationHmacKeysResponse_HmacKeyData) GetHmacKey() []byte {
	if x != nil {
		return x.HmacKey
	}
	return nil
}

// HmacKeys represents multiple HmacKeyData objects
type GetConversationHmacKeysResponse_HmacKeys struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Values        []*GetConversationHmacKeysResponse_HmacKeyData `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationHmacKeysResponse_HmacKeys) Reset() {
	*x = GetConversationHmacKeysResponse_HmacKeys{}
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationHmacKeysResponse_HmacKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationHmacKeysResponse_HmacKeys) ProtoMessage() {}

func (x *GetConversationHmacKeysResponse_HmacKeys) ProtoReflect() protoreflect.Message {
	mi := &file_keystore_api_v1_keystore_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationHmacKeysResponse_HmacKeys.ProtoReflect.Descriptor instead.
func (*GetConversationHmacKeysResponse_HmacKeys) Descriptor() ([]byte, []int) {
	return file_keystore_api_v1_keystore_proto_rawDescGZIP(), []int{30, 1}
}

func (x *GetConversationHmacKeysResponse_HmacKeys) GetValues() []*GetConversationHmacKeysResponse_HmacKeyData {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_keystore_api_v1_keystore_proto protoreflect.FileDescriptor

var file_keystore_api_v1_keystore_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e,
	0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xac,
	0x02, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a,
	0xcb, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78,
	0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xb0, 0x02,
	0x0a, 0x0f, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a,
	0xce, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78,
	0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x27, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xef, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x32, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x31,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0xf4, 0x02, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x1a, 0x92, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x1a, 0x6b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x6d, 0x61, 0x63, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x6b, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x66,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x23, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xbc, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x66, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78,
	0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6c, 0x66, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x27, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x23, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4e, 0x0a, 0x2c, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x98, 0x02, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78,
	0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x53,
	0x61, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a,
	0x6b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xf0, 0x02, 0x0a,
	0x13, 0x53, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0x86, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x5b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x51, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x6e, 0x73, 0x22, 0x70, 0x0a, 0x1a, 0x53, 0x61, 0x76, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x61, 0x76, 0x65, 0x56, 0x31, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x75, 0x0a, 0x0e,
	0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x1b, 0x4b, 0x45, 0x59, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x4b, 0x45, 0x59, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x59, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x02, 0x22, 0x5c, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x76, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56,
	0x31, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x22, 0x51, 0x0a, 0x14, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x7f, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x4e, 0x73,
	0x22, 0x6f, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x73, 0x68, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x4e,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x08, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x09,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x31, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x63, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22,
	0xd5, 0x03, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6d, 0x61,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x6d,
	0x61, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x68, 0x6d, 0x61,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x6c, 0x0a, 0x0b, 0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x68, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x68,
	0x69, 0x72, 0x74, 0x79, 0x44, 0x61, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6d, 0x61, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x6d, 0x61, 0x63,
	0x4b, 0x65, 0x79, 0x1a, 0x65, 0x0a, 0x08, 0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x59, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x7b, 0x0a, 0x0d, 0x48, 0x6d,
	0x61, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78,
	0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x6b, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x68,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x52, 0x45, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x2a, 0x70, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x5f, 0x56, 0x31, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x56, 0x32, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52,
	0x45, 0x53, 0x48, 0x5f, 0x50, 0x50, 0x50, 0x50, 0x10, 0x03, 0x42, 0xd7, 0x01, 0x0a, 0x18, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x6d, 0x74, 0x70, 0x2f, 0x78, 0x6d, 0x74, 0x70, 0x64, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x58, 0x4b, 0x58, 0xaa, 0x02,
	0x13, 0x58, 0x6d, 0x74, 0x70, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70,
	0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x58, 0x6d, 0x74, 0x70, 0x5c, 0x4b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x58, 0x6d, 0x74,
	0x70, 0x5c, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x58,
	0x6d, 0x74, 0x70, 0x3a, 0x3a, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x69,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_keystore_api_v1_keystore_proto_rawDescOnce sync.Once
	file_keystore_api_v1_keystore_proto_rawDescData = file_keystore_api_v1_keystore_proto_rawDesc
)

func file_keystore_api_v1_keystore_proto_rawDescGZIP() []byte {
	file_keystore_api_v1_keystore_proto_rawDescOnce.Do(func() {
		file_keystore_api_v1_keystore_proto_rawDescData = protoimpl.X.CompressGZIP(file_keystore_api_v1_keystore_proto_rawDescData)
	})
	return file_keystore_api_v1_keystore_proto_rawDescData
}

var file_keystore_api_v1_keystore_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_keystore_api_v1_keystore_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_keystore_api_v1_keystore_proto_goTypes = []any{
	(ErrorCode)(0), // 0: xmtp.keystore_api.v1.ErrorCode
	(JobType)(0),   // 1: xmtp.keystore_api.v1.JobType
	(GetKeystoreStatusResponse_KeystoreStatus)(0),        // 2: xmtp.keystore_api.v1.GetKeystoreStatusResponse.KeystoreStatus
	(*KeystoreError)(nil),                                // 3: xmtp.keystore_api.v1.KeystoreError
	(*DecryptV1Request)(nil),                             // 4: xmtp.keystore_api.v1.DecryptV1Request
	(*DecryptResponse)(nil),                              // 5: xmtp.keystore_api.v1.DecryptResponse
	(*DecryptV2Request)(nil),                             // 6: xmtp.keystore_api.v1.DecryptV2Request
	(*EncryptV1Request)(nil),                             // 7: xmtp.keystore_api.v1.EncryptV1Request
	(*EncryptResponse)(nil),                              // 8: xmtp.keystore_api.v1.EncryptResponse
	(*EncryptV2Request)(nil),                             // 9: xmtp.keystore_api.v1.EncryptV2Request
	(*SelfEncryptRequest)(nil),                           // 10: xmtp.keystore_api.v1.SelfEncryptRequest
	(*SelfEncryptResponse)(nil),                          // 11: xmtp.keystore_api.v1.SelfEncryptResponse
	(*SelfDecryptRequest)(nil),                           // 12: xmtp.keystore_api.v1.SelfDecryptRequest
	(*GetPrivatePreferencesTopicIdentifierResponse)(nil), // 13: xmtp.keystore_api.v1.GetPrivatePreferencesTopicIdentifierResponse
	(*CreateInviteRequest)(nil),                          // 14: xmtp.keystore_api.v1.CreateInviteRequest
	(*CreateInviteResponse)(nil),                         // 15: xmtp.keystore_api.v1.CreateInviteResponse
	(*SaveInvitesRequest)(nil),                           // 16: xmtp.keystore_api.v1.SaveInvitesRequest
	(*SaveInvitesResponse)(nil),                          // 17: xmtp.keystore_api.v1.SaveInvitesResponse
	(*CreateAuthTokenRequest)(nil),                       // 18: xmtp.keystore_api.v1.CreateAuthTokenRequest
	(*SaveV1ConversationsRequest)(nil),                   // 19: xmtp.keystore_api.v1.SaveV1ConversationsRequest
	(*SaveV1ConversationsResponse)(nil),                  // 20: xmtp.keystore_api.v1.SaveV1ConversationsResponse
	(*GetConversationsResponse)(nil),                     // 21: xmtp.keystore_api.v1.GetConversationsResponse
	(*GetKeystoreStatusRequest)(nil),                     // 22: xmtp.keystore_api.v1.GetKeystoreStatusRequest
	(*GetKeystoreStatusResponse)(nil),                    // 23: xmtp.keystore_api.v1.GetKeystoreStatusResponse
	(*InitKeystoreRequest)(nil),                          // 24: xmtp.keystore_api.v1.InitKeystoreRequest
	(*InitKeystoreResponse)(nil),                         // 25: xmtp.keystore_api.v1.InitKeystoreResponse
	(*SignDigestRequest)(nil),                            // 26: xmtp.keystore_api.v1.SignDigestRequest
	(*GetRefreshJobRequest)(nil),                         // 27: xmtp.keystore_api.v1.GetRefreshJobRequest
	(*GetRefreshJobResponse)(nil),                        // 28: xmtp.keystore_api.v1.GetRefreshJobResponse
	(*SetRefeshJobRequest)(nil),                          // 29: xmtp.keystore_api.v1.SetRefeshJobRequest
	(*SetRefreshJobResponse)(nil),                        // 30: xmtp.keystore_api.v1.SetRefreshJobResponse
	(*TopicMap)(nil),                                     // 31: xmtp.keystore_api.v1.TopicMap
	(*GetConversationHmacKeysRequest)(nil),               // 32: xmtp.keystore_api.v1.GetConversationHmacKeysRequest
	(*GetConversationHmacKeysResponse)(nil),              // 33: xmtp.keystore_api.v1.GetConversationHmacKeysResponse
	(*PrivatePreferencesActionMap)(nil),                  // 34: xmtp.keystore_api.v1.PrivatePreferencesActionMap
	(*DecryptV1Request_Request)(nil),                     // 35: xmtp.keystore_api.v1.DecryptV1Request.Request
	(*DecryptResponse_Response)(nil),                     // 36: xmtp.keystore_api.v1.DecryptResponse.Response
	(*DecryptResponse_Response_Success)(nil),             // 37: xmtp.keystore_api.v1.DecryptResponse.Response.Success
	(*DecryptV2Request_Request)(nil),                     // 38: xmtp.keystore_api.v1.DecryptV2Request.Request
	(*EncryptV1Request_Request)(nil),                     // 39: xmtp.keystore_api.v1.EncryptV1Request.Request
	(*EncryptResponse_Response)(nil),                     // 40: xmtp.keystore_api.v1.EncryptResponse.Response
	(*EncryptResponse_Response_Success)(nil),             // 41: xmtp.keystore_api.v1.EncryptResponse.Response.Success
	(*EncryptV2Request_Request)(nil),                     // 42: xmtp.keystore_api.v1.EncryptV2Request.Request
	(*SelfEncryptRequest_Request)(nil),                   // 43: xmtp.keystore_api.v1.SelfEncryptRequest.Request
	(*SelfEncryptResponse_Response)(nil),                 // 44: xmtp.keystore_api.v1.SelfEncryptResponse.Response
	(*SelfEncryptResponse_Response_Success)(nil),         // 45: xmtp.keystore_api.v1.SelfEncryptResponse.Response.Success
	(*SelfDecryptRequest_Request)(nil),                   // 46: xmtp.keystore_api.v1.SelfDecryptRequest.Request
	(*SaveInvitesRequest_Request)(nil),                   // 47: xmtp.keystore_api.v1.SaveInvitesRequest.Request
	(*SaveInvitesResponse_Response)(nil),                 // 48: xmtp.keystore_api.v1.SaveInvitesResponse.Response
	(*SaveInvitesResponse_Response_Success)(nil),         // 49: xmtp.keystore_api.v1.SaveInvitesResponse.Response.Success
	(*TopicMap_TopicData)(nil),                           // 50: xmtp.keystore_api.v1.TopicMap.TopicData
	nil,                                                  // 51: xmtp.keystore_api.v1.TopicMap.TopicsEntry
	(*GetConversationHmacKeysResponse_HmacKeyData)(nil),  // 52: xmtp.keystore_api.v1.GetConversationHmacKeysResponse.HmacKeyData
	(*GetConversationHmacKeysResponse_HmacKeys)(nil),     // 53: xmtp.keystore_api.v1.GetConversationHmacKeysResponse.HmacKeys
	nil, // 54: xmtp.keystore_api.v1.GetConversationHmacKeysResponse.HmacKeysEntry
	nil, // 55: xmtp.keystore_api.v1.PrivatePreferencesActionMap.ActionsEntry
	(*message_contents.InvitationV1_Context)(nil),     // 56: xmtp.message_contents.InvitationV1.Context
	(*message_contents.SignedPublicKeyBundle)(nil),    // 57: xmtp.message_contents.SignedPublicKeyBundle
	(*message_contents.ConsentProofPayload)(nil),      // 58: xmtp.message_contents.ConsentProofPayload
	(*message_contents.ConversationReference)(nil),    // 59: xmtp.message_contents.ConversationReference
	(*message_contents.PrivateKeyBundleV1)(nil),       // 60: xmtp.message_contents.PrivateKeyBundleV1
	(*message_contents.Ciphertext)(nil),               // 61: xmtp.message_contents.Ciphertext
	(*message_contents.PublicKeyBundle)(nil),          // 62: xmtp.message_contents.PublicKeyBundle
	(*message_contents.InvitationV1)(nil),             // 63: xmtp.message_contents.InvitationV1
	(*message_contents.PrivatePreferencesAction)(nil), // 64: xmtp.message_contents.PrivatePreferencesAction
}
var file_keystore_api_v1_keystore_proto_depIdxs = []int32{
	0,  // 0: xmtp.keystore_api.v1.KeystoreError.code:type_name -> xmtp.keystore_api.v1.ErrorCode
	35, // 1: xmtp.keystore_api.v1.DecryptV1Request.requests:type_name -> xmtp.keystore_api.v1.DecryptV1Request.Request
	36, // 2: xmtp.keystore_api.v1.DecryptResponse.responses:type_name -> xmtp.keystore_api.v1.DecryptResponse.Response
	38, // 3: xmtp.keystore_api.v1.DecryptV2Request.requests:type_name -> xmtp.keystore_api.v1.DecryptV2Request.Request
	39, // 4: xmtp.keystore_api.v1.EncryptV1Request.requests:type_name -> xmtp.keystore_api.v1.EncryptV1Request.Request
	40, // 5: xmtp.keystore_api.v1.EncryptResponse.responses:type_name -> xmtp.keystore_api.v1.EncryptResponse.Response
	42, // 6: xmtp.keystore_api.v1.EncryptV2Request.requests:type_name -> xmtp.keystore_api.v1.EncryptV2Request.Request
	43, // 7: xmtp.keystore_api.v1.SelfEncryptRequest.requests:type_name -> xmtp.keystore_api.v1.SelfEncryptRequest.Request
	44, // 8: xmtp.keystore_api.v1.SelfEncryptResponse.responses:type_name -> xmtp.keystore_api.v1.SelfEncryptResponse.Response
	46, // 9: xmtp.keystore_api.v1.SelfDecryptRequest.requests:type_name -> xmtp.keystore_api.v1.SelfDecryptRequest.Request
	56, // 10: xmtp.keystore_api.v1.CreateInviteRequest.context:type_name -> xmtp.message_contents.InvitationV1.Context
	57, // 11: xmtp.keystore_api.v1.CreateInviteRequest.recipient:type_name -> xmtp.message_contents.SignedPublicKeyBundle
	58, // 12: xmtp.keystore_api.v1.CreateInviteRequest.consent_proof:type_name -> xmtp.message_contents.ConsentProofPayload
	59, // 13: xmtp.keystore_api.v1.CreateInviteResponse.conversation:type_name -> xmtp.message_contents.ConversationReference
	47, // 14: xmtp.keystore_api.v1.SaveInvitesRequest.requests:type_name -> xmtp.keystore_api.v1.SaveInvitesRequest.Request
	48, // 15: xmtp.keystore_api.v1.SaveInvitesResponse.responses:type_name -> xmtp.keystore_api.v1.SaveInvitesResponse.Response
	59, // 16: xmtp.keystore_api.v1.SaveV1ConversationsRequest.conversations:type_name -> xmtp.message_contents.ConversationReference
	59, // 17: xmtp.keystore_api.v1.GetConversationsResponse.conversations:type_name -> xmtp.message_contents.ConversationReference
	2,  // 18: xmtp.keystore_api.v1.GetKeystoreStatusResponse.status:type_name -> xmtp.keystore_api.v1.GetKeystoreStatusResponse.KeystoreStatus
	60, // 19: xmtp.keystore_api.v1.InitKeystoreRequest.v1:type_name -> xmtp.message_contents.PrivateKeyBundleV1
	3,  // 20: xmtp.keystore_api.v1.InitKeystoreResponse.error:type_name -> xmtp.keystore_api.v1.KeystoreError
	1,  // 21: xmtp.keystore_api.v1.GetRefreshJobRequest.job_type:type_name -> xmtp.keystore_api.v1.JobType
	1,  // 22: xmtp.keystore_api.v1.SetRefeshJobRequest.job_type:type_name -> xmtp.keystore_api.v1.JobType
	51, // 23: xmtp.keystore_api.v1.TopicMap.topics:type_name -> xmtp.keystore_api.v1.TopicMap.TopicsEntry
	54, // 24: xmtp.keystore_api.v1.GetConversationHmacKeysResponse.hmac_keys:type_name -> xmtp.keystore_api.v1.GetConversationHmacKeysResponse.HmacKeysEntry
	55, // 25: xmtp.keystore_api.v1.PrivatePreferencesActionMap.actions:type_name -> xmtp.keystore_api.v1.PrivatePreferencesActionMap.ActionsEntry
	61, // 26: xmtp.keystore_api.v1.DecryptV1Request.Request.payload:type_name -> xmtp.message_contents.Ciphertext
	62, // 27: xmtp.keystore_api.v1.DecryptV1Request.Request.peer_keys:type_name -> xmtp.message_contents.PublicKeyBundle
	37, // 28: xmtp.keystore_api.v1.DecryptResponse.Response.result:type_name -> xmtp.keystore_api.v1.DecryptResponse.Response.Success
	3,  // 29: xmtp.keystore_api.v1.DecryptResponse.Response.error:type_name -> xmtp.keystore_api.v1.KeystoreError
	61, // 30: xmtp.keystore_api.v1.DecryptV2Request.Request.payload:type_name -> xmtp.message_contents.Ciphertext
	62, // 31: xmtp.keystore_api.v1.EncryptV1Request.Request.recipient:type_name -> xmtp.message_contents.PublicKeyBundle
	41, // 32: xmtp.keystore_api.v1.EncryptResponse.Response.result:type_name -> xmtp.keystore_api.v1.EncryptResponse.Response.Success
	3,  // 33: xmtp.keystore_api.v1.EncryptResponse.Response.error:type_name -> xmtp.keystore_api.v1.KeystoreError
	61, // 34: xmtp.keystore_api.v1.EncryptResponse.Response.Success.encrypted:type_name -> xmtp.message_contents.Ciphertext
	45, // 35: xmtp.keystore_api.v1.SelfEncryptResponse.Response.result:type_name -> xmtp.keystore_api.v1.SelfEncryptResponse.Response.Success
	3,  // 36: xmtp.keystore_api.v1.SelfEncryptResponse.Response.error:type_name -> xmtp.keystore_api.v1.KeystoreError
	49, // 37: xmtp.keystore_api.v1.SaveInvitesResponse.Response.result:type_name -> xmtp.keystore_api.v1.SaveInvitesResponse.Response.Success
	3,  // 38: xmtp.keystore_api.v1.SaveInvitesResponse.Response.error:type_name -> xmtp.keystore_api.v1.KeystoreError
	59, // 39: xmtp.keystore_api.v1.SaveInvitesResponse.Response.Success.conversation:type_name -> xmtp.message_contents.ConversationReference
	63, // 40: xmtp.keystore_api.v1.TopicMap.TopicData.invitation:type_name -> xmtp.message_contents.InvitationV1
	50, // 41: xmtp.keystore_api.v1.TopicMap.TopicsEntry.value:type_name -> xmtp.keystore_api.v1.TopicMap.TopicData
	52, // 42: xmtp.keystore_api.v1.GetConversationHmacKeysResponse.HmacKeys.values:type_name -> xmtp.keystore_api.v1.GetConversationHmacKeysResponse.HmacKeyData
	53, // 43: xmtp.keystore_api.v1.GetConversationHmacKeysResponse.HmacKeysEntry.value:type_name -> xmtp.keystore_api.v1.GetConversationHmacKeysResponse.HmacKeys
	64, // 44: xmtp.keystore_api.v1.PrivatePreferencesActionMap.ActionsEntry.value:type_name -> xmtp.message_contents.PrivatePreferencesAction
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_keystore_api_v1_keystore_proto_init() }
func file_keystore_api_v1_keystore_proto_init() {
	if File_keystore_api_v1_keystore_proto != nil {
		return
	}
	file_keystore_api_v1_keystore_proto_msgTypes[15].OneofWrappers = []any{}
	file_keystore_api_v1_keystore_proto_msgTypes[21].OneofWrappers = []any{
		(*InitKeystoreRequest_V1)(nil),
	}
	file_keystore_api_v1_keystore_proto_msgTypes[23].OneofWrappers = []any{
		(*SignDigestRequest_IdentityKey)(nil),
		(*SignDigestRequest_PrekeyIndex)(nil),
	}
	file_keystore_api_v1_keystore_proto_msgTypes[33].OneofWrappers = []any{
		(*DecryptResponse_Response_Result)(nil),
		(*DecryptResponse_Response_Error)(nil),
	}
	file_keystore_api_v1_keystore_proto_msgTypes[37].OneofWrappers = []any{
		(*EncryptResponse_Response_Result)(nil),
		(*EncryptResponse_Response_Error)(nil),
	}
	file_keystore_api_v1_keystore_proto_msgTypes[41].OneofWrappers = []any{
		(*SelfEncryptResponse_Response_Result)(nil),
		(*SelfEncryptResponse_Response_Error)(nil),
	}
	file_keystore_api_v1_keystore_proto_msgTypes[45].OneofWrappers = []any{
		(*SaveInvitesResponse_Response_Result)(nil),
		(*SaveInvitesResponse_Response_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_keystore_api_v1_keystore_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_keystore_api_v1_keystore_proto_goTypes,
		DependencyIndexes: file_keystore_api_v1_keystore_proto_depIdxs,
		EnumInfos:         file_keystore_api_v1_keystore_proto_enumTypes,
		MessageInfos:      file_keystore_api_v1_keystore_proto_msgTypes,
	}.Build()
	File_keystore_api_v1_keystore_proto = out.File
	file_keystore_api_v1_keystore_proto_rawDesc = nil
	file_keystore_api_v1_keystore_proto_goTypes = nil
	file_keystore_api_v1_keystore_proto_depIdxs = nil
}
