// Message API

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: message_api/v1/message_api.proto

package message_apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/xmtp/xmtpd/pkg/proto/message_api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessageApiName is the fully-qualified name of the MessageApi service.
	MessageApiName = "xmtp.message_api.v1.MessageApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageApiPublishProcedure is the fully-qualified name of the MessageApi's Publish RPC.
	MessageApiPublishProcedure = "/xmtp.message_api.v1.MessageApi/Publish"
	// MessageApiSubscribeProcedure is the fully-qualified name of the MessageApi's Subscribe RPC.
	MessageApiSubscribeProcedure = "/xmtp.message_api.v1.MessageApi/Subscribe"
	// MessageApiSubscribe2Procedure is the fully-qualified name of the MessageApi's Subscribe2 RPC.
	MessageApiSubscribe2Procedure = "/xmtp.message_api.v1.MessageApi/Subscribe2"
	// MessageApiSubscribeAllProcedure is the fully-qualified name of the MessageApi's SubscribeAll RPC.
	MessageApiSubscribeAllProcedure = "/xmtp.message_api.v1.MessageApi/SubscribeAll"
	// MessageApiQueryProcedure is the fully-qualified name of the MessageApi's Query RPC.
	MessageApiQueryProcedure = "/xmtp.message_api.v1.MessageApi/Query"
	// MessageApiBatchQueryProcedure is the fully-qualified name of the MessageApi's BatchQuery RPC.
	MessageApiBatchQueryProcedure = "/xmtp.message_api.v1.MessageApi/BatchQuery"
)

// MessageApiClient is a client for the xmtp.message_api.v1.MessageApi service.
type MessageApiClient interface {
	// Publish messages to the network
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error)
	// Subscribe to a stream of new envelopes matching a predicate
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.Envelope], error)
	// Subscribe to a stream of new envelopes and your subscription using
	// bidirectional streaming
	// protolint:disable:next RPC_REQUEST_STANDARD_NAME
	Subscribe2(context.Context) *connect.BidiStreamForClient[v1.SubscribeRequest, v1.Envelope]
	// Subscribe to a stream of all messages
	SubscribeAll(context.Context, *connect.Request[v1.SubscribeAllRequest]) (*connect.ServerStreamForClient[v1.Envelope], error)
	// Query the store for messages
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
	// BatchQuery containing a set of queries to be processed
	BatchQuery(context.Context, *connect.Request[v1.BatchQueryRequest]) (*connect.Response[v1.BatchQueryResponse], error)
}

// NewMessageApiClient constructs a client for the xmtp.message_api.v1.MessageApi service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessageApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	messageApiMethods := v1.File_message_api_v1_message_api_proto.Services().ByName("MessageApi").Methods()
	return &messageApiClient{
		publish: connect.NewClient[v1.PublishRequest, v1.PublishResponse](
			httpClient,
			baseURL+MessageApiPublishProcedure,
			connect.WithSchema(messageApiMethods.ByName("Publish")),
			connect.WithClientOptions(opts...),
		),
		subscribe: connect.NewClient[v1.SubscribeRequest, v1.Envelope](
			httpClient,
			baseURL+MessageApiSubscribeProcedure,
			connect.WithSchema(messageApiMethods.ByName("Subscribe")),
			connect.WithClientOptions(opts...),
		),
		subscribe2: connect.NewClient[v1.SubscribeRequest, v1.Envelope](
			httpClient,
			baseURL+MessageApiSubscribe2Procedure,
			connect.WithSchema(messageApiMethods.ByName("Subscribe2")),
			connect.WithClientOptions(opts...),
		),
		subscribeAll: connect.NewClient[v1.SubscribeAllRequest, v1.Envelope](
			httpClient,
			baseURL+MessageApiSubscribeAllProcedure,
			connect.WithSchema(messageApiMethods.ByName("SubscribeAll")),
			connect.WithClientOptions(opts...),
		),
		query: connect.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+MessageApiQueryProcedure,
			connect.WithSchema(messageApiMethods.ByName("Query")),
			connect.WithClientOptions(opts...),
		),
		batchQuery: connect.NewClient[v1.BatchQueryRequest, v1.BatchQueryResponse](
			httpClient,
			baseURL+MessageApiBatchQueryProcedure,
			connect.WithSchema(messageApiMethods.ByName("BatchQuery")),
			connect.WithClientOptions(opts...),
		),
	}
}

// messageApiClient implements MessageApiClient.
type messageApiClient struct {
	publish      *connect.Client[v1.PublishRequest, v1.PublishResponse]
	subscribe    *connect.Client[v1.SubscribeRequest, v1.Envelope]
	subscribe2   *connect.Client[v1.SubscribeRequest, v1.Envelope]
	subscribeAll *connect.Client[v1.SubscribeAllRequest, v1.Envelope]
	query        *connect.Client[v1.QueryRequest, v1.QueryResponse]
	batchQuery   *connect.Client[v1.BatchQueryRequest, v1.BatchQueryResponse]
}

// Publish calls xmtp.message_api.v1.MessageApi.Publish.
func (c *messageApiClient) Publish(ctx context.Context, req *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error) {
	return c.publish.CallUnary(ctx, req)
}

// Subscribe calls xmtp.message_api.v1.MessageApi.Subscribe.
func (c *messageApiClient) Subscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.Envelope], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// Subscribe2 calls xmtp.message_api.v1.MessageApi.Subscribe2.
func (c *messageApiClient) Subscribe2(ctx context.Context) *connect.BidiStreamForClient[v1.SubscribeRequest, v1.Envelope] {
	return c.subscribe2.CallBidiStream(ctx)
}

// SubscribeAll calls xmtp.message_api.v1.MessageApi.SubscribeAll.
func (c *messageApiClient) SubscribeAll(ctx context.Context, req *connect.Request[v1.SubscribeAllRequest]) (*connect.ServerStreamForClient[v1.Envelope], error) {
	return c.subscribeAll.CallServerStream(ctx, req)
}

// Query calls xmtp.message_api.v1.MessageApi.Query.
func (c *messageApiClient) Query(ctx context.Context, req *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// BatchQuery calls xmtp.message_api.v1.MessageApi.BatchQuery.
func (c *messageApiClient) BatchQuery(ctx context.Context, req *connect.Request[v1.BatchQueryRequest]) (*connect.Response[v1.BatchQueryResponse], error) {
	return c.batchQuery.CallUnary(ctx, req)
}

// MessageApiHandler is an implementation of the xmtp.message_api.v1.MessageApi service.
type MessageApiHandler interface {
	// Publish messages to the network
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error)
	// Subscribe to a stream of new envelopes matching a predicate
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.Envelope]) error
	// Subscribe to a stream of new envelopes and your subscription using
	// bidirectional streaming
	// protolint:disable:next RPC_REQUEST_STANDARD_NAME
	Subscribe2(context.Context, *connect.BidiStream[v1.SubscribeRequest, v1.Envelope]) error
	// Subscribe to a stream of all messages
	SubscribeAll(context.Context, *connect.Request[v1.SubscribeAllRequest], *connect.ServerStream[v1.Envelope]) error
	// Query the store for messages
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
	// BatchQuery containing a set of queries to be processed
	BatchQuery(context.Context, *connect.Request[v1.BatchQueryRequest]) (*connect.Response[v1.BatchQueryResponse], error)
}

// NewMessageApiHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageApiHandler(svc MessageApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messageApiMethods := v1.File_message_api_v1_message_api_proto.Services().ByName("MessageApi").Methods()
	messageApiPublishHandler := connect.NewUnaryHandler(
		MessageApiPublishProcedure,
		svc.Publish,
		connect.WithSchema(messageApiMethods.ByName("Publish")),
		connect.WithHandlerOptions(opts...),
	)
	messageApiSubscribeHandler := connect.NewServerStreamHandler(
		MessageApiSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(messageApiMethods.ByName("Subscribe")),
		connect.WithHandlerOptions(opts...),
	)
	messageApiSubscribe2Handler := connect.NewBidiStreamHandler(
		MessageApiSubscribe2Procedure,
		svc.Subscribe2,
		connect.WithSchema(messageApiMethods.ByName("Subscribe2")),
		connect.WithHandlerOptions(opts...),
	)
	messageApiSubscribeAllHandler := connect.NewServerStreamHandler(
		MessageApiSubscribeAllProcedure,
		svc.SubscribeAll,
		connect.WithSchema(messageApiMethods.ByName("SubscribeAll")),
		connect.WithHandlerOptions(opts...),
	)
	messageApiQueryHandler := connect.NewUnaryHandler(
		MessageApiQueryProcedure,
		svc.Query,
		connect.WithSchema(messageApiMethods.ByName("Query")),
		connect.WithHandlerOptions(opts...),
	)
	messageApiBatchQueryHandler := connect.NewUnaryHandler(
		MessageApiBatchQueryProcedure,
		svc.BatchQuery,
		connect.WithSchema(messageApiMethods.ByName("BatchQuery")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xmtp.message_api.v1.MessageApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageApiPublishProcedure:
			messageApiPublishHandler.ServeHTTP(w, r)
		case MessageApiSubscribeProcedure:
			messageApiSubscribeHandler.ServeHTTP(w, r)
		case MessageApiSubscribe2Procedure:
			messageApiSubscribe2Handler.ServeHTTP(w, r)
		case MessageApiSubscribeAllProcedure:
			messageApiSubscribeAllHandler.ServeHTTP(w, r)
		case MessageApiQueryProcedure:
			messageApiQueryHandler.ServeHTTP(w, r)
		case MessageApiBatchQueryProcedure:
			messageApiBatchQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageApiHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageApiHandler struct{}

func (UnimplementedMessageApiHandler) Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.message_api.v1.MessageApi.Publish is not implemented"))
}

func (UnimplementedMessageApiHandler) Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.Envelope]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.message_api.v1.MessageApi.Subscribe is not implemented"))
}

func (UnimplementedMessageApiHandler) Subscribe2(context.Context, *connect.BidiStream[v1.SubscribeRequest, v1.Envelope]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.message_api.v1.MessageApi.Subscribe2 is not implemented"))
}

func (UnimplementedMessageApiHandler) SubscribeAll(context.Context, *connect.Request[v1.SubscribeAllRequest], *connect.ServerStream[v1.Envelope]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.message_api.v1.MessageApi.SubscribeAll is not implemented"))
}

func (UnimplementedMessageApiHandler) Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.message_api.v1.MessageApi.Query is not implemented"))
}

func (UnimplementedMessageApiHandler) BatchQuery(context.Context, *connect.Request[v1.BatchQueryRequest]) (*connect.Response[v1.BatchQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.message_api.v1.MessageApi.BatchQuery is not implemented"))
}
