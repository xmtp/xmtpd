// Ciphertext is a generic structure for encrypted payload.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: message_contents/ciphertext.proto

package message_contents

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Ciphertext represents encrypted payload.
// It is definited as a union to support cryptographic algorithm agility.
// The payload is accompanied by the cryptographic parameters
// required by the chosen encryption scheme.
type Ciphertext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*Ciphertext_Aes256GcmHkdfSha256
	Union         isCiphertext_Union `protobuf_oneof:"union"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ciphertext) Reset() {
	*x = Ciphertext{}
	mi := &file_message_contents_ciphertext_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ciphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ciphertext) ProtoMessage() {}

func (x *Ciphertext) ProtoReflect() protoreflect.Message {
	mi := &file_message_contents_ciphertext_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ciphertext.ProtoReflect.Descriptor instead.
func (*Ciphertext) Descriptor() ([]byte, []int) {
	return file_message_contents_ciphertext_proto_rawDescGZIP(), []int{0}
}

func (x *Ciphertext) GetUnion() isCiphertext_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *Ciphertext) GetAes256GcmHkdfSha256() *Ciphertext_Aes256GcmHkdfsha256 {
	if x != nil {
		if x, ok := x.Union.(*Ciphertext_Aes256GcmHkdfSha256); ok {
			return x.Aes256GcmHkdfSha256
		}
	}
	return nil
}

type isCiphertext_Union interface {
	isCiphertext_Union()
}

type Ciphertext_Aes256GcmHkdfSha256 struct {
	Aes256GcmHkdfSha256 *Ciphertext_Aes256GcmHkdfsha256 `protobuf:"bytes,1,opt,name=aes256_gcm_hkdf_sha256,json=aes256GcmHkdfSha256,proto3,oneof"`
}

func (*Ciphertext_Aes256GcmHkdfSha256) isCiphertext_Union() {}

// SignedEciesCiphertext represents an ECIES encrypted payload and a signature
type SignedEciesCiphertext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// serialized Ecies message
	EciesBytes []byte `protobuf:"bytes,1,opt,name=ecies_bytes,json=eciesBytes,proto3" json:"ecies_bytes,omitempty"`
	// signature of sha256(ecies_bytes) signed with the IdentityKey
	Signature     *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedEciesCiphertext) Reset() {
	*x = SignedEciesCiphertext{}
	mi := &file_message_contents_ciphertext_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedEciesCiphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedEciesCiphertext) ProtoMessage() {}

func (x *SignedEciesCiphertext) ProtoReflect() protoreflect.Message {
	mi := &file_message_contents_ciphertext_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedEciesCiphertext.ProtoReflect.Descriptor instead.
func (*SignedEciesCiphertext) Descriptor() ([]byte, []int) {
	return file_message_contents_ciphertext_proto_rawDescGZIP(), []int{1}
}

func (x *SignedEciesCiphertext) GetEciesBytes() []byte {
	if x != nil {
		return x.EciesBytes
	}
	return nil
}

func (x *SignedEciesCiphertext) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Encryption: AES256-GCM
// Key derivation function: HKDF-SHA256
type Ciphertext_Aes256GcmHkdfsha256 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HkdfSalt      []byte                 `protobuf:"bytes,1,opt,name=hkdf_salt,json=hkdfSalt,proto3" json:"hkdf_salt,omitempty"` // 32 bytes
	GcmNonce      []byte                 `protobuf:"bytes,2,opt,name=gcm_nonce,json=gcmNonce,proto3" json:"gcm_nonce,omitempty"` // 12 bytes
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                   // encrypted payload
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ciphertext_Aes256GcmHkdfsha256) Reset() {
	*x = Ciphertext_Aes256GcmHkdfsha256{}
	mi := &file_message_contents_ciphertext_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ciphertext_Aes256GcmHkdfsha256) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ciphertext_Aes256GcmHkdfsha256) ProtoMessage() {}

func (x *Ciphertext_Aes256GcmHkdfsha256) ProtoReflect() protoreflect.Message {
	mi := &file_message_contents_ciphertext_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ciphertext_Aes256GcmHkdfsha256.ProtoReflect.Descriptor instead.
func (*Ciphertext_Aes256GcmHkdfsha256) Descriptor() ([]byte, []int) {
	return file_message_contents_ciphertext_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ciphertext_Aes256GcmHkdfsha256) GetHkdfSalt() []byte {
	if x != nil {
		return x.HkdfSalt
	}
	return nil
}

func (x *Ciphertext_Aes256GcmHkdfsha256) GetGcmNonce() []byte {
	if x != nil {
		return x.GcmNonce
	}
	return nil
}

func (x *Ciphertext_Aes256GcmHkdfsha256) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Ecies is ciphertext encrypted using ECIES with a MAC
type SignedEciesCiphertext_Ecies struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	EphemeralPublicKey []byte                 `protobuf:"bytes,1,opt,name=ephemeral_public_key,json=ephemeralPublicKey,proto3" json:"ephemeral_public_key,omitempty"` // 65 bytes
	Iv                 []byte                 `protobuf:"bytes,2,opt,name=iv,proto3" json:"iv,omitempty"`                                                             // 16 bytes
	Mac                []byte                 `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`                                                           // 32 bytes
	Ciphertext         []byte                 `protobuf:"bytes,4,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`                                             // encrypted payload with block size of 16
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SignedEciesCiphertext_Ecies) Reset() {
	*x = SignedEciesCiphertext_Ecies{}
	mi := &file_message_contents_ciphertext_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedEciesCiphertext_Ecies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedEciesCiphertext_Ecies) ProtoMessage() {}

func (x *SignedEciesCiphertext_Ecies) ProtoReflect() protoreflect.Message {
	mi := &file_message_contents_ciphertext_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedEciesCiphertext_Ecies.ProtoReflect.Descriptor instead.
func (*SignedEciesCiphertext_Ecies) Descriptor() ([]byte, []int) {
	return file_message_contents_ciphertext_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SignedEciesCiphertext_Ecies) GetEphemeralPublicKey() []byte {
	if x != nil {
		return x.EphemeralPublicKey
	}
	return nil
}

func (x *SignedEciesCiphertext_Ecies) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *SignedEciesCiphertext_Ecies) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *SignedEciesCiphertext_Ecies) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

var File_message_contents_ciphertext_proto protoreflect.FileDescriptor

const file_message_contents_ciphertext_proto_rawDesc = "" +
	"\n" +
	"!message_contents/ciphertext.proto\x12\x15xmtp.message_contents\x1a message_contents/signature.proto\"\xee\x01\n" +
	"\n" +
	"Ciphertext\x12l\n" +
	"\x16aes256_gcm_hkdf_sha256\x18\x01 \x01(\v25.xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256H\x00R\x13aes256GcmHkdfSha256\x1ai\n" +
	"\x13Aes256gcmHkdfsha256\x12\x1b\n" +
	"\thkdf_salt\x18\x01 \x01(\fR\bhkdfSalt\x12\x1b\n" +
	"\tgcm_nonce\x18\x02 \x01(\fR\bgcmNonce\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayloadB\a\n" +
	"\x05union\"\xf5\x01\n" +
	"\x15SignedEciesCiphertext\x12\x1f\n" +
	"\vecies_bytes\x18\x01 \x01(\fR\n" +
	"eciesBytes\x12>\n" +
	"\tsignature\x18\x02 \x01(\v2 .xmtp.message_contents.SignatureR\tsignature\x1a{\n" +
	"\x05Ecies\x120\n" +
	"\x14ephemeral_public_key\x18\x01 \x01(\fR\x12ephemeralPublicKey\x12\x0e\n" +
	"\x02iv\x18\x02 \x01(\fR\x02iv\x12\x10\n" +
	"\x03mac\x18\x03 \x01(\fR\x03mac\x12\x1e\n" +
	"\n" +
	"ciphertext\x18\x04 \x01(\fR\n" +
	"ciphertextB\xcf\x01\n" +
	"\x19com.xmtp.message_contentsB\x0fCiphertextProtoP\x01Z0github.com/xmtp/xmtpd/pkg/proto/message_contents\xa2\x02\x03XMX\xaa\x02\x14Xmtp.MessageContents\xca\x02\x14Xmtp\\MessageContents\xe2\x02 Xmtp\\MessageContents\\GPBMetadata\xea\x02\x15Xmtp::MessageContentsb\x06proto3"

var (
	file_message_contents_ciphertext_proto_rawDescOnce sync.Once
	file_message_contents_ciphertext_proto_rawDescData []byte
)

func file_message_contents_ciphertext_proto_rawDescGZIP() []byte {
	file_message_contents_ciphertext_proto_rawDescOnce.Do(func() {
		file_message_contents_ciphertext_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_message_contents_ciphertext_proto_rawDesc), len(file_message_contents_ciphertext_proto_rawDesc)))
	})
	return file_message_contents_ciphertext_proto_rawDescData
}

var file_message_contents_ciphertext_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_message_contents_ciphertext_proto_goTypes = []any{
	(*Ciphertext)(nil),                     // 0: xmtp.message_contents.Ciphertext
	(*SignedEciesCiphertext)(nil),          // 1: xmtp.message_contents.SignedEciesCiphertext
	(*Ciphertext_Aes256GcmHkdfsha256)(nil), // 2: xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256
	(*SignedEciesCiphertext_Ecies)(nil),    // 3: xmtp.message_contents.SignedEciesCiphertext.Ecies
	(*Signature)(nil),                      // 4: xmtp.message_contents.Signature
}
var file_message_contents_ciphertext_proto_depIdxs = []int32{
	2, // 0: xmtp.message_contents.Ciphertext.aes256_gcm_hkdf_sha256:type_name -> xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256
	4, // 1: xmtp.message_contents.SignedEciesCiphertext.signature:type_name -> xmtp.message_contents.Signature
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_message_contents_ciphertext_proto_init() }
func file_message_contents_ciphertext_proto_init() {
	if File_message_contents_ciphertext_proto != nil {
		return
	}
	file_message_contents_signature_proto_init()
	file_message_contents_ciphertext_proto_msgTypes[0].OneofWrappers = []any{
		(*Ciphertext_Aes256GcmHkdfSha256)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_message_contents_ciphertext_proto_rawDesc), len(file_message_contents_ciphertext_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_contents_ciphertext_proto_goTypes,
		DependencyIndexes: file_message_contents_ciphertext_proto_depIdxs,
		MessageInfos:      file_message_contents_ciphertext_proto_msgTypes,
	}.Build()
	File_message_contents_ciphertext_proto = out.File
	file_message_contents_ciphertext_proto_goTypes = nil
	file_message_contents_ciphertext_proto_depIdxs = nil
}
