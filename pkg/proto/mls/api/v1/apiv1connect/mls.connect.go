// Message API

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mls/api/v1/mls.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/xmtp/xmtpd/pkg/proto/mls/api/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MlsApiName is the fully-qualified name of the MlsApi service.
	MlsApiName = "xmtp.mls.api.v1.MlsApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MlsApiSendGroupMessagesProcedure is the fully-qualified name of the MlsApi's SendGroupMessages
	// RPC.
	MlsApiSendGroupMessagesProcedure = "/xmtp.mls.api.v1.MlsApi/SendGroupMessages"
	// MlsApiSendWelcomeMessagesProcedure is the fully-qualified name of the MlsApi's
	// SendWelcomeMessages RPC.
	MlsApiSendWelcomeMessagesProcedure = "/xmtp.mls.api.v1.MlsApi/SendWelcomeMessages"
	// MlsApiRegisterInstallationProcedure is the fully-qualified name of the MlsApi's
	// RegisterInstallation RPC.
	MlsApiRegisterInstallationProcedure = "/xmtp.mls.api.v1.MlsApi/RegisterInstallation"
	// MlsApiUploadKeyPackageProcedure is the fully-qualified name of the MlsApi's UploadKeyPackage RPC.
	MlsApiUploadKeyPackageProcedure = "/xmtp.mls.api.v1.MlsApi/UploadKeyPackage"
	// MlsApiFetchKeyPackagesProcedure is the fully-qualified name of the MlsApi's FetchKeyPackages RPC.
	MlsApiFetchKeyPackagesProcedure = "/xmtp.mls.api.v1.MlsApi/FetchKeyPackages"
	// MlsApiRevokeInstallationProcedure is the fully-qualified name of the MlsApi's RevokeInstallation
	// RPC.
	MlsApiRevokeInstallationProcedure = "/xmtp.mls.api.v1.MlsApi/RevokeInstallation"
	// MlsApiGetIdentityUpdatesProcedure is the fully-qualified name of the MlsApi's GetIdentityUpdates
	// RPC.
	MlsApiGetIdentityUpdatesProcedure = "/xmtp.mls.api.v1.MlsApi/GetIdentityUpdates"
	// MlsApiQueryGroupMessagesProcedure is the fully-qualified name of the MlsApi's QueryGroupMessages
	// RPC.
	MlsApiQueryGroupMessagesProcedure = "/xmtp.mls.api.v1.MlsApi/QueryGroupMessages"
	// MlsApiQueryWelcomeMessagesProcedure is the fully-qualified name of the MlsApi's
	// QueryWelcomeMessages RPC.
	MlsApiQueryWelcomeMessagesProcedure = "/xmtp.mls.api.v1.MlsApi/QueryWelcomeMessages"
	// MlsApiSubscribeGroupMessagesProcedure is the fully-qualified name of the MlsApi's
	// SubscribeGroupMessages RPC.
	MlsApiSubscribeGroupMessagesProcedure = "/xmtp.mls.api.v1.MlsApi/SubscribeGroupMessages"
	// MlsApiSubscribeWelcomeMessagesProcedure is the fully-qualified name of the MlsApi's
	// SubscribeWelcomeMessages RPC.
	MlsApiSubscribeWelcomeMessagesProcedure = "/xmtp.mls.api.v1.MlsApi/SubscribeWelcomeMessages"
	// MlsApiBatchPublishCommitLogProcedure is the fully-qualified name of the MlsApi's
	// BatchPublishCommitLog RPC.
	MlsApiBatchPublishCommitLogProcedure = "/xmtp.mls.api.v1.MlsApi/BatchPublishCommitLog"
	// MlsApiBatchQueryCommitLogProcedure is the fully-qualified name of the MlsApi's
	// BatchQueryCommitLog RPC.
	MlsApiBatchQueryCommitLogProcedure = "/xmtp.mls.api.v1.MlsApi/BatchQueryCommitLog"
	// MlsApiGetNewestGroupMessageProcedure is the fully-qualified name of the MlsApi's
	// GetNewestGroupMessage RPC.
	MlsApiGetNewestGroupMessageProcedure = "/xmtp.mls.api.v1.MlsApi/GetNewestGroupMessage"
)

// MlsApiClient is a client for the xmtp.mls.api.v1.MlsApi service.
type MlsApiClient interface {
	// Send a MLS payload, that would be validated before being stored to the
	// network
	SendGroupMessages(context.Context, *connect.Request[v1.SendGroupMessagesRequest]) (*connect.Response[emptypb.Empty], error)
	// Send a batch of welcome messages
	SendWelcomeMessages(context.Context, *connect.Request[v1.SendWelcomeMessagesRequest]) (*connect.Response[emptypb.Empty], error)
	// Register a new installation, which would be validated before storage
	RegisterInstallation(context.Context, *connect.Request[v1.RegisterInstallationRequest]) (*connect.Response[v1.RegisterInstallationResponse], error)
	// Upload a new KeyPackage, which would be validated before storage
	UploadKeyPackage(context.Context, *connect.Request[v1.UploadKeyPackageRequest]) (*connect.Response[emptypb.Empty], error)
	// Get one or more Key Packages by installation_id
	FetchKeyPackages(context.Context, *connect.Request[v1.FetchKeyPackagesRequest]) (*connect.Response[v1.FetchKeyPackagesResponse], error)
	// Would delete all key packages associated with the installation and mark
	// the installation as having been revoked
	RevokeInstallation(context.Context, *connect.Request[v1.RevokeInstallationRequest]) (*connect.Response[emptypb.Empty], error)
	// Used to check for changes related to members of a group.
	// Would return an array of any new installations associated with the wallet
	// address, and any revocations that have happened.
	GetIdentityUpdates(context.Context, *connect.Request[v1.GetIdentityUpdatesRequest]) (*connect.Response[v1.GetIdentityUpdatesResponse], error)
	// Query stored group messages
	QueryGroupMessages(context.Context, *connect.Request[v1.QueryGroupMessagesRequest]) (*connect.Response[v1.QueryGroupMessagesResponse], error)
	// Query stored group messages
	QueryWelcomeMessages(context.Context, *connect.Request[v1.QueryWelcomeMessagesRequest]) (*connect.Response[v1.QueryWelcomeMessagesResponse], error)
	// Subscribe stream of new group messages
	SubscribeGroupMessages(context.Context, *connect.Request[v1.SubscribeGroupMessagesRequest]) (*connect.ServerStreamForClient[v1.GroupMessage], error)
	// Subscribe stream of new welcome messages
	SubscribeWelcomeMessages(context.Context, *connect.Request[v1.SubscribeWelcomeMessagesRequest]) (*connect.ServerStreamForClient[v1.WelcomeMessage], error)
	BatchPublishCommitLog(context.Context, *connect.Request[v1.BatchPublishCommitLogRequest]) (*connect.Response[emptypb.Empty], error)
	BatchQueryCommitLog(context.Context, *connect.Request[v1.BatchQueryCommitLogRequest]) (*connect.Response[v1.BatchQueryCommitLogResponse], error)
	GetNewestGroupMessage(context.Context, *connect.Request[v1.GetNewestGroupMessageRequest]) (*connect.Response[v1.GetNewestGroupMessageResponse], error)
}

// NewMlsApiClient constructs a client for the xmtp.mls.api.v1.MlsApi service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMlsApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MlsApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mlsApiMethods := v1.File_mls_api_v1_mls_proto.Services().ByName("MlsApi").Methods()
	return &mlsApiClient{
		sendGroupMessages: connect.NewClient[v1.SendGroupMessagesRequest, emptypb.Empty](
			httpClient,
			baseURL+MlsApiSendGroupMessagesProcedure,
			connect.WithSchema(mlsApiMethods.ByName("SendGroupMessages")),
			connect.WithClientOptions(opts...),
		),
		sendWelcomeMessages: connect.NewClient[v1.SendWelcomeMessagesRequest, emptypb.Empty](
			httpClient,
			baseURL+MlsApiSendWelcomeMessagesProcedure,
			connect.WithSchema(mlsApiMethods.ByName("SendWelcomeMessages")),
			connect.WithClientOptions(opts...),
		),
		registerInstallation: connect.NewClient[v1.RegisterInstallationRequest, v1.RegisterInstallationResponse](
			httpClient,
			baseURL+MlsApiRegisterInstallationProcedure,
			connect.WithSchema(mlsApiMethods.ByName("RegisterInstallation")),
			connect.WithClientOptions(opts...),
		),
		uploadKeyPackage: connect.NewClient[v1.UploadKeyPackageRequest, emptypb.Empty](
			httpClient,
			baseURL+MlsApiUploadKeyPackageProcedure,
			connect.WithSchema(mlsApiMethods.ByName("UploadKeyPackage")),
			connect.WithClientOptions(opts...),
		),
		fetchKeyPackages: connect.NewClient[v1.FetchKeyPackagesRequest, v1.FetchKeyPackagesResponse](
			httpClient,
			baseURL+MlsApiFetchKeyPackagesProcedure,
			connect.WithSchema(mlsApiMethods.ByName("FetchKeyPackages")),
			connect.WithClientOptions(opts...),
		),
		revokeInstallation: connect.NewClient[v1.RevokeInstallationRequest, emptypb.Empty](
			httpClient,
			baseURL+MlsApiRevokeInstallationProcedure,
			connect.WithSchema(mlsApiMethods.ByName("RevokeInstallation")),
			connect.WithClientOptions(opts...),
		),
		getIdentityUpdates: connect.NewClient[v1.GetIdentityUpdatesRequest, v1.GetIdentityUpdatesResponse](
			httpClient,
			baseURL+MlsApiGetIdentityUpdatesProcedure,
			connect.WithSchema(mlsApiMethods.ByName("GetIdentityUpdates")),
			connect.WithClientOptions(opts...),
		),
		queryGroupMessages: connect.NewClient[v1.QueryGroupMessagesRequest, v1.QueryGroupMessagesResponse](
			httpClient,
			baseURL+MlsApiQueryGroupMessagesProcedure,
			connect.WithSchema(mlsApiMethods.ByName("QueryGroupMessages")),
			connect.WithClientOptions(opts...),
		),
		queryWelcomeMessages: connect.NewClient[v1.QueryWelcomeMessagesRequest, v1.QueryWelcomeMessagesResponse](
			httpClient,
			baseURL+MlsApiQueryWelcomeMessagesProcedure,
			connect.WithSchema(mlsApiMethods.ByName("QueryWelcomeMessages")),
			connect.WithClientOptions(opts...),
		),
		subscribeGroupMessages: connect.NewClient[v1.SubscribeGroupMessagesRequest, v1.GroupMessage](
			httpClient,
			baseURL+MlsApiSubscribeGroupMessagesProcedure,
			connect.WithSchema(mlsApiMethods.ByName("SubscribeGroupMessages")),
			connect.WithClientOptions(opts...),
		),
		subscribeWelcomeMessages: connect.NewClient[v1.SubscribeWelcomeMessagesRequest, v1.WelcomeMessage](
			httpClient,
			baseURL+MlsApiSubscribeWelcomeMessagesProcedure,
			connect.WithSchema(mlsApiMethods.ByName("SubscribeWelcomeMessages")),
			connect.WithClientOptions(opts...),
		),
		batchPublishCommitLog: connect.NewClient[v1.BatchPublishCommitLogRequest, emptypb.Empty](
			httpClient,
			baseURL+MlsApiBatchPublishCommitLogProcedure,
			connect.WithSchema(mlsApiMethods.ByName("BatchPublishCommitLog")),
			connect.WithClientOptions(opts...),
		),
		batchQueryCommitLog: connect.NewClient[v1.BatchQueryCommitLogRequest, v1.BatchQueryCommitLogResponse](
			httpClient,
			baseURL+MlsApiBatchQueryCommitLogProcedure,
			connect.WithSchema(mlsApiMethods.ByName("BatchQueryCommitLog")),
			connect.WithClientOptions(opts...),
		),
		getNewestGroupMessage: connect.NewClient[v1.GetNewestGroupMessageRequest, v1.GetNewestGroupMessageResponse](
			httpClient,
			baseURL+MlsApiGetNewestGroupMessageProcedure,
			connect.WithSchema(mlsApiMethods.ByName("GetNewestGroupMessage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mlsApiClient implements MlsApiClient.
type mlsApiClient struct {
	sendGroupMessages        *connect.Client[v1.SendGroupMessagesRequest, emptypb.Empty]
	sendWelcomeMessages      *connect.Client[v1.SendWelcomeMessagesRequest, emptypb.Empty]
	registerInstallation     *connect.Client[v1.RegisterInstallationRequest, v1.RegisterInstallationResponse]
	uploadKeyPackage         *connect.Client[v1.UploadKeyPackageRequest, emptypb.Empty]
	fetchKeyPackages         *connect.Client[v1.FetchKeyPackagesRequest, v1.FetchKeyPackagesResponse]
	revokeInstallation       *connect.Client[v1.RevokeInstallationRequest, emptypb.Empty]
	getIdentityUpdates       *connect.Client[v1.GetIdentityUpdatesRequest, v1.GetIdentityUpdatesResponse]
	queryGroupMessages       *connect.Client[v1.QueryGroupMessagesRequest, v1.QueryGroupMessagesResponse]
	queryWelcomeMessages     *connect.Client[v1.QueryWelcomeMessagesRequest, v1.QueryWelcomeMessagesResponse]
	subscribeGroupMessages   *connect.Client[v1.SubscribeGroupMessagesRequest, v1.GroupMessage]
	subscribeWelcomeMessages *connect.Client[v1.SubscribeWelcomeMessagesRequest, v1.WelcomeMessage]
	batchPublishCommitLog    *connect.Client[v1.BatchPublishCommitLogRequest, emptypb.Empty]
	batchQueryCommitLog      *connect.Client[v1.BatchQueryCommitLogRequest, v1.BatchQueryCommitLogResponse]
	getNewestGroupMessage    *connect.Client[v1.GetNewestGroupMessageRequest, v1.GetNewestGroupMessageResponse]
}

// SendGroupMessages calls xmtp.mls.api.v1.MlsApi.SendGroupMessages.
func (c *mlsApiClient) SendGroupMessages(ctx context.Context, req *connect.Request[v1.SendGroupMessagesRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.sendGroupMessages.CallUnary(ctx, req)
}

// SendWelcomeMessages calls xmtp.mls.api.v1.MlsApi.SendWelcomeMessages.
func (c *mlsApiClient) SendWelcomeMessages(ctx context.Context, req *connect.Request[v1.SendWelcomeMessagesRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.sendWelcomeMessages.CallUnary(ctx, req)
}

// RegisterInstallation calls xmtp.mls.api.v1.MlsApi.RegisterInstallation.
func (c *mlsApiClient) RegisterInstallation(ctx context.Context, req *connect.Request[v1.RegisterInstallationRequest]) (*connect.Response[v1.RegisterInstallationResponse], error) {
	return c.registerInstallation.CallUnary(ctx, req)
}

// UploadKeyPackage calls xmtp.mls.api.v1.MlsApi.UploadKeyPackage.
func (c *mlsApiClient) UploadKeyPackage(ctx context.Context, req *connect.Request[v1.UploadKeyPackageRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.uploadKeyPackage.CallUnary(ctx, req)
}

// FetchKeyPackages calls xmtp.mls.api.v1.MlsApi.FetchKeyPackages.
func (c *mlsApiClient) FetchKeyPackages(ctx context.Context, req *connect.Request[v1.FetchKeyPackagesRequest]) (*connect.Response[v1.FetchKeyPackagesResponse], error) {
	return c.fetchKeyPackages.CallUnary(ctx, req)
}

// RevokeInstallation calls xmtp.mls.api.v1.MlsApi.RevokeInstallation.
func (c *mlsApiClient) RevokeInstallation(ctx context.Context, req *connect.Request[v1.RevokeInstallationRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.revokeInstallation.CallUnary(ctx, req)
}

// GetIdentityUpdates calls xmtp.mls.api.v1.MlsApi.GetIdentityUpdates.
func (c *mlsApiClient) GetIdentityUpdates(ctx context.Context, req *connect.Request[v1.GetIdentityUpdatesRequest]) (*connect.Response[v1.GetIdentityUpdatesResponse], error) {
	return c.getIdentityUpdates.CallUnary(ctx, req)
}

// QueryGroupMessages calls xmtp.mls.api.v1.MlsApi.QueryGroupMessages.
func (c *mlsApiClient) QueryGroupMessages(ctx context.Context, req *connect.Request[v1.QueryGroupMessagesRequest]) (*connect.Response[v1.QueryGroupMessagesResponse], error) {
	return c.queryGroupMessages.CallUnary(ctx, req)
}

// QueryWelcomeMessages calls xmtp.mls.api.v1.MlsApi.QueryWelcomeMessages.
func (c *mlsApiClient) QueryWelcomeMessages(ctx context.Context, req *connect.Request[v1.QueryWelcomeMessagesRequest]) (*connect.Response[v1.QueryWelcomeMessagesResponse], error) {
	return c.queryWelcomeMessages.CallUnary(ctx, req)
}

// SubscribeGroupMessages calls xmtp.mls.api.v1.MlsApi.SubscribeGroupMessages.
func (c *mlsApiClient) SubscribeGroupMessages(ctx context.Context, req *connect.Request[v1.SubscribeGroupMessagesRequest]) (*connect.ServerStreamForClient[v1.GroupMessage], error) {
	return c.subscribeGroupMessages.CallServerStream(ctx, req)
}

// SubscribeWelcomeMessages calls xmtp.mls.api.v1.MlsApi.SubscribeWelcomeMessages.
func (c *mlsApiClient) SubscribeWelcomeMessages(ctx context.Context, req *connect.Request[v1.SubscribeWelcomeMessagesRequest]) (*connect.ServerStreamForClient[v1.WelcomeMessage], error) {
	return c.subscribeWelcomeMessages.CallServerStream(ctx, req)
}

// BatchPublishCommitLog calls xmtp.mls.api.v1.MlsApi.BatchPublishCommitLog.
func (c *mlsApiClient) BatchPublishCommitLog(ctx context.Context, req *connect.Request[v1.BatchPublishCommitLogRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.batchPublishCommitLog.CallUnary(ctx, req)
}

// BatchQueryCommitLog calls xmtp.mls.api.v1.MlsApi.BatchQueryCommitLog.
func (c *mlsApiClient) BatchQueryCommitLog(ctx context.Context, req *connect.Request[v1.BatchQueryCommitLogRequest]) (*connect.Response[v1.BatchQueryCommitLogResponse], error) {
	return c.batchQueryCommitLog.CallUnary(ctx, req)
}

// GetNewestGroupMessage calls xmtp.mls.api.v1.MlsApi.GetNewestGroupMessage.
func (c *mlsApiClient) GetNewestGroupMessage(ctx context.Context, req *connect.Request[v1.GetNewestGroupMessageRequest]) (*connect.Response[v1.GetNewestGroupMessageResponse], error) {
	return c.getNewestGroupMessage.CallUnary(ctx, req)
}

// MlsApiHandler is an implementation of the xmtp.mls.api.v1.MlsApi service.
type MlsApiHandler interface {
	// Send a MLS payload, that would be validated before being stored to the
	// network
	SendGroupMessages(context.Context, *connect.Request[v1.SendGroupMessagesRequest]) (*connect.Response[emptypb.Empty], error)
	// Send a batch of welcome messages
	SendWelcomeMessages(context.Context, *connect.Request[v1.SendWelcomeMessagesRequest]) (*connect.Response[emptypb.Empty], error)
	// Register a new installation, which would be validated before storage
	RegisterInstallation(context.Context, *connect.Request[v1.RegisterInstallationRequest]) (*connect.Response[v1.RegisterInstallationResponse], error)
	// Upload a new KeyPackage, which would be validated before storage
	UploadKeyPackage(context.Context, *connect.Request[v1.UploadKeyPackageRequest]) (*connect.Response[emptypb.Empty], error)
	// Get one or more Key Packages by installation_id
	FetchKeyPackages(context.Context, *connect.Request[v1.FetchKeyPackagesRequest]) (*connect.Response[v1.FetchKeyPackagesResponse], error)
	// Would delete all key packages associated with the installation and mark
	// the installation as having been revoked
	RevokeInstallation(context.Context, *connect.Request[v1.RevokeInstallationRequest]) (*connect.Response[emptypb.Empty], error)
	// Used to check for changes related to members of a group.
	// Would return an array of any new installations associated with the wallet
	// address, and any revocations that have happened.
	GetIdentityUpdates(context.Context, *connect.Request[v1.GetIdentityUpdatesRequest]) (*connect.Response[v1.GetIdentityUpdatesResponse], error)
	// Query stored group messages
	QueryGroupMessages(context.Context, *connect.Request[v1.QueryGroupMessagesRequest]) (*connect.Response[v1.QueryGroupMessagesResponse], error)
	// Query stored group messages
	QueryWelcomeMessages(context.Context, *connect.Request[v1.QueryWelcomeMessagesRequest]) (*connect.Response[v1.QueryWelcomeMessagesResponse], error)
	// Subscribe stream of new group messages
	SubscribeGroupMessages(context.Context, *connect.Request[v1.SubscribeGroupMessagesRequest], *connect.ServerStream[v1.GroupMessage]) error
	// Subscribe stream of new welcome messages
	SubscribeWelcomeMessages(context.Context, *connect.Request[v1.SubscribeWelcomeMessagesRequest], *connect.ServerStream[v1.WelcomeMessage]) error
	BatchPublishCommitLog(context.Context, *connect.Request[v1.BatchPublishCommitLogRequest]) (*connect.Response[emptypb.Empty], error)
	BatchQueryCommitLog(context.Context, *connect.Request[v1.BatchQueryCommitLogRequest]) (*connect.Response[v1.BatchQueryCommitLogResponse], error)
	GetNewestGroupMessage(context.Context, *connect.Request[v1.GetNewestGroupMessageRequest]) (*connect.Response[v1.GetNewestGroupMessageResponse], error)
}

// NewMlsApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMlsApiHandler(svc MlsApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mlsApiMethods := v1.File_mls_api_v1_mls_proto.Services().ByName("MlsApi").Methods()
	mlsApiSendGroupMessagesHandler := connect.NewUnaryHandler(
		MlsApiSendGroupMessagesProcedure,
		svc.SendGroupMessages,
		connect.WithSchema(mlsApiMethods.ByName("SendGroupMessages")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiSendWelcomeMessagesHandler := connect.NewUnaryHandler(
		MlsApiSendWelcomeMessagesProcedure,
		svc.SendWelcomeMessages,
		connect.WithSchema(mlsApiMethods.ByName("SendWelcomeMessages")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiRegisterInstallationHandler := connect.NewUnaryHandler(
		MlsApiRegisterInstallationProcedure,
		svc.RegisterInstallation,
		connect.WithSchema(mlsApiMethods.ByName("RegisterInstallation")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiUploadKeyPackageHandler := connect.NewUnaryHandler(
		MlsApiUploadKeyPackageProcedure,
		svc.UploadKeyPackage,
		connect.WithSchema(mlsApiMethods.ByName("UploadKeyPackage")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiFetchKeyPackagesHandler := connect.NewUnaryHandler(
		MlsApiFetchKeyPackagesProcedure,
		svc.FetchKeyPackages,
		connect.WithSchema(mlsApiMethods.ByName("FetchKeyPackages")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiRevokeInstallationHandler := connect.NewUnaryHandler(
		MlsApiRevokeInstallationProcedure,
		svc.RevokeInstallation,
		connect.WithSchema(mlsApiMethods.ByName("RevokeInstallation")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiGetIdentityUpdatesHandler := connect.NewUnaryHandler(
		MlsApiGetIdentityUpdatesProcedure,
		svc.GetIdentityUpdates,
		connect.WithSchema(mlsApiMethods.ByName("GetIdentityUpdates")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiQueryGroupMessagesHandler := connect.NewUnaryHandler(
		MlsApiQueryGroupMessagesProcedure,
		svc.QueryGroupMessages,
		connect.WithSchema(mlsApiMethods.ByName("QueryGroupMessages")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiQueryWelcomeMessagesHandler := connect.NewUnaryHandler(
		MlsApiQueryWelcomeMessagesProcedure,
		svc.QueryWelcomeMessages,
		connect.WithSchema(mlsApiMethods.ByName("QueryWelcomeMessages")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiSubscribeGroupMessagesHandler := connect.NewServerStreamHandler(
		MlsApiSubscribeGroupMessagesProcedure,
		svc.SubscribeGroupMessages,
		connect.WithSchema(mlsApiMethods.ByName("SubscribeGroupMessages")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiSubscribeWelcomeMessagesHandler := connect.NewServerStreamHandler(
		MlsApiSubscribeWelcomeMessagesProcedure,
		svc.SubscribeWelcomeMessages,
		connect.WithSchema(mlsApiMethods.ByName("SubscribeWelcomeMessages")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiBatchPublishCommitLogHandler := connect.NewUnaryHandler(
		MlsApiBatchPublishCommitLogProcedure,
		svc.BatchPublishCommitLog,
		connect.WithSchema(mlsApiMethods.ByName("BatchPublishCommitLog")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiBatchQueryCommitLogHandler := connect.NewUnaryHandler(
		MlsApiBatchQueryCommitLogProcedure,
		svc.BatchQueryCommitLog,
		connect.WithSchema(mlsApiMethods.ByName("BatchQueryCommitLog")),
		connect.WithHandlerOptions(opts...),
	)
	mlsApiGetNewestGroupMessageHandler := connect.NewUnaryHandler(
		MlsApiGetNewestGroupMessageProcedure,
		svc.GetNewestGroupMessage,
		connect.WithSchema(mlsApiMethods.ByName("GetNewestGroupMessage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xmtp.mls.api.v1.MlsApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MlsApiSendGroupMessagesProcedure:
			mlsApiSendGroupMessagesHandler.ServeHTTP(w, r)
		case MlsApiSendWelcomeMessagesProcedure:
			mlsApiSendWelcomeMessagesHandler.ServeHTTP(w, r)
		case MlsApiRegisterInstallationProcedure:
			mlsApiRegisterInstallationHandler.ServeHTTP(w, r)
		case MlsApiUploadKeyPackageProcedure:
			mlsApiUploadKeyPackageHandler.ServeHTTP(w, r)
		case MlsApiFetchKeyPackagesProcedure:
			mlsApiFetchKeyPackagesHandler.ServeHTTP(w, r)
		case MlsApiRevokeInstallationProcedure:
			mlsApiRevokeInstallationHandler.ServeHTTP(w, r)
		case MlsApiGetIdentityUpdatesProcedure:
			mlsApiGetIdentityUpdatesHandler.ServeHTTP(w, r)
		case MlsApiQueryGroupMessagesProcedure:
			mlsApiQueryGroupMessagesHandler.ServeHTTP(w, r)
		case MlsApiQueryWelcomeMessagesProcedure:
			mlsApiQueryWelcomeMessagesHandler.ServeHTTP(w, r)
		case MlsApiSubscribeGroupMessagesProcedure:
			mlsApiSubscribeGroupMessagesHandler.ServeHTTP(w, r)
		case MlsApiSubscribeWelcomeMessagesProcedure:
			mlsApiSubscribeWelcomeMessagesHandler.ServeHTTP(w, r)
		case MlsApiBatchPublishCommitLogProcedure:
			mlsApiBatchPublishCommitLogHandler.ServeHTTP(w, r)
		case MlsApiBatchQueryCommitLogProcedure:
			mlsApiBatchQueryCommitLogHandler.ServeHTTP(w, r)
		case MlsApiGetNewestGroupMessageProcedure:
			mlsApiGetNewestGroupMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMlsApiHandler returns CodeUnimplemented from all methods.
type UnimplementedMlsApiHandler struct{}

func (UnimplementedMlsApiHandler) SendGroupMessages(context.Context, *connect.Request[v1.SendGroupMessagesRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.SendGroupMessages is not implemented"))
}

func (UnimplementedMlsApiHandler) SendWelcomeMessages(context.Context, *connect.Request[v1.SendWelcomeMessagesRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.SendWelcomeMessages is not implemented"))
}

func (UnimplementedMlsApiHandler) RegisterInstallation(context.Context, *connect.Request[v1.RegisterInstallationRequest]) (*connect.Response[v1.RegisterInstallationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.RegisterInstallation is not implemented"))
}

func (UnimplementedMlsApiHandler) UploadKeyPackage(context.Context, *connect.Request[v1.UploadKeyPackageRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.UploadKeyPackage is not implemented"))
}

func (UnimplementedMlsApiHandler) FetchKeyPackages(context.Context, *connect.Request[v1.FetchKeyPackagesRequest]) (*connect.Response[v1.FetchKeyPackagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.FetchKeyPackages is not implemented"))
}

func (UnimplementedMlsApiHandler) RevokeInstallation(context.Context, *connect.Request[v1.RevokeInstallationRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.RevokeInstallation is not implemented"))
}

func (UnimplementedMlsApiHandler) GetIdentityUpdates(context.Context, *connect.Request[v1.GetIdentityUpdatesRequest]) (*connect.Response[v1.GetIdentityUpdatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.GetIdentityUpdates is not implemented"))
}

func (UnimplementedMlsApiHandler) QueryGroupMessages(context.Context, *connect.Request[v1.QueryGroupMessagesRequest]) (*connect.Response[v1.QueryGroupMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.QueryGroupMessages is not implemented"))
}

func (UnimplementedMlsApiHandler) QueryWelcomeMessages(context.Context, *connect.Request[v1.QueryWelcomeMessagesRequest]) (*connect.Response[v1.QueryWelcomeMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.QueryWelcomeMessages is not implemented"))
}

func (UnimplementedMlsApiHandler) SubscribeGroupMessages(context.Context, *connect.Request[v1.SubscribeGroupMessagesRequest], *connect.ServerStream[v1.GroupMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.SubscribeGroupMessages is not implemented"))
}

func (UnimplementedMlsApiHandler) SubscribeWelcomeMessages(context.Context, *connect.Request[v1.SubscribeWelcomeMessagesRequest], *connect.ServerStream[v1.WelcomeMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.SubscribeWelcomeMessages is not implemented"))
}

func (UnimplementedMlsApiHandler) BatchPublishCommitLog(context.Context, *connect.Request[v1.BatchPublishCommitLogRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.BatchPublishCommitLog is not implemented"))
}

func (UnimplementedMlsApiHandler) BatchQueryCommitLog(context.Context, *connect.Request[v1.BatchQueryCommitLogRequest]) (*connect.Response[v1.BatchQueryCommitLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.BatchQueryCommitLog is not implemented"))
}

func (UnimplementedMlsApiHandler) GetNewestGroupMessage(context.Context, *connect.Request[v1.GetNewestGroupMessageRequest]) (*connect.Response[v1.GetNewestGroupMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls.api.v1.MlsApi.GetNewestGroupMessage is not implemented"))
}
