// Defines entries on the commit log, used for fork detection and recovery
// XIP: https://community.xmtp.org/t/xip-68-draft-automated-fork-recovery/951

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: mls/message_contents/commit_log.proto

package message_contents

import (
	associations "github.com/xmtp/xmtpd/pkg/proto/identity/associations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommitResult int32

const (
	CommitResult_COMMIT_RESULT_UNSPECIFIED   CommitResult = 0
	CommitResult_COMMIT_RESULT_APPLIED       CommitResult = 1
	CommitResult_COMMIT_RESULT_WRONG_EPOCH   CommitResult = 2
	CommitResult_COMMIT_RESULT_UNDECRYPTABLE CommitResult = 3
	CommitResult_COMMIT_RESULT_INVALID       CommitResult = 4
)

// Enum value maps for CommitResult.
var (
	CommitResult_name = map[int32]string{
		0: "COMMIT_RESULT_UNSPECIFIED",
		1: "COMMIT_RESULT_APPLIED",
		2: "COMMIT_RESULT_WRONG_EPOCH",
		3: "COMMIT_RESULT_UNDECRYPTABLE",
		4: "COMMIT_RESULT_INVALID",
	}
	CommitResult_value = map[string]int32{
		"COMMIT_RESULT_UNSPECIFIED":   0,
		"COMMIT_RESULT_APPLIED":       1,
		"COMMIT_RESULT_WRONG_EPOCH":   2,
		"COMMIT_RESULT_UNDECRYPTABLE": 3,
		"COMMIT_RESULT_INVALID":       4,
	}
)

func (x CommitResult) Enum() *CommitResult {
	p := new(CommitResult)
	*p = x
	return p
}

func (x CommitResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitResult) Descriptor() protoreflect.EnumDescriptor {
	return file_mls_message_contents_commit_log_proto_enumTypes[0].Descriptor()
}

func (CommitResult) Type() protoreflect.EnumType {
	return &file_mls_message_contents_commit_log_proto_enumTypes[0]
}

func (x CommitResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitResult.Descriptor instead.
func (CommitResult) EnumDescriptor() ([]byte, []int) {
	return file_mls_message_contents_commit_log_proto_rawDescGZIP(), []int{0}
}

// PlaintextCommitLogEntry indicates whether a commit was successful or not,
// when applied on top of the indicated `last_epoch_authenticator`.
type PlaintextCommitLogEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The group_id of the group that the commit belongs to.
	GroupId []byte `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The sequence ID of the commit payload being validated.
	CommitSequenceId uint64 `protobuf:"varint,2,opt,name=commit_sequence_id,json=commitSequenceId,proto3" json:"commit_sequence_id,omitempty"`
	// The encryption state before the commit was applied.
	LastEpochAuthenticator []byte `protobuf:"bytes,3,opt,name=last_epoch_authenticator,json=lastEpochAuthenticator,proto3" json:"last_epoch_authenticator,omitempty"`
	// Indicates whether the commit was successful, or why it failed.
	CommitResult CommitResult `protobuf:"varint,4,opt,name=commit_result,json=commitResult,proto3,enum=xmtp.mls.message_contents.CommitResult" json:"commit_result,omitempty"`
	// The epoch number after the commit was applied, if successful.
	AppliedEpochNumber uint64 `protobuf:"varint,5,opt,name=applied_epoch_number,json=appliedEpochNumber,proto3" json:"applied_epoch_number,omitempty"`
	// The encryption state after the commit was applied, if successful.
	AppliedEpochAuthenticator []byte `protobuf:"bytes,6,opt,name=applied_epoch_authenticator,json=appliedEpochAuthenticator,proto3" json:"applied_epoch_authenticator,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *PlaintextCommitLogEntry) Reset() {
	*x = PlaintextCommitLogEntry{}
	mi := &file_mls_message_contents_commit_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaintextCommitLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaintextCommitLogEntry) ProtoMessage() {}

func (x *PlaintextCommitLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_commit_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaintextCommitLogEntry.ProtoReflect.Descriptor instead.
func (*PlaintextCommitLogEntry) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_commit_log_proto_rawDescGZIP(), []int{0}
}

func (x *PlaintextCommitLogEntry) GetGroupId() []byte {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *PlaintextCommitLogEntry) GetCommitSequenceId() uint64 {
	if x != nil {
		return x.CommitSequenceId
	}
	return 0
}

func (x *PlaintextCommitLogEntry) GetLastEpochAuthenticator() []byte {
	if x != nil {
		return x.LastEpochAuthenticator
	}
	return nil
}

func (x *PlaintextCommitLogEntry) GetCommitResult() CommitResult {
	if x != nil {
		return x.CommitResult
	}
	return CommitResult_COMMIT_RESULT_UNSPECIFIED
}

func (x *PlaintextCommitLogEntry) GetAppliedEpochNumber() uint64 {
	if x != nil {
		return x.AppliedEpochNumber
	}
	return 0
}

func (x *PlaintextCommitLogEntry) GetAppliedEpochAuthenticator() []byte {
	if x != nil {
		return x.AppliedEpochAuthenticator
	}
	return nil
}

type CommitLogEntry struct {
	state                    protoimpl.MessageState                    `protogen:"open.v1"`
	SequenceId               uint64                                    `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	SerializedCommitLogEntry []byte                                    `protobuf:"bytes,2,opt,name=serialized_commit_log_entry,json=serializedCommitLogEntry,proto3" json:"serialized_commit_log_entry,omitempty"`
	Signature                *associations.RecoverableEd25519Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CommitLogEntry) Reset() {
	*x = CommitLogEntry{}
	mi := &file_mls_message_contents_commit_log_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitLogEntry) ProtoMessage() {}

func (x *CommitLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_commit_log_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitLogEntry.ProtoReflect.Descriptor instead.
func (*CommitLogEntry) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_commit_log_proto_rawDescGZIP(), []int{1}
}

func (x *CommitLogEntry) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *CommitLogEntry) GetSerializedCommitLogEntry() []byte {
	if x != nil {
		return x.SerializedCommitLogEntry
	}
	return nil
}

func (x *CommitLogEntry) GetSignature() *associations.RecoverableEd25519Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_mls_message_contents_commit_log_proto protoreflect.FileDescriptor

const file_mls_message_contents_commit_log_proto_rawDesc = "" +
	"\n" +
	"%mls/message_contents/commit_log.proto\x12\x19xmtp.mls.message_contents\x1a%identity/associations/signature.proto\"\xdc\x02\n" +
	"\x17PlaintextCommitLogEntry\x12\x19\n" +
	"\bgroup_id\x18\x01 \x01(\fR\agroupId\x12,\n" +
	"\x12commit_sequence_id\x18\x02 \x01(\x04R\x10commitSequenceId\x128\n" +
	"\x18last_epoch_authenticator\x18\x03 \x01(\fR\x16lastEpochAuthenticator\x12L\n" +
	"\rcommit_result\x18\x04 \x01(\x0e2'.xmtp.mls.message_contents.CommitResultR\fcommitResult\x120\n" +
	"\x14applied_epoch_number\x18\x05 \x01(\x04R\x12appliedEpochNumber\x12>\n" +
	"\x1bapplied_epoch_authenticator\x18\x06 \x01(\fR\x19appliedEpochAuthenticator\"\xc7\x01\n" +
	"\x0eCommitLogEntry\x12\x1f\n" +
	"\vsequence_id\x18\x01 \x01(\x04R\n" +
	"sequenceId\x12=\n" +
	"\x1bserialized_commit_log_entry\x18\x02 \x01(\fR\x18serializedCommitLogEntry\x12U\n" +
	"\tsignature\x18\x03 \x01(\v27.xmtp.identity.associations.RecoverableEd25519SignatureR\tsignature*\xa3\x01\n" +
	"\fCommitResult\x12\x1d\n" +
	"\x19COMMIT_RESULT_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15COMMIT_RESULT_APPLIED\x10\x01\x12\x1d\n" +
	"\x19COMMIT_RESULT_WRONG_EPOCH\x10\x02\x12\x1f\n" +
	"\x1bCOMMIT_RESULT_UNDECRYPTABLE\x10\x03\x12\x19\n" +
	"\x15COMMIT_RESULT_INVALID\x10\x04B\xe7\x01\n" +
	"\x1dcom.xmtp.mls.message_contentsB\x0eCommitLogProtoP\x01Z4github.com/xmtp/xmtpd/pkg/proto/mls/message_contents\xa2\x02\x03XMM\xaa\x02\x18Xmtp.Mls.MessageContents\xca\x02\x18Xmtp\\Mls\\MessageContents\xe2\x02$Xmtp\\Mls\\MessageContents\\GPBMetadata\xea\x02\x1aXmtp::Mls::MessageContentsb\x06proto3"

var (
	file_mls_message_contents_commit_log_proto_rawDescOnce sync.Once
	file_mls_message_contents_commit_log_proto_rawDescData []byte
)

func file_mls_message_contents_commit_log_proto_rawDescGZIP() []byte {
	file_mls_message_contents_commit_log_proto_rawDescOnce.Do(func() {
		file_mls_message_contents_commit_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mls_message_contents_commit_log_proto_rawDesc), len(file_mls_message_contents_commit_log_proto_rawDesc)))
	})
	return file_mls_message_contents_commit_log_proto_rawDescData
}

var file_mls_message_contents_commit_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mls_message_contents_commit_log_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mls_message_contents_commit_log_proto_goTypes = []any{
	(CommitResult)(0),                                // 0: xmtp.mls.message_contents.CommitResult
	(*PlaintextCommitLogEntry)(nil),                  // 1: xmtp.mls.message_contents.PlaintextCommitLogEntry
	(*CommitLogEntry)(nil),                           // 2: xmtp.mls.message_contents.CommitLogEntry
	(*associations.RecoverableEd25519Signature)(nil), // 3: xmtp.identity.associations.RecoverableEd25519Signature
}
var file_mls_message_contents_commit_log_proto_depIdxs = []int32{
	0, // 0: xmtp.mls.message_contents.PlaintextCommitLogEntry.commit_result:type_name -> xmtp.mls.message_contents.CommitResult
	3, // 1: xmtp.mls.message_contents.CommitLogEntry.signature:type_name -> xmtp.identity.associations.RecoverableEd25519Signature
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mls_message_contents_commit_log_proto_init() }
func file_mls_message_contents_commit_log_proto_init() {
	if File_mls_message_contents_commit_log_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mls_message_contents_commit_log_proto_rawDesc), len(file_mls_message_contents_commit_log_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mls_message_contents_commit_log_proto_goTypes,
		DependencyIndexes: file_mls_message_contents_commit_log_proto_depIdxs,
		EnumInfos:         file_mls_message_contents_commit_log_proto_enumTypes,
		MessageInfos:      file_mls_message_contents_commit_log_proto_msgTypes,
	}.Build()
	File_mls_message_contents_commit_log_proto = out.File
	file_mls_message_contents_commit_log_proto_goTypes = nil
	file_mls_message_contents_commit_log_proto_depIdxs = nil
}
