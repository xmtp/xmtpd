// Message content encoding structures
// Copied from V2 code so that we can eventually retire all V2 message content

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: mls/message_contents/content.proto

package message_contents

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Recognized compression algorithms
// protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
type Compression int32

const (
	Compression_COMPRESSION_DEFLATE Compression = 0
	Compression_COMPRESSION_GZIP    Compression = 1
)

// Enum value maps for Compression.
var (
	Compression_name = map[int32]string{
		0: "COMPRESSION_DEFLATE",
		1: "COMPRESSION_GZIP",
	}
	Compression_value = map[string]int32{
		"COMPRESSION_DEFLATE": 0,
		"COMPRESSION_GZIP":    1,
	}
)

func (x Compression) Enum() *Compression {
	p := new(Compression)
	*p = x
	return p
}

func (x Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_mls_message_contents_content_proto_enumTypes[0].Descriptor()
}

func (Compression) Type() protoreflect.EnumType {
	return &file_mls_message_contents_content_proto_enumTypes[0]
}

func (x Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compression.Descriptor instead.
func (Compression) EnumDescriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{0}
}

// The kind of device sync payload being sent
type DeviceSyncKind int32

const (
	DeviceSyncKind_DEVICE_SYNC_KIND_UNSPECIFIED     DeviceSyncKind = 0
	DeviceSyncKind_DEVICE_SYNC_KIND_MESSAGE_HISTORY DeviceSyncKind = 1
	DeviceSyncKind_DEVICE_SYNC_KIND_CONSENT         DeviceSyncKind = 2
)

// Enum value maps for DeviceSyncKind.
var (
	DeviceSyncKind_name = map[int32]string{
		0: "DEVICE_SYNC_KIND_UNSPECIFIED",
		1: "DEVICE_SYNC_KIND_MESSAGE_HISTORY",
		2: "DEVICE_SYNC_KIND_CONSENT",
	}
	DeviceSyncKind_value = map[string]int32{
		"DEVICE_SYNC_KIND_UNSPECIFIED":     0,
		"DEVICE_SYNC_KIND_MESSAGE_HISTORY": 1,
		"DEVICE_SYNC_KIND_CONSENT":         2,
	}
)

func (x DeviceSyncKind) Enum() *DeviceSyncKind {
	p := new(DeviceSyncKind)
	*p = x
	return p
}

func (x DeviceSyncKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceSyncKind) Descriptor() protoreflect.EnumDescriptor {
	return file_mls_message_contents_content_proto_enumTypes[1].Descriptor()
}

func (DeviceSyncKind) Type() protoreflect.EnumType {
	return &file_mls_message_contents_content_proto_enumTypes[1]
}

func (x DeviceSyncKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceSyncKind.Descriptor instead.
func (DeviceSyncKind) EnumDescriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{1}
}

// ContentTypeId is used to identify the type of content stored in a Message.
type ContentTypeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityId  string `protobuf:"bytes,1,opt,name=authority_id,json=authorityId,proto3" json:"authority_id,omitempty"`     // authority governing this content type
	TypeId       string `protobuf:"bytes,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`                    // type identifier
	VersionMajor uint32 `protobuf:"varint,3,opt,name=version_major,json=versionMajor,proto3" json:"version_major,omitempty"` // major version of the type
	VersionMinor uint32 `protobuf:"varint,4,opt,name=version_minor,json=versionMinor,proto3" json:"version_minor,omitempty"` // minor version of the type
}

func (x *ContentTypeId) Reset() {
	*x = ContentTypeId{}
	mi := &file_mls_message_contents_content_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentTypeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTypeId) ProtoMessage() {}

func (x *ContentTypeId) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTypeId.ProtoReflect.Descriptor instead.
func (*ContentTypeId) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{0}
}

func (x *ContentTypeId) GetAuthorityId() string {
	if x != nil {
		return x.AuthorityId
	}
	return ""
}

func (x *ContentTypeId) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *ContentTypeId) GetVersionMajor() uint32 {
	if x != nil {
		return x.VersionMajor
	}
	return 0
}

func (x *ContentTypeId) GetVersionMinor() uint32 {
	if x != nil {
		return x.VersionMinor
	}
	return 0
}

// EncodedContent bundles the content with metadata identifying its type
// and parameters required for correct decoding and presentation of the content.
type EncodedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// content type identifier used to match the payload with
	// the correct decoding machinery
	Type *ContentTypeId `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// optional encoding parameters required to correctly decode the content
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// optional fallback description of the content that can be used in case
	// the client cannot decode or render the content
	Fallback *string `protobuf:"bytes,3,opt,name=fallback,proto3,oneof" json:"fallback,omitempty"`
	// optional compression; the value indicates algorithm used to
	// compress the encoded content bytes
	Compression *Compression `protobuf:"varint,5,opt,name=compression,proto3,enum=xmtp.mls.message_contents.Compression,oneof" json:"compression,omitempty"`
	// encoded content itself
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EncodedContent) Reset() {
	*x = EncodedContent{}
	mi := &file_mls_message_contents_content_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodedContent) ProtoMessage() {}

func (x *EncodedContent) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodedContent.ProtoReflect.Descriptor instead.
func (*EncodedContent) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{1}
}

func (x *EncodedContent) GetType() *ContentTypeId {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EncodedContent) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *EncodedContent) GetFallback() string {
	if x != nil && x.Fallback != nil {
		return *x.Fallback
	}
	return ""
}

func (x *EncodedContent) GetCompression() Compression {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return Compression_COMPRESSION_DEFLATE
}

func (x *EncodedContent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// A PlaintextEnvelope is the outermost payload that gets encrypted by MLS
type PlaintextEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selector which declares which version of the EncodedContent this
	// PlaintextEnvelope is
	//
	// Types that are assignable to Content:
	//
	//	*PlaintextEnvelope_V1_
	//	*PlaintextEnvelope_V2_
	Content isPlaintextEnvelope_Content `protobuf_oneof:"content"`
}

func (x *PlaintextEnvelope) Reset() {
	*x = PlaintextEnvelope{}
	mi := &file_mls_message_contents_content_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaintextEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaintextEnvelope) ProtoMessage() {}

func (x *PlaintextEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaintextEnvelope.ProtoReflect.Descriptor instead.
func (*PlaintextEnvelope) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{2}
}

func (m *PlaintextEnvelope) GetContent() isPlaintextEnvelope_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *PlaintextEnvelope) GetV1() *PlaintextEnvelope_V1 {
	if x, ok := x.GetContent().(*PlaintextEnvelope_V1_); ok {
		return x.V1
	}
	return nil
}

func (x *PlaintextEnvelope) GetV2() *PlaintextEnvelope_V2 {
	if x, ok := x.GetContent().(*PlaintextEnvelope_V2_); ok {
		return x.V2
	}
	return nil
}

type isPlaintextEnvelope_Content interface {
	isPlaintextEnvelope_Content()
}

type PlaintextEnvelope_V1_ struct {
	V1 *PlaintextEnvelope_V1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

type PlaintextEnvelope_V2_ struct {
	V2 *PlaintextEnvelope_V2 `protobuf:"bytes,2,opt,name=v2,proto3,oneof"`
}

func (*PlaintextEnvelope_V1_) isPlaintextEnvelope_Content() {}

func (*PlaintextEnvelope_V2_) isPlaintextEnvelope_Content() {}

// Initiator or new installation id requesting a sync payload send a request
type DeviceSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for each request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Ensures a human is in the loop
	PinCode string `protobuf:"bytes,2,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	// request kind
	Kind DeviceSyncKind `protobuf:"varint,3,opt,name=kind,proto3,enum=xmtp.mls.message_contents.DeviceSyncKind" json:"kind,omitempty"`
}

func (x *DeviceSyncRequest) Reset() {
	*x = DeviceSyncRequest{}
	mi := &file_mls_message_contents_content_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSyncRequest) ProtoMessage() {}

func (x *DeviceSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSyncRequest.ProtoReflect.Descriptor instead.
func (*DeviceSyncRequest) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceSyncRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DeviceSyncRequest) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *DeviceSyncRequest) GetKind() DeviceSyncKind {
	if x != nil {
		return x.Kind
	}
	return DeviceSyncKind_DEVICE_SYNC_KIND_UNSPECIFIED
}

// Pre-existing installation id capable of supplying a sync payload sends this reply
type DeviceSyncReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must match an existing request_id from a message history request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Where the messages can be retrieved from
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Generated input 'secret' for the AES Key used to encrypt the message-bundle
	EncryptionKey *DeviceSyncKeyType `protobuf:"bytes,3,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	// ns unix timestamp of when the reply was sent
	TimestampNs uint64 `protobuf:"varint,4,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	// request kind
	Kind DeviceSyncKind `protobuf:"varint,5,opt,name=kind,proto3,enum=xmtp.mls.message_contents.DeviceSyncKind" json:"kind,omitempty"`
}

func (x *DeviceSyncReply) Reset() {
	*x = DeviceSyncReply{}
	mi := &file_mls_message_contents_content_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSyncReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSyncReply) ProtoMessage() {}

func (x *DeviceSyncReply) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSyncReply.ProtoReflect.Descriptor instead.
func (*DeviceSyncReply) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceSyncReply) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DeviceSyncReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DeviceSyncReply) GetEncryptionKey() *DeviceSyncKeyType {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *DeviceSyncReply) GetTimestampNs() uint64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *DeviceSyncReply) GetKind() DeviceSyncKind {
	if x != nil {
		return x.Kind
	}
	return DeviceSyncKind_DEVICE_SYNC_KIND_UNSPECIFIED
}

// Key used to encrypt the message-bundle
type DeviceSyncKeyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*DeviceSyncKeyType_Aes_256Gcm
	Key isDeviceSyncKeyType_Key `protobuf_oneof:"key"`
}

func (x *DeviceSyncKeyType) Reset() {
	*x = DeviceSyncKeyType{}
	mi := &file_mls_message_contents_content_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSyncKeyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSyncKeyType) ProtoMessage() {}

func (x *DeviceSyncKeyType) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSyncKeyType.ProtoReflect.Descriptor instead.
func (*DeviceSyncKeyType) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{5}
}

func (m *DeviceSyncKeyType) GetKey() isDeviceSyncKeyType_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *DeviceSyncKeyType) GetAes_256Gcm() []byte {
	if x, ok := x.GetKey().(*DeviceSyncKeyType_Aes_256Gcm); ok {
		return x.Aes_256Gcm
	}
	return nil
}

type isDeviceSyncKeyType_Key interface {
	isDeviceSyncKeyType_Key()
}

type DeviceSyncKeyType_Aes_256Gcm struct {
	Aes_256Gcm []byte `protobuf:"bytes,1,opt,name=aes_256_gcm,json=aes256Gcm,proto3,oneof"`
}

func (*DeviceSyncKeyType_Aes_256Gcm) isDeviceSyncKeyType_Key() {}

type UserPreferenceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents [][]byte `protobuf:"bytes,1,rep,name=contents,proto3" json:"contents,omitempty"`
}

func (x *UserPreferenceUpdate) Reset() {
	*x = UserPreferenceUpdate{}
	mi := &file_mls_message_contents_content_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPreferenceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPreferenceUpdate) ProtoMessage() {}

func (x *UserPreferenceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPreferenceUpdate.ProtoReflect.Descriptor instead.
func (*UserPreferenceUpdate) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{6}
}

func (x *UserPreferenceUpdate) GetContents() [][]byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

// Version 1 of the encrypted envelope
type PlaintextEnvelope_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expected to be EncodedContent
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// A unique value that can be used to ensure that the same content can
	// produce different hashes. May be the sender timestamp.
	IdempotencyKey string `protobuf:"bytes,2,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
}

func (x *PlaintextEnvelope_V1) Reset() {
	*x = PlaintextEnvelope_V1{}
	mi := &file_mls_message_contents_content_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaintextEnvelope_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaintextEnvelope_V1) ProtoMessage() {}

func (x *PlaintextEnvelope_V1) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaintextEnvelope_V1.ProtoReflect.Descriptor instead.
func (*PlaintextEnvelope_V1) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PlaintextEnvelope_V1) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PlaintextEnvelope_V1) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

// Version 2 of the encrypted envelope
type PlaintextEnvelope_V2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique value that can be used to ensure that the same content can
	// produce different hashes. May be the sender timestamp.
	IdempotencyKey string `protobuf:"bytes,1,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	// Types that are assignable to MessageType:
	//
	//	*PlaintextEnvelope_V2_Content
	//	*PlaintextEnvelope_V2_DeviceSyncRequest
	//	*PlaintextEnvelope_V2_DeviceSyncReply
	//	*PlaintextEnvelope_V2_UserPreferenceUpdate
	MessageType isPlaintextEnvelope_V2_MessageType `protobuf_oneof:"message_type"`
}

func (x *PlaintextEnvelope_V2) Reset() {
	*x = PlaintextEnvelope_V2{}
	mi := &file_mls_message_contents_content_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaintextEnvelope_V2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaintextEnvelope_V2) ProtoMessage() {}

func (x *PlaintextEnvelope_V2) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaintextEnvelope_V2.ProtoReflect.Descriptor instead.
func (*PlaintextEnvelope_V2) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{2, 1}
}

func (x *PlaintextEnvelope_V2) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (m *PlaintextEnvelope_V2) GetMessageType() isPlaintextEnvelope_V2_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (x *PlaintextEnvelope_V2) GetContent() []byte {
	if x, ok := x.GetMessageType().(*PlaintextEnvelope_V2_Content); ok {
		return x.Content
	}
	return nil
}

func (x *PlaintextEnvelope_V2) GetDeviceSyncRequest() *DeviceSyncRequest {
	if x, ok := x.GetMessageType().(*PlaintextEnvelope_V2_DeviceSyncRequest); ok {
		return x.DeviceSyncRequest
	}
	return nil
}

func (x *PlaintextEnvelope_V2) GetDeviceSyncReply() *DeviceSyncReply {
	if x, ok := x.GetMessageType().(*PlaintextEnvelope_V2_DeviceSyncReply); ok {
		return x.DeviceSyncReply
	}
	return nil
}

func (x *PlaintextEnvelope_V2) GetUserPreferenceUpdate() *UserPreferenceUpdate {
	if x, ok := x.GetMessageType().(*PlaintextEnvelope_V2_UserPreferenceUpdate); ok {
		return x.UserPreferenceUpdate
	}
	return nil
}

type isPlaintextEnvelope_V2_MessageType interface {
	isPlaintextEnvelope_V2_MessageType()
}

type PlaintextEnvelope_V2_Content struct {
	// Expected to be EncodedContent
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

type PlaintextEnvelope_V2_DeviceSyncRequest struct {
	// Initiator sends a request to receive sync payload
	DeviceSyncRequest *DeviceSyncRequest `protobuf:"bytes,3,opt,name=device_sync_request,json=deviceSyncRequest,proto3,oneof"`
}

type PlaintextEnvelope_V2_DeviceSyncReply struct {
	// Some other authorized installation sends a reply with a link to payload
	DeviceSyncReply *DeviceSyncReply `protobuf:"bytes,4,opt,name=device_sync_reply,json=deviceSyncReply,proto3,oneof"`
}

type PlaintextEnvelope_V2_UserPreferenceUpdate struct {
	// A serialized user preference update
	UserPreferenceUpdate *UserPreferenceUpdate `protobuf:"bytes,5,opt,name=user_preference_update,json=userPreferenceUpdate,proto3,oneof"`
}

func (*PlaintextEnvelope_V2_Content) isPlaintextEnvelope_V2_MessageType() {}

func (*PlaintextEnvelope_V2_DeviceSyncRequest) isPlaintextEnvelope_V2_MessageType() {}

func (*PlaintextEnvelope_V2_DeviceSyncReply) isPlaintextEnvelope_V2_MessageType() {}

func (*PlaintextEnvelope_V2_UserPreferenceUpdate) isPlaintextEnvelope_V2_MessageType() {}

var File_mls_message_contents_content_proto protoreflect.FileDescriptor

var file_mls_message_contents_content_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x6c, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x95, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x22, 0x8f, 0x03, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e,
	0x6d, 0x6c, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x78,
	0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xec, 0x04, 0x0a, 0x11, 0x50, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12,
	0x41, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02,
	0x76, 0x31, 0x12, 0x41, 0x0a, 0x02, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x56, 0x32, 0x48,
	0x00, 0x52, 0x02, 0x76, 0x32, 0x1a, 0x47, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x1a, 0xfc,
	0x02, 0x0a, 0x02, 0x56, 0x32, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d,
	0x6c, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x11, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x67, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c,
	0x73, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x53, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x65, 0x73, 0x5f,
	0x32, 0x35, 0x36, 0x5f, 0x67, 0x63, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x47, 0x63, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x32, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x3c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x5a, 0x49,
	0x50, 0x10, 0x01, 0x2a, 0x76, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x42, 0xe5, 0x01, 0x0a, 0x1d,
	0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x6d, 0x74, 0x70, 0x2f, 0x78,
	0x6d, 0x74, 0x70, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d,
	0x6c, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x58, 0x4d, 0x4d, 0xaa, 0x02, 0x18, 0x58, 0x6d, 0x74, 0x70,
	0x2e, 0x4d, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0xca, 0x02, 0x18, 0x58, 0x6d, 0x74, 0x70, 0x5c, 0x4d, 0x6c, 0x73, 0x5c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0xe2,
	0x02, 0x24, 0x58, 0x6d, 0x74, 0x70, 0x5c, 0x4d, 0x6c, 0x73, 0x5c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x58, 0x6d, 0x74, 0x70, 0x3a, 0x3a, 0x4d,
	0x6c, 0x73, 0x3a, 0x3a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mls_message_contents_content_proto_rawDescOnce sync.Once
	file_mls_message_contents_content_proto_rawDescData = file_mls_message_contents_content_proto_rawDesc
)

func file_mls_message_contents_content_proto_rawDescGZIP() []byte {
	file_mls_message_contents_content_proto_rawDescOnce.Do(func() {
		file_mls_message_contents_content_proto_rawDescData = protoimpl.X.CompressGZIP(file_mls_message_contents_content_proto_rawDescData)
	})
	return file_mls_message_contents_content_proto_rawDescData
}

var file_mls_message_contents_content_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mls_message_contents_content_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mls_message_contents_content_proto_goTypes = []any{
	(Compression)(0),             // 0: xmtp.mls.message_contents.Compression
	(DeviceSyncKind)(0),          // 1: xmtp.mls.message_contents.DeviceSyncKind
	(*ContentTypeId)(nil),        // 2: xmtp.mls.message_contents.ContentTypeId
	(*EncodedContent)(nil),       // 3: xmtp.mls.message_contents.EncodedContent
	(*PlaintextEnvelope)(nil),    // 4: xmtp.mls.message_contents.PlaintextEnvelope
	(*DeviceSyncRequest)(nil),    // 5: xmtp.mls.message_contents.DeviceSyncRequest
	(*DeviceSyncReply)(nil),      // 6: xmtp.mls.message_contents.DeviceSyncReply
	(*DeviceSyncKeyType)(nil),    // 7: xmtp.mls.message_contents.DeviceSyncKeyType
	(*UserPreferenceUpdate)(nil), // 8: xmtp.mls.message_contents.UserPreferenceUpdate
	nil,                          // 9: xmtp.mls.message_contents.EncodedContent.ParametersEntry
	(*PlaintextEnvelope_V1)(nil), // 10: xmtp.mls.message_contents.PlaintextEnvelope.V1
	(*PlaintextEnvelope_V2)(nil), // 11: xmtp.mls.message_contents.PlaintextEnvelope.V2
}
var file_mls_message_contents_content_proto_depIdxs = []int32{
	2,  // 0: xmtp.mls.message_contents.EncodedContent.type:type_name -> xmtp.mls.message_contents.ContentTypeId
	9,  // 1: xmtp.mls.message_contents.EncodedContent.parameters:type_name -> xmtp.mls.message_contents.EncodedContent.ParametersEntry
	0,  // 2: xmtp.mls.message_contents.EncodedContent.compression:type_name -> xmtp.mls.message_contents.Compression
	10, // 3: xmtp.mls.message_contents.PlaintextEnvelope.v1:type_name -> xmtp.mls.message_contents.PlaintextEnvelope.V1
	11, // 4: xmtp.mls.message_contents.PlaintextEnvelope.v2:type_name -> xmtp.mls.message_contents.PlaintextEnvelope.V2
	1,  // 5: xmtp.mls.message_contents.DeviceSyncRequest.kind:type_name -> xmtp.mls.message_contents.DeviceSyncKind
	7,  // 6: xmtp.mls.message_contents.DeviceSyncReply.encryption_key:type_name -> xmtp.mls.message_contents.DeviceSyncKeyType
	1,  // 7: xmtp.mls.message_contents.DeviceSyncReply.kind:type_name -> xmtp.mls.message_contents.DeviceSyncKind
	5,  // 8: xmtp.mls.message_contents.PlaintextEnvelope.V2.device_sync_request:type_name -> xmtp.mls.message_contents.DeviceSyncRequest
	6,  // 9: xmtp.mls.message_contents.PlaintextEnvelope.V2.device_sync_reply:type_name -> xmtp.mls.message_contents.DeviceSyncReply
	8,  // 10: xmtp.mls.message_contents.PlaintextEnvelope.V2.user_preference_update:type_name -> xmtp.mls.message_contents.UserPreferenceUpdate
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_mls_message_contents_content_proto_init() }
func file_mls_message_contents_content_proto_init() {
	if File_mls_message_contents_content_proto != nil {
		return
	}
	file_mls_message_contents_content_proto_msgTypes[1].OneofWrappers = []any{}
	file_mls_message_contents_content_proto_msgTypes[2].OneofWrappers = []any{
		(*PlaintextEnvelope_V1_)(nil),
		(*PlaintextEnvelope_V2_)(nil),
	}
	file_mls_message_contents_content_proto_msgTypes[5].OneofWrappers = []any{
		(*DeviceSyncKeyType_Aes_256Gcm)(nil),
	}
	file_mls_message_contents_content_proto_msgTypes[9].OneofWrappers = []any{
		(*PlaintextEnvelope_V2_Content)(nil),
		(*PlaintextEnvelope_V2_DeviceSyncRequest)(nil),
		(*PlaintextEnvelope_V2_DeviceSyncReply)(nil),
		(*PlaintextEnvelope_V2_UserPreferenceUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mls_message_contents_content_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mls_message_contents_content_proto_goTypes,
		DependencyIndexes: file_mls_message_contents_content_proto_depIdxs,
		EnumInfos:         file_mls_message_contents_content_proto_enumTypes,
		MessageInfos:      file_mls_message_contents_content_proto_msgTypes,
	}.Build()
	File_mls_message_contents_content_proto = out.File
	file_mls_message_contents_content_proto_rawDesc = nil
	file_mls_message_contents_content_proto_goTypes = nil
	file_mls_message_contents_content_proto_depIdxs = nil
}
