// Message content encoding structures
// Copied from V2 code so that we can eventually retire all V2 message content

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: mls/message_contents/content.proto

package message_contents

import (
	device_sync "github.com/xmtp/xmtpd/pkg/proto/device_sync"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Recognized compression algorithms
// protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
type Compression int32

const (
	Compression_COMPRESSION_DEFLATE Compression = 0
	Compression_COMPRESSION_GZIP    Compression = 1
)

// Enum value maps for Compression.
var (
	Compression_name = map[int32]string{
		0: "COMPRESSION_DEFLATE",
		1: "COMPRESSION_GZIP",
	}
	Compression_value = map[string]int32{
		"COMPRESSION_DEFLATE": 0,
		"COMPRESSION_GZIP":    1,
	}
)

func (x Compression) Enum() *Compression {
	p := new(Compression)
	*p = x
	return p
}

func (x Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_mls_message_contents_content_proto_enumTypes[0].Descriptor()
}

func (Compression) Type() protoreflect.EnumType {
	return &file_mls_message_contents_content_proto_enumTypes[0]
}

func (x Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compression.Descriptor instead.
func (Compression) EnumDescriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{0}
}

// ContentTypeId is used to identify the type of content stored in a Message.
type ContentTypeId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuthorityId   string                 `protobuf:"bytes,1,opt,name=authority_id,json=authorityId,proto3" json:"authority_id,omitempty"`     // authority governing this content type
	TypeId        string                 `protobuf:"bytes,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`                    // type identifier
	VersionMajor  uint32                 `protobuf:"varint,3,opt,name=version_major,json=versionMajor,proto3" json:"version_major,omitempty"` // major version of the type
	VersionMinor  uint32                 `protobuf:"varint,4,opt,name=version_minor,json=versionMinor,proto3" json:"version_minor,omitempty"` // minor version of the type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContentTypeId) Reset() {
	*x = ContentTypeId{}
	mi := &file_mls_message_contents_content_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentTypeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTypeId) ProtoMessage() {}

func (x *ContentTypeId) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTypeId.ProtoReflect.Descriptor instead.
func (*ContentTypeId) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{0}
}

func (x *ContentTypeId) GetAuthorityId() string {
	if x != nil {
		return x.AuthorityId
	}
	return ""
}

func (x *ContentTypeId) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *ContentTypeId) GetVersionMajor() uint32 {
	if x != nil {
		return x.VersionMajor
	}
	return 0
}

func (x *ContentTypeId) GetVersionMinor() uint32 {
	if x != nil {
		return x.VersionMinor
	}
	return 0
}

// EncodedContent bundles the content with metadata identifying its type
// and parameters required for correct decoding and presentation of the content.
type EncodedContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// content type identifier used to match the payload with
	// the correct decoding machinery
	Type *ContentTypeId `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// optional encoding parameters required to correctly decode the content
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// optional fallback description of the content that can be used in case
	// the client cannot decode or render the content
	Fallback *string `protobuf:"bytes,3,opt,name=fallback,proto3,oneof" json:"fallback,omitempty"`
	// optional compression; the value indicates algorithm used to
	// compress the encoded content bytes
	Compression *Compression `protobuf:"varint,5,opt,name=compression,proto3,enum=xmtp.mls.message_contents.Compression,oneof" json:"compression,omitempty"`
	// encoded content itself
	Content       []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodedContent) Reset() {
	*x = EncodedContent{}
	mi := &file_mls_message_contents_content_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodedContent) ProtoMessage() {}

func (x *EncodedContent) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodedContent.ProtoReflect.Descriptor instead.
func (*EncodedContent) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{1}
}

func (x *EncodedContent) GetType() *ContentTypeId {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EncodedContent) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *EncodedContent) GetFallback() string {
	if x != nil && x.Fallback != nil {
		return *x.Fallback
	}
	return ""
}

func (x *EncodedContent) GetCompression() Compression {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return Compression_COMPRESSION_DEFLATE
}

func (x *EncodedContent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// A PlaintextEnvelope is the outermost payload that gets encrypted by MLS
type PlaintextEnvelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Selector which declares which version of the EncodedContent this
	// PlaintextEnvelope is
	//
	// Types that are valid to be assigned to Content:
	//
	//	*PlaintextEnvelope_V1_
	//	*PlaintextEnvelope_V2_
	Content       isPlaintextEnvelope_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlaintextEnvelope) Reset() {
	*x = PlaintextEnvelope{}
	mi := &file_mls_message_contents_content_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaintextEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaintextEnvelope) ProtoMessage() {}

func (x *PlaintextEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaintextEnvelope.ProtoReflect.Descriptor instead.
func (*PlaintextEnvelope) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{2}
}

func (x *PlaintextEnvelope) GetContent() isPlaintextEnvelope_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PlaintextEnvelope) GetV1() *PlaintextEnvelope_V1 {
	if x != nil {
		if x, ok := x.Content.(*PlaintextEnvelope_V1_); ok {
			return x.V1
		}
	}
	return nil
}

func (x *PlaintextEnvelope) GetV2() *PlaintextEnvelope_V2 {
	if x != nil {
		if x, ok := x.Content.(*PlaintextEnvelope_V2_); ok {
			return x.V2
		}
	}
	return nil
}

type isPlaintextEnvelope_Content interface {
	isPlaintextEnvelope_Content()
}

type PlaintextEnvelope_V1_ struct {
	V1 *PlaintextEnvelope_V1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

type PlaintextEnvelope_V2_ struct {
	V2 *PlaintextEnvelope_V2 `protobuf:"bytes,2,opt,name=v2,proto3,oneof"`
}

func (*PlaintextEnvelope_V1_) isPlaintextEnvelope_Content() {}

func (*PlaintextEnvelope_V2_) isPlaintextEnvelope_Content() {}

// Version 1 of the encrypted envelope
type PlaintextEnvelope_V1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Expected to be EncodedContent
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// A unique value that can be used to ensure that the same content can
	// produce different hashes. May be the sender timestamp.
	IdempotencyKey string `protobuf:"bytes,2,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlaintextEnvelope_V1) Reset() {
	*x = PlaintextEnvelope_V1{}
	mi := &file_mls_message_contents_content_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaintextEnvelope_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaintextEnvelope_V1) ProtoMessage() {}

func (x *PlaintextEnvelope_V1) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaintextEnvelope_V1.ProtoReflect.Descriptor instead.
func (*PlaintextEnvelope_V1) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PlaintextEnvelope_V1) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PlaintextEnvelope_V1) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

// Version 2 of the encrypted envelope
type PlaintextEnvelope_V2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique value that can be used to ensure that the same content can
	// produce different hashes. May be the sender timestamp.
	IdempotencyKey string `protobuf:"bytes,1,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*PlaintextEnvelope_V2_Content
	//	*PlaintextEnvelope_V2_DeviceSyncRequest
	//	*PlaintextEnvelope_V2_DeviceSyncReply
	//	*PlaintextEnvelope_V2_UserPreferenceUpdate
	MessageType   isPlaintextEnvelope_V2_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlaintextEnvelope_V2) Reset() {
	*x = PlaintextEnvelope_V2{}
	mi := &file_mls_message_contents_content_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaintextEnvelope_V2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaintextEnvelope_V2) ProtoMessage() {}

func (x *PlaintextEnvelope_V2) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaintextEnvelope_V2.ProtoReflect.Descriptor instead.
func (*PlaintextEnvelope_V2) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_proto_rawDescGZIP(), []int{2, 1}
}

func (x *PlaintextEnvelope_V2) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *PlaintextEnvelope_V2) GetMessageType() isPlaintextEnvelope_V2_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *PlaintextEnvelope_V2) GetContent() []byte {
	if x != nil {
		if x, ok := x.MessageType.(*PlaintextEnvelope_V2_Content); ok {
			return x.Content
		}
	}
	return nil
}

func (x *PlaintextEnvelope_V2) GetDeviceSyncRequest() *device_sync.DeviceSyncRequest {
	if x != nil {
		if x, ok := x.MessageType.(*PlaintextEnvelope_V2_DeviceSyncRequest); ok {
			return x.DeviceSyncRequest
		}
	}
	return nil
}

func (x *PlaintextEnvelope_V2) GetDeviceSyncReply() *device_sync.DeviceSyncReply {
	if x != nil {
		if x, ok := x.MessageType.(*PlaintextEnvelope_V2_DeviceSyncReply); ok {
			return x.DeviceSyncReply
		}
	}
	return nil
}

func (x *PlaintextEnvelope_V2) GetUserPreferenceUpdate() *device_sync.V1UserPreferenceUpdate {
	if x != nil {
		if x, ok := x.MessageType.(*PlaintextEnvelope_V2_UserPreferenceUpdate); ok {
			return x.UserPreferenceUpdate
		}
	}
	return nil
}

type isPlaintextEnvelope_V2_MessageType interface {
	isPlaintextEnvelope_V2_MessageType()
}

type PlaintextEnvelope_V2_Content struct {
	// Expected to be EncodedContent
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

type PlaintextEnvelope_V2_DeviceSyncRequest struct {
	// Initiator sends a request to receive sync payload
	DeviceSyncRequest *device_sync.DeviceSyncRequest `protobuf:"bytes,3,opt,name=device_sync_request,json=deviceSyncRequest,proto3,oneof"`
}

type PlaintextEnvelope_V2_DeviceSyncReply struct {
	// Some other authorized installation sends a reply with a link to payload
	DeviceSyncReply *device_sync.DeviceSyncReply `protobuf:"bytes,4,opt,name=device_sync_reply,json=deviceSyncReply,proto3,oneof"`
}

type PlaintextEnvelope_V2_UserPreferenceUpdate struct {
	// A serialized user preference update
	UserPreferenceUpdate *device_sync.V1UserPreferenceUpdate `protobuf:"bytes,5,opt,name=user_preference_update,json=userPreferenceUpdate,proto3,oneof"`
}

func (*PlaintextEnvelope_V2_Content) isPlaintextEnvelope_V2_MessageType() {}

func (*PlaintextEnvelope_V2_DeviceSyncRequest) isPlaintextEnvelope_V2_MessageType() {}

func (*PlaintextEnvelope_V2_DeviceSyncReply) isPlaintextEnvelope_V2_MessageType() {}

func (*PlaintextEnvelope_V2_UserPreferenceUpdate) isPlaintextEnvelope_V2_MessageType() {}

var File_mls_message_contents_content_proto protoreflect.FileDescriptor

const file_mls_message_contents_content_proto_rawDesc = "" +
	"\n" +
	"\"mls/message_contents/content.proto\x12\x19xmtp.mls.message_contents\x1a\x19device_sync/content.proto\"\x95\x01\n" +
	"\rContentTypeId\x12!\n" +
	"\fauthority_id\x18\x01 \x01(\tR\vauthorityId\x12\x17\n" +
	"\atype_id\x18\x02 \x01(\tR\x06typeId\x12#\n" +
	"\rversion_major\x18\x03 \x01(\rR\fversionMajor\x12#\n" +
	"\rversion_minor\x18\x04 \x01(\rR\fversionMinor\"\x8f\x03\n" +
	"\x0eEncodedContent\x12<\n" +
	"\x04type\x18\x01 \x01(\v2(.xmtp.mls.message_contents.ContentTypeIdR\x04type\x12Y\n" +
	"\n" +
	"parameters\x18\x02 \x03(\v29.xmtp.mls.message_contents.EncodedContent.ParametersEntryR\n" +
	"parameters\x12\x1f\n" +
	"\bfallback\x18\x03 \x01(\tH\x00R\bfallback\x88\x01\x01\x12M\n" +
	"\vcompression\x18\x05 \x01(\x0e2&.xmtp.mls.message_contents.CompressionH\x01R\vcompression\x88\x01\x01\x12\x18\n" +
	"\acontent\x18\x04 \x01(\fR\acontent\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_fallbackB\x0e\n" +
	"\f_compression\"\xeb\x04\n" +
	"\x11PlaintextEnvelope\x12A\n" +
	"\x02v1\x18\x01 \x01(\v2/.xmtp.mls.message_contents.PlaintextEnvelope.V1H\x00R\x02v1\x12A\n" +
	"\x02v2\x18\x02 \x01(\v2/.xmtp.mls.message_contents.PlaintextEnvelope.V2H\x00R\x02v2\x1aG\n" +
	"\x02V1\x12\x18\n" +
	"\acontent\x18\x01 \x01(\fR\acontent\x12'\n" +
	"\x0fidempotency_key\x18\x02 \x01(\tR\x0eidempotencyKey\x1a\xfb\x02\n" +
	"\x02V2\x12'\n" +
	"\x0fidempotency_key\x18\x01 \x01(\tR\x0eidempotencyKey\x12\x1a\n" +
	"\acontent\x18\x02 \x01(\fH\x00R\acontent\x12]\n" +
	"\x13device_sync_request\x18\x03 \x01(\v2+.xmtp.device_sync.content.DeviceSyncRequestH\x00R\x11deviceSyncRequest\x12W\n" +
	"\x11device_sync_reply\x18\x04 \x01(\v2).xmtp.device_sync.content.DeviceSyncReplyH\x00R\x0fdeviceSyncReply\x12h\n" +
	"\x16user_preference_update\x18\x05 \x01(\v20.xmtp.device_sync.content.V1UserPreferenceUpdateH\x00R\x14userPreferenceUpdateB\x0e\n" +
	"\fmessage_typeB\t\n" +
	"\acontent*<\n" +
	"\vCompression\x12\x17\n" +
	"\x13COMPRESSION_DEFLATE\x10\x00\x12\x14\n" +
	"\x10COMPRESSION_GZIP\x10\x01B\xe5\x01\n" +
	"\x1dcom.xmtp.mls.message_contentsB\fContentProtoP\x01Z4github.com/xmtp/xmtpd/pkg/proto/mls/message_contents\xa2\x02\x03XMM\xaa\x02\x18Xmtp.Mls.MessageContents\xca\x02\x18Xmtp\\Mls\\MessageContents\xe2\x02$Xmtp\\Mls\\MessageContents\\GPBMetadata\xea\x02\x1aXmtp::Mls::MessageContentsb\x06proto3"

var (
	file_mls_message_contents_content_proto_rawDescOnce sync.Once
	file_mls_message_contents_content_proto_rawDescData []byte
)

func file_mls_message_contents_content_proto_rawDescGZIP() []byte {
	file_mls_message_contents_content_proto_rawDescOnce.Do(func() {
		file_mls_message_contents_content_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mls_message_contents_content_proto_rawDesc), len(file_mls_message_contents_content_proto_rawDesc)))
	})
	return file_mls_message_contents_content_proto_rawDescData
}

var file_mls_message_contents_content_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mls_message_contents_content_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_mls_message_contents_content_proto_goTypes = []any{
	(Compression)(0),                           // 0: xmtp.mls.message_contents.Compression
	(*ContentTypeId)(nil),                      // 1: xmtp.mls.message_contents.ContentTypeId
	(*EncodedContent)(nil),                     // 2: xmtp.mls.message_contents.EncodedContent
	(*PlaintextEnvelope)(nil),                  // 3: xmtp.mls.message_contents.PlaintextEnvelope
	nil,                                        // 4: xmtp.mls.message_contents.EncodedContent.ParametersEntry
	(*PlaintextEnvelope_V1)(nil),               // 5: xmtp.mls.message_contents.PlaintextEnvelope.V1
	(*PlaintextEnvelope_V2)(nil),               // 6: xmtp.mls.message_contents.PlaintextEnvelope.V2
	(*device_sync.DeviceSyncRequest)(nil),      // 7: xmtp.device_sync.content.DeviceSyncRequest
	(*device_sync.DeviceSyncReply)(nil),        // 8: xmtp.device_sync.content.DeviceSyncReply
	(*device_sync.V1UserPreferenceUpdate)(nil), // 9: xmtp.device_sync.content.V1UserPreferenceUpdate
}
var file_mls_message_contents_content_proto_depIdxs = []int32{
	1, // 0: xmtp.mls.message_contents.EncodedContent.type:type_name -> xmtp.mls.message_contents.ContentTypeId
	4, // 1: xmtp.mls.message_contents.EncodedContent.parameters:type_name -> xmtp.mls.message_contents.EncodedContent.ParametersEntry
	0, // 2: xmtp.mls.message_contents.EncodedContent.compression:type_name -> xmtp.mls.message_contents.Compression
	5, // 3: xmtp.mls.message_contents.PlaintextEnvelope.v1:type_name -> xmtp.mls.message_contents.PlaintextEnvelope.V1
	6, // 4: xmtp.mls.message_contents.PlaintextEnvelope.v2:type_name -> xmtp.mls.message_contents.PlaintextEnvelope.V2
	7, // 5: xmtp.mls.message_contents.PlaintextEnvelope.V2.device_sync_request:type_name -> xmtp.device_sync.content.DeviceSyncRequest
	8, // 6: xmtp.mls.message_contents.PlaintextEnvelope.V2.device_sync_reply:type_name -> xmtp.device_sync.content.DeviceSyncReply
	9, // 7: xmtp.mls.message_contents.PlaintextEnvelope.V2.user_preference_update:type_name -> xmtp.device_sync.content.V1UserPreferenceUpdate
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_mls_message_contents_content_proto_init() }
func file_mls_message_contents_content_proto_init() {
	if File_mls_message_contents_content_proto != nil {
		return
	}
	file_mls_message_contents_content_proto_msgTypes[1].OneofWrappers = []any{}
	file_mls_message_contents_content_proto_msgTypes[2].OneofWrappers = []any{
		(*PlaintextEnvelope_V1_)(nil),
		(*PlaintextEnvelope_V2_)(nil),
	}
	file_mls_message_contents_content_proto_msgTypes[5].OneofWrappers = []any{
		(*PlaintextEnvelope_V2_Content)(nil),
		(*PlaintextEnvelope_V2_DeviceSyncRequest)(nil),
		(*PlaintextEnvelope_V2_DeviceSyncReply)(nil),
		(*PlaintextEnvelope_V2_UserPreferenceUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mls_message_contents_content_proto_rawDesc), len(file_mls_message_contents_content_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mls_message_contents_content_proto_goTypes,
		DependencyIndexes: file_mls_message_contents_content_proto_depIdxs,
		EnumInfos:         file_mls_message_contents_content_proto_enumTypes,
		MessageInfos:      file_mls_message_contents_content_proto_msgTypes,
	}.Build()
	File_mls_message_contents_content_proto = out.File
	file_mls_message_contents_content_proto_goTypes = nil
	file_mls_message_contents_content_proto_depIdxs = nil
}
