// multi_remote_attachment.proto
// This file defines the MultiRemoteAttachment message type and is associated with the following ContentTypeId:
//
// ContentTypeId {
//     authority_id: "xmtp.org",
//     type_id:      "multiRemoteStaticContent",
//     version_major: 1,
//     version_minor: 0,
// }
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: mls/message_contents/content_types/multi_remote_attachment.proto

package content_types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MultiRemoteAttachment message type
type MultiRemoteAttachment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Array of attachment information
	Attachments   []*RemoteAttachmentInfo `protobuf:"bytes,1,rep,name=attachments,proto3" json:"attachments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiRemoteAttachment) Reset() {
	*x = MultiRemoteAttachment{}
	mi := &file_mls_message_contents_content_types_multi_remote_attachment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiRemoteAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRemoteAttachment) ProtoMessage() {}

func (x *MultiRemoteAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_types_multi_remote_attachment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRemoteAttachment.ProtoReflect.Descriptor instead.
func (*MultiRemoteAttachment) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDescGZIP(), []int{0}
}

func (x *MultiRemoteAttachment) GetAttachments() []*RemoteAttachmentInfo {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type RemoteAttachmentInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The SHA256 hash of the remote content
	ContentDigest string `protobuf:"bytes,1,opt,name=content_digest,json=contentDigest,proto3" json:"content_digest,omitempty"`
	// A 32 byte array for decrypting the remote content payload
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// A byte array for the nonce used to encrypt the remote content payload
	Nonce []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// A byte array for the salt used to encrypt the remote content payload
	Salt []byte `protobuf:"bytes,4,opt,name=salt,proto3" json:"salt,omitempty"`
	// The scheme of the URL. Must be "https://"
	Scheme string `protobuf:"bytes,5,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// The URL of the remote content
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// The size of the encrypted content in bytes (max size of 4GB)
	ContentLength *uint32 `protobuf:"varint,7,opt,name=content_length,json=contentLength,proto3,oneof" json:"content_length,omitempty"`
	// The filename of the remote content
	Filename      *string `protobuf:"bytes,8,opt,name=filename,proto3,oneof" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteAttachmentInfo) Reset() {
	*x = RemoteAttachmentInfo{}
	mi := &file_mls_message_contents_content_types_multi_remote_attachment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteAttachmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteAttachmentInfo) ProtoMessage() {}

func (x *RemoteAttachmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_content_types_multi_remote_attachment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteAttachmentInfo.ProtoReflect.Descriptor instead.
func (*RemoteAttachmentInfo) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDescGZIP(), []int{1}
}

func (x *RemoteAttachmentInfo) GetContentDigest() string {
	if x != nil {
		return x.ContentDigest
	}
	return ""
}

func (x *RemoteAttachmentInfo) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *RemoteAttachmentInfo) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *RemoteAttachmentInfo) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *RemoteAttachmentInfo) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *RemoteAttachmentInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RemoteAttachmentInfo) GetContentLength() uint32 {
	if x != nil && x.ContentLength != nil {
		return *x.ContentLength
	}
	return 0
}

func (x *RemoteAttachmentInfo) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

var File_mls_message_contents_content_types_multi_remote_attachment_proto protoreflect.FileDescriptor

const file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDesc = "" +
	"\n" +
	"@mls/message_contents/content_types/multi_remote_attachment.proto\x12'xmtp.mls.message_contents.content_types\"x\n" +
	"\x15MultiRemoteAttachment\x12_\n" +
	"\vattachments\x18\x01 \x03(\v2=.xmtp.mls.message_contents.content_types.RemoteAttachmentInfoR\vattachments\"\x96\x02\n" +
	"\x14RemoteAttachmentInfo\x12%\n" +
	"\x0econtent_digest\x18\x01 \x01(\tR\rcontentDigest\x12\x16\n" +
	"\x06secret\x18\x02 \x01(\fR\x06secret\x12\x14\n" +
	"\x05nonce\x18\x03 \x01(\fR\x05nonce\x12\x12\n" +
	"\x04salt\x18\x04 \x01(\fR\x04salt\x12\x16\n" +
	"\x06scheme\x18\x05 \x01(\tR\x06scheme\x12\x10\n" +
	"\x03url\x18\x06 \x01(\tR\x03url\x12*\n" +
	"\x0econtent_length\x18\a \x01(\rH\x00R\rcontentLength\x88\x01\x01\x12\x1f\n" +
	"\bfilename\x18\b \x01(\tH\x01R\bfilename\x88\x01\x01B\x11\n" +
	"\x0f_content_lengthB\v\n" +
	"\t_filenameB\xc5\x02\n" +
	"+com.xmtp.mls.message_contents.content_typesB\x1aMultiRemoteAttachmentProtoP\x01ZBgithub.com/xmtp/xmtpd/pkg/proto/mls/message_contents/content_types\xa2\x02\x04XMMC\xaa\x02%Xmtp.Mls.MessageContents.ContentTypes\xca\x02%Xmtp\\Mls\\MessageContents\\ContentTypes\xe2\x021Xmtp\\Mls\\MessageContents\\ContentTypes\\GPBMetadata\xea\x02(Xmtp::Mls::MessageContents::ContentTypesb\x06proto3"

var (
	file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDescOnce sync.Once
	file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDescData []byte
)

func file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDescGZIP() []byte {
	file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDescOnce.Do(func() {
		file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDesc), len(file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDesc)))
	})
	return file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDescData
}

var file_mls_message_contents_content_types_multi_remote_attachment_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mls_message_contents_content_types_multi_remote_attachment_proto_goTypes = []any{
	(*MultiRemoteAttachment)(nil), // 0: xmtp.mls.message_contents.content_types.MultiRemoteAttachment
	(*RemoteAttachmentInfo)(nil),  // 1: xmtp.mls.message_contents.content_types.RemoteAttachmentInfo
}
var file_mls_message_contents_content_types_multi_remote_attachment_proto_depIdxs = []int32{
	1, // 0: xmtp.mls.message_contents.content_types.MultiRemoteAttachment.attachments:type_name -> xmtp.mls.message_contents.content_types.RemoteAttachmentInfo
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_mls_message_contents_content_types_multi_remote_attachment_proto_init() }
func file_mls_message_contents_content_types_multi_remote_attachment_proto_init() {
	if File_mls_message_contents_content_types_multi_remote_attachment_proto != nil {
		return
	}
	file_mls_message_contents_content_types_multi_remote_attachment_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDesc), len(file_mls_message_contents_content_types_multi_remote_attachment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mls_message_contents_content_types_multi_remote_attachment_proto_goTypes,
		DependencyIndexes: file_mls_message_contents_content_types_multi_remote_attachment_proto_depIdxs,
		MessageInfos:      file_mls_message_contents_content_types_multi_remote_attachment_proto_msgTypes,
	}.Build()
	File_mls_message_contents_content_types_multi_remote_attachment_proto = out.File
	file_mls_message_contents_content_types_multi_remote_attachment_proto_goTypes = nil
	file_mls_message_contents_content_types_multi_remote_attachment_proto_depIdxs = nil
}
