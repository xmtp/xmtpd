// Group mutable permissions metadata

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: mls/message_contents/group_permissions.proto

package message_contents

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Base policy
type MembershipPolicy_BasePolicy int32

const (
	MembershipPolicy_BASE_POLICY_UNSPECIFIED                   MembershipPolicy_BasePolicy = 0
	MembershipPolicy_BASE_POLICY_ALLOW                         MembershipPolicy_BasePolicy = 1
	MembershipPolicy_BASE_POLICY_DENY                          MembershipPolicy_BasePolicy = 2
	MembershipPolicy_BASE_POLICY_ALLOW_IF_ADMIN_OR_SUPER_ADMIN MembershipPolicy_BasePolicy = 3
	MembershipPolicy_BASE_POLICY_ALLOW_IF_SUPER_ADMIN          MembershipPolicy_BasePolicy = 4
)

// Enum value maps for MembershipPolicy_BasePolicy.
var (
	MembershipPolicy_BasePolicy_name = map[int32]string{
		0: "BASE_POLICY_UNSPECIFIED",
		1: "BASE_POLICY_ALLOW",
		2: "BASE_POLICY_DENY",
		3: "BASE_POLICY_ALLOW_IF_ADMIN_OR_SUPER_ADMIN",
		4: "BASE_POLICY_ALLOW_IF_SUPER_ADMIN",
	}
	MembershipPolicy_BasePolicy_value = map[string]int32{
		"BASE_POLICY_UNSPECIFIED":                   0,
		"BASE_POLICY_ALLOW":                         1,
		"BASE_POLICY_DENY":                          2,
		"BASE_POLICY_ALLOW_IF_ADMIN_OR_SUPER_ADMIN": 3,
		"BASE_POLICY_ALLOW_IF_SUPER_ADMIN":          4,
	}
)

func (x MembershipPolicy_BasePolicy) Enum() *MembershipPolicy_BasePolicy {
	p := new(MembershipPolicy_BasePolicy)
	*p = x
	return p
}

func (x MembershipPolicy_BasePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipPolicy_BasePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_mls_message_contents_group_permissions_proto_enumTypes[0].Descriptor()
}

func (MembershipPolicy_BasePolicy) Type() protoreflect.EnumType {
	return &file_mls_message_contents_group_permissions_proto_enumTypes[0]
}

func (x MembershipPolicy_BasePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipPolicy_BasePolicy.Descriptor instead.
func (MembershipPolicy_BasePolicy) EnumDescriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{2, 0}
}

// Base policy
type MetadataPolicy_MetadataBasePolicy int32

const (
	MetadataPolicy_METADATA_BASE_POLICY_UNSPECIFIED          MetadataPolicy_MetadataBasePolicy = 0
	MetadataPolicy_METADATA_BASE_POLICY_ALLOW                MetadataPolicy_MetadataBasePolicy = 1
	MetadataPolicy_METADATA_BASE_POLICY_DENY                 MetadataPolicy_MetadataBasePolicy = 2
	MetadataPolicy_METADATA_BASE_POLICY_ALLOW_IF_ADMIN       MetadataPolicy_MetadataBasePolicy = 3
	MetadataPolicy_METADATA_BASE_POLICY_ALLOW_IF_SUPER_ADMIN MetadataPolicy_MetadataBasePolicy = 4
)

// Enum value maps for MetadataPolicy_MetadataBasePolicy.
var (
	MetadataPolicy_MetadataBasePolicy_name = map[int32]string{
		0: "METADATA_BASE_POLICY_UNSPECIFIED",
		1: "METADATA_BASE_POLICY_ALLOW",
		2: "METADATA_BASE_POLICY_DENY",
		3: "METADATA_BASE_POLICY_ALLOW_IF_ADMIN",
		4: "METADATA_BASE_POLICY_ALLOW_IF_SUPER_ADMIN",
	}
	MetadataPolicy_MetadataBasePolicy_value = map[string]int32{
		"METADATA_BASE_POLICY_UNSPECIFIED":          0,
		"METADATA_BASE_POLICY_ALLOW":                1,
		"METADATA_BASE_POLICY_DENY":                 2,
		"METADATA_BASE_POLICY_ALLOW_IF_ADMIN":       3,
		"METADATA_BASE_POLICY_ALLOW_IF_SUPER_ADMIN": 4,
	}
)

func (x MetadataPolicy_MetadataBasePolicy) Enum() *MetadataPolicy_MetadataBasePolicy {
	p := new(MetadataPolicy_MetadataBasePolicy)
	*p = x
	return p
}

func (x MetadataPolicy_MetadataBasePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataPolicy_MetadataBasePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_mls_message_contents_group_permissions_proto_enumTypes[1].Descriptor()
}

func (MetadataPolicy_MetadataBasePolicy) Type() protoreflect.EnumType {
	return &file_mls_message_contents_group_permissions_proto_enumTypes[1]
}

func (x MetadataPolicy_MetadataBasePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataPolicy_MetadataBasePolicy.Descriptor instead.
func (MetadataPolicy_MetadataBasePolicy) EnumDescriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{3, 0}
}

// Base policy
type PermissionsUpdatePolicy_PermissionsBasePolicy int32

const (
	PermissionsUpdatePolicy_PERMISSIONS_BASE_POLICY_UNSPECIFIED          PermissionsUpdatePolicy_PermissionsBasePolicy = 0
	PermissionsUpdatePolicy_PERMISSIONS_BASE_POLICY_DENY                 PermissionsUpdatePolicy_PermissionsBasePolicy = 1
	PermissionsUpdatePolicy_PERMISSIONS_BASE_POLICY_ALLOW_IF_ADMIN       PermissionsUpdatePolicy_PermissionsBasePolicy = 2
	PermissionsUpdatePolicy_PERMISSIONS_BASE_POLICY_ALLOW_IF_SUPER_ADMIN PermissionsUpdatePolicy_PermissionsBasePolicy = 3
)

// Enum value maps for PermissionsUpdatePolicy_PermissionsBasePolicy.
var (
	PermissionsUpdatePolicy_PermissionsBasePolicy_name = map[int32]string{
		0: "PERMISSIONS_BASE_POLICY_UNSPECIFIED",
		1: "PERMISSIONS_BASE_POLICY_DENY",
		2: "PERMISSIONS_BASE_POLICY_ALLOW_IF_ADMIN",
		3: "PERMISSIONS_BASE_POLICY_ALLOW_IF_SUPER_ADMIN",
	}
	PermissionsUpdatePolicy_PermissionsBasePolicy_value = map[string]int32{
		"PERMISSIONS_BASE_POLICY_UNSPECIFIED":          0,
		"PERMISSIONS_BASE_POLICY_DENY":                 1,
		"PERMISSIONS_BASE_POLICY_ALLOW_IF_ADMIN":       2,
		"PERMISSIONS_BASE_POLICY_ALLOW_IF_SUPER_ADMIN": 3,
	}
)

func (x PermissionsUpdatePolicy_PermissionsBasePolicy) Enum() *PermissionsUpdatePolicy_PermissionsBasePolicy {
	p := new(PermissionsUpdatePolicy_PermissionsBasePolicy)
	*p = x
	return p
}

func (x PermissionsUpdatePolicy_PermissionsBasePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionsUpdatePolicy_PermissionsBasePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_mls_message_contents_group_permissions_proto_enumTypes[2].Descriptor()
}

func (PermissionsUpdatePolicy_PermissionsBasePolicy) Type() protoreflect.EnumType {
	return &file_mls_message_contents_group_permissions_proto_enumTypes[2]
}

func (x PermissionsUpdatePolicy_PermissionsBasePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionsUpdatePolicy_PermissionsBasePolicy.Descriptor instead.
func (PermissionsUpdatePolicy_PermissionsBasePolicy) EnumDescriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{4, 0}
}

// Message for group mutable metadata
type GroupMutablePermissionsV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policies      *PolicySet             `protobuf:"bytes,1,opt,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupMutablePermissionsV1) Reset() {
	*x = GroupMutablePermissionsV1{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupMutablePermissionsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMutablePermissionsV1) ProtoMessage() {}

func (x *GroupMutablePermissionsV1) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMutablePermissionsV1.ProtoReflect.Descriptor instead.
func (*GroupMutablePermissionsV1) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{0}
}

func (x *GroupMutablePermissionsV1) GetPolicies() *PolicySet {
	if x != nil {
		return x.Policies
	}
	return nil
}

// The set of policies that govern the group
type PolicySet struct {
	state                   protoimpl.MessageState     `protogen:"open.v1"`
	AddMemberPolicy         *MembershipPolicy          `protobuf:"bytes,1,opt,name=add_member_policy,json=addMemberPolicy,proto3" json:"add_member_policy,omitempty"`
	RemoveMemberPolicy      *MembershipPolicy          `protobuf:"bytes,2,opt,name=remove_member_policy,json=removeMemberPolicy,proto3" json:"remove_member_policy,omitempty"`
	UpdateMetadataPolicy    map[string]*MetadataPolicy `protobuf:"bytes,3,rep,name=update_metadata_policy,json=updateMetadataPolicy,proto3" json:"update_metadata_policy,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AddAdminPolicy          *PermissionsUpdatePolicy   `protobuf:"bytes,4,opt,name=add_admin_policy,json=addAdminPolicy,proto3" json:"add_admin_policy,omitempty"`
	RemoveAdminPolicy       *PermissionsUpdatePolicy   `protobuf:"bytes,5,opt,name=remove_admin_policy,json=removeAdminPolicy,proto3" json:"remove_admin_policy,omitempty"`
	UpdatePermissionsPolicy *PermissionsUpdatePolicy   `protobuf:"bytes,6,opt,name=update_permissions_policy,json=updatePermissionsPolicy,proto3" json:"update_permissions_policy,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PolicySet) Reset() {
	*x = PolicySet{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySet) ProtoMessage() {}

func (x *PolicySet) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySet.ProtoReflect.Descriptor instead.
func (*PolicySet) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{1}
}

func (x *PolicySet) GetAddMemberPolicy() *MembershipPolicy {
	if x != nil {
		return x.AddMemberPolicy
	}
	return nil
}

func (x *PolicySet) GetRemoveMemberPolicy() *MembershipPolicy {
	if x != nil {
		return x.RemoveMemberPolicy
	}
	return nil
}

func (x *PolicySet) GetUpdateMetadataPolicy() map[string]*MetadataPolicy {
	if x != nil {
		return x.UpdateMetadataPolicy
	}
	return nil
}

func (x *PolicySet) GetAddAdminPolicy() *PermissionsUpdatePolicy {
	if x != nil {
		return x.AddAdminPolicy
	}
	return nil
}

func (x *PolicySet) GetRemoveAdminPolicy() *PermissionsUpdatePolicy {
	if x != nil {
		return x.RemoveAdminPolicy
	}
	return nil
}

func (x *PolicySet) GetUpdatePermissionsPolicy() *PermissionsUpdatePolicy {
	if x != nil {
		return x.UpdatePermissionsPolicy
	}
	return nil
}

// A policy that governs adding/removing members or installations
type MembershipPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*MembershipPolicy_Base
	//	*MembershipPolicy_AndCondition_
	//	*MembershipPolicy_AnyCondition_
	Kind          isMembershipPolicy_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MembershipPolicy) Reset() {
	*x = MembershipPolicy{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MembershipPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipPolicy) ProtoMessage() {}

func (x *MembershipPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipPolicy.ProtoReflect.Descriptor instead.
func (*MembershipPolicy) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{2}
}

func (x *MembershipPolicy) GetKind() isMembershipPolicy_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *MembershipPolicy) GetBase() MembershipPolicy_BasePolicy {
	if x != nil {
		if x, ok := x.Kind.(*MembershipPolicy_Base); ok {
			return x.Base
		}
	}
	return MembershipPolicy_BASE_POLICY_UNSPECIFIED
}

func (x *MembershipPolicy) GetAndCondition() *MembershipPolicy_AndCondition {
	if x != nil {
		if x, ok := x.Kind.(*MembershipPolicy_AndCondition_); ok {
			return x.AndCondition
		}
	}
	return nil
}

func (x *MembershipPolicy) GetAnyCondition() *MembershipPolicy_AnyCondition {
	if x != nil {
		if x, ok := x.Kind.(*MembershipPolicy_AnyCondition_); ok {
			return x.AnyCondition
		}
	}
	return nil
}

type isMembershipPolicy_Kind interface {
	isMembershipPolicy_Kind()
}

type MembershipPolicy_Base struct {
	Base MembershipPolicy_BasePolicy `protobuf:"varint,1,opt,name=base,proto3,enum=xmtp.mls.message_contents.MembershipPolicy_BasePolicy,oneof"`
}

type MembershipPolicy_AndCondition_ struct {
	AndCondition *MembershipPolicy_AndCondition `protobuf:"bytes,2,opt,name=and_condition,json=andCondition,proto3,oneof"`
}

type MembershipPolicy_AnyCondition_ struct {
	AnyCondition *MembershipPolicy_AnyCondition `protobuf:"bytes,3,opt,name=any_condition,json=anyCondition,proto3,oneof"`
}

func (*MembershipPolicy_Base) isMembershipPolicy_Kind() {}

func (*MembershipPolicy_AndCondition_) isMembershipPolicy_Kind() {}

func (*MembershipPolicy_AnyCondition_) isMembershipPolicy_Kind() {}

// A policy that governs updating metadata
type MetadataPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*MetadataPolicy_Base
	//	*MetadataPolicy_AndCondition_
	//	*MetadataPolicy_AnyCondition_
	Kind          isMetadataPolicy_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataPolicy) Reset() {
	*x = MetadataPolicy{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataPolicy) ProtoMessage() {}

func (x *MetadataPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataPolicy.ProtoReflect.Descriptor instead.
func (*MetadataPolicy) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{3}
}

func (x *MetadataPolicy) GetKind() isMetadataPolicy_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *MetadataPolicy) GetBase() MetadataPolicy_MetadataBasePolicy {
	if x != nil {
		if x, ok := x.Kind.(*MetadataPolicy_Base); ok {
			return x.Base
		}
	}
	return MetadataPolicy_METADATA_BASE_POLICY_UNSPECIFIED
}

func (x *MetadataPolicy) GetAndCondition() *MetadataPolicy_AndCondition {
	if x != nil {
		if x, ok := x.Kind.(*MetadataPolicy_AndCondition_); ok {
			return x.AndCondition
		}
	}
	return nil
}

func (x *MetadataPolicy) GetAnyCondition() *MetadataPolicy_AnyCondition {
	if x != nil {
		if x, ok := x.Kind.(*MetadataPolicy_AnyCondition_); ok {
			return x.AnyCondition
		}
	}
	return nil
}

type isMetadataPolicy_Kind interface {
	isMetadataPolicy_Kind()
}

type MetadataPolicy_Base struct {
	Base MetadataPolicy_MetadataBasePolicy `protobuf:"varint,1,opt,name=base,proto3,enum=xmtp.mls.message_contents.MetadataPolicy_MetadataBasePolicy,oneof"`
}

type MetadataPolicy_AndCondition_ struct {
	AndCondition *MetadataPolicy_AndCondition `protobuf:"bytes,2,opt,name=and_condition,json=andCondition,proto3,oneof"`
}

type MetadataPolicy_AnyCondition_ struct {
	AnyCondition *MetadataPolicy_AnyCondition `protobuf:"bytes,3,opt,name=any_condition,json=anyCondition,proto3,oneof"`
}

func (*MetadataPolicy_Base) isMetadataPolicy_Kind() {}

func (*MetadataPolicy_AndCondition_) isMetadataPolicy_Kind() {}

func (*MetadataPolicy_AnyCondition_) isMetadataPolicy_Kind() {}

// A policy that governs updating permissions
type PermissionsUpdatePolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*PermissionsUpdatePolicy_Base
	//	*PermissionsUpdatePolicy_AndCondition_
	//	*PermissionsUpdatePolicy_AnyCondition_
	Kind          isPermissionsUpdatePolicy_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionsUpdatePolicy) Reset() {
	*x = PermissionsUpdatePolicy{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionsUpdatePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsUpdatePolicy) ProtoMessage() {}

func (x *PermissionsUpdatePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsUpdatePolicy.ProtoReflect.Descriptor instead.
func (*PermissionsUpdatePolicy) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{4}
}

func (x *PermissionsUpdatePolicy) GetKind() isPermissionsUpdatePolicy_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *PermissionsUpdatePolicy) GetBase() PermissionsUpdatePolicy_PermissionsBasePolicy {
	if x != nil {
		if x, ok := x.Kind.(*PermissionsUpdatePolicy_Base); ok {
			return x.Base
		}
	}
	return PermissionsUpdatePolicy_PERMISSIONS_BASE_POLICY_UNSPECIFIED
}

func (x *PermissionsUpdatePolicy) GetAndCondition() *PermissionsUpdatePolicy_AndCondition {
	if x != nil {
		if x, ok := x.Kind.(*PermissionsUpdatePolicy_AndCondition_); ok {
			return x.AndCondition
		}
	}
	return nil
}

func (x *PermissionsUpdatePolicy) GetAnyCondition() *PermissionsUpdatePolicy_AnyCondition {
	if x != nil {
		if x, ok := x.Kind.(*PermissionsUpdatePolicy_AnyCondition_); ok {
			return x.AnyCondition
		}
	}
	return nil
}

type isPermissionsUpdatePolicy_Kind interface {
	isPermissionsUpdatePolicy_Kind()
}

type PermissionsUpdatePolicy_Base struct {
	Base PermissionsUpdatePolicy_PermissionsBasePolicy `protobuf:"varint,1,opt,name=base,proto3,enum=xmtp.mls.message_contents.PermissionsUpdatePolicy_PermissionsBasePolicy,oneof"`
}

type PermissionsUpdatePolicy_AndCondition_ struct {
	AndCondition *PermissionsUpdatePolicy_AndCondition `protobuf:"bytes,2,opt,name=and_condition,json=andCondition,proto3,oneof"`
}

type PermissionsUpdatePolicy_AnyCondition_ struct {
	AnyCondition *PermissionsUpdatePolicy_AnyCondition `protobuf:"bytes,3,opt,name=any_condition,json=anyCondition,proto3,oneof"`
}

func (*PermissionsUpdatePolicy_Base) isPermissionsUpdatePolicy_Kind() {}

func (*PermissionsUpdatePolicy_AndCondition_) isPermissionsUpdatePolicy_Kind() {}

func (*PermissionsUpdatePolicy_AnyCondition_) isPermissionsUpdatePolicy_Kind() {}

// Combine multiple policies. All must evaluate to true
type MembershipPolicy_AndCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policies      []*MembershipPolicy    `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MembershipPolicy_AndCondition) Reset() {
	*x = MembershipPolicy_AndCondition{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MembershipPolicy_AndCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipPolicy_AndCondition) ProtoMessage() {}

func (x *MembershipPolicy_AndCondition) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipPolicy_AndCondition.ProtoReflect.Descriptor instead.
func (*MembershipPolicy_AndCondition) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{2, 0}
}

func (x *MembershipPolicy_AndCondition) GetPolicies() []*MembershipPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Combine multiple policies. Any must evaluate to true
type MembershipPolicy_AnyCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policies      []*MembershipPolicy    `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MembershipPolicy_AnyCondition) Reset() {
	*x = MembershipPolicy_AnyCondition{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MembershipPolicy_AnyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipPolicy_AnyCondition) ProtoMessage() {}

func (x *MembershipPolicy_AnyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipPolicy_AnyCondition.ProtoReflect.Descriptor instead.
func (*MembershipPolicy_AnyCondition) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{2, 1}
}

func (x *MembershipPolicy_AnyCondition) GetPolicies() []*MembershipPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Combine multiple policies. All must evaluate to true
type MetadataPolicy_AndCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policies      []*MetadataPolicy      `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataPolicy_AndCondition) Reset() {
	*x = MetadataPolicy_AndCondition{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataPolicy_AndCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataPolicy_AndCondition) ProtoMessage() {}

func (x *MetadataPolicy_AndCondition) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataPolicy_AndCondition.ProtoReflect.Descriptor instead.
func (*MetadataPolicy_AndCondition) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{3, 0}
}

func (x *MetadataPolicy_AndCondition) GetPolicies() []*MetadataPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Combine multiple policies. Any must evaluate to true
type MetadataPolicy_AnyCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policies      []*MetadataPolicy      `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataPolicy_AnyCondition) Reset() {
	*x = MetadataPolicy_AnyCondition{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataPolicy_AnyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataPolicy_AnyCondition) ProtoMessage() {}

func (x *MetadataPolicy_AnyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataPolicy_AnyCondition.ProtoReflect.Descriptor instead.
func (*MetadataPolicy_AnyCondition) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{3, 1}
}

func (x *MetadataPolicy_AnyCondition) GetPolicies() []*MetadataPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Combine multiple policies. All must evaluate to true
type PermissionsUpdatePolicy_AndCondition struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Policies      []*PermissionsUpdatePolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionsUpdatePolicy_AndCondition) Reset() {
	*x = PermissionsUpdatePolicy_AndCondition{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionsUpdatePolicy_AndCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsUpdatePolicy_AndCondition) ProtoMessage() {}

func (x *PermissionsUpdatePolicy_AndCondition) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsUpdatePolicy_AndCondition.ProtoReflect.Descriptor instead.
func (*PermissionsUpdatePolicy_AndCondition) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PermissionsUpdatePolicy_AndCondition) GetPolicies() []*PermissionsUpdatePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Combine multiple policies. Any must evaluate to true
type PermissionsUpdatePolicy_AnyCondition struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Policies      []*PermissionsUpdatePolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionsUpdatePolicy_AnyCondition) Reset() {
	*x = PermissionsUpdatePolicy_AnyCondition{}
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionsUpdatePolicy_AnyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsUpdatePolicy_AnyCondition) ProtoMessage() {}

func (x *PermissionsUpdatePolicy_AnyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_group_permissions_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsUpdatePolicy_AnyCondition.ProtoReflect.Descriptor instead.
func (*PermissionsUpdatePolicy_AnyCondition) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_group_permissions_proto_rawDescGZIP(), []int{4, 1}
}

func (x *PermissionsUpdatePolicy_AnyCondition) GetPolicies() []*PermissionsUpdatePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

var File_mls_message_contents_group_permissions_proto protoreflect.FileDescriptor

const file_mls_message_contents_group_permissions_proto_rawDesc = "" +
	"\n" +
	",mls/message_contents/group_permissions.proto\x12\x19xmtp.mls.message_contents\"]\n" +
	"\x19GroupMutablePermissionsV1\x12@\n" +
	"\bpolicies\x18\x01 \x01(\v2$.xmtp.mls.message_contents.PolicySetR\bpolicies\"\xdf\x05\n" +
	"\tPolicySet\x12W\n" +
	"\x11add_member_policy\x18\x01 \x01(\v2+.xmtp.mls.message_contents.MembershipPolicyR\x0faddMemberPolicy\x12]\n" +
	"\x14remove_member_policy\x18\x02 \x01(\v2+.xmtp.mls.message_contents.MembershipPolicyR\x12removeMemberPolicy\x12t\n" +
	"\x16update_metadata_policy\x18\x03 \x03(\v2>.xmtp.mls.message_contents.PolicySet.UpdateMetadataPolicyEntryR\x14updateMetadataPolicy\x12\\\n" +
	"\x10add_admin_policy\x18\x04 \x01(\v22.xmtp.mls.message_contents.PermissionsUpdatePolicyR\x0eaddAdminPolicy\x12b\n" +
	"\x13remove_admin_policy\x18\x05 \x01(\v22.xmtp.mls.message_contents.PermissionsUpdatePolicyR\x11removeAdminPolicy\x12n\n" +
	"\x19update_permissions_policy\x18\x06 \x01(\v22.xmtp.mls.message_contents.PermissionsUpdatePolicyR\x17updatePermissionsPolicy\x1ar\n" +
	"\x19UpdateMetadataPolicyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12?\n" +
	"\x05value\x18\x02 \x01(\v2).xmtp.mls.message_contents.MetadataPolicyR\x05value:\x028\x01\"\x8a\x05\n" +
	"\x10MembershipPolicy\x12L\n" +
	"\x04base\x18\x01 \x01(\x0e26.xmtp.mls.message_contents.MembershipPolicy.BasePolicyH\x00R\x04base\x12_\n" +
	"\rand_condition\x18\x02 \x01(\v28.xmtp.mls.message_contents.MembershipPolicy.AndConditionH\x00R\fandCondition\x12_\n" +
	"\rany_condition\x18\x03 \x01(\v28.xmtp.mls.message_contents.MembershipPolicy.AnyConditionH\x00R\fanyCondition\x1aW\n" +
	"\fAndCondition\x12G\n" +
	"\bpolicies\x18\x01 \x03(\v2+.xmtp.mls.message_contents.MembershipPolicyR\bpolicies\x1aW\n" +
	"\fAnyCondition\x12G\n" +
	"\bpolicies\x18\x01 \x03(\v2+.xmtp.mls.message_contents.MembershipPolicyR\bpolicies\"\xab\x01\n" +
	"\n" +
	"BasePolicy\x12\x1b\n" +
	"\x17BASE_POLICY_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11BASE_POLICY_ALLOW\x10\x01\x12\x14\n" +
	"\x10BASE_POLICY_DENY\x10\x02\x12-\n" +
	")BASE_POLICY_ALLOW_IF_ADMIN_OR_SUPER_ADMIN\x10\x03\x12$\n" +
	" BASE_POLICY_ALLOW_IF_SUPER_ADMIN\x10\x04B\x06\n" +
	"\x04kind\"\xac\x05\n" +
	"\x0eMetadataPolicy\x12R\n" +
	"\x04base\x18\x01 \x01(\x0e2<.xmtp.mls.message_contents.MetadataPolicy.MetadataBasePolicyH\x00R\x04base\x12]\n" +
	"\rand_condition\x18\x02 \x01(\v26.xmtp.mls.message_contents.MetadataPolicy.AndConditionH\x00R\fandCondition\x12]\n" +
	"\rany_condition\x18\x03 \x01(\v26.xmtp.mls.message_contents.MetadataPolicy.AnyConditionH\x00R\fanyCondition\x1aU\n" +
	"\fAndCondition\x12E\n" +
	"\bpolicies\x18\x01 \x03(\v2).xmtp.mls.message_contents.MetadataPolicyR\bpolicies\x1aU\n" +
	"\fAnyCondition\x12E\n" +
	"\bpolicies\x18\x01 \x03(\v2).xmtp.mls.message_contents.MetadataPolicyR\bpolicies\"\xd1\x01\n" +
	"\x12MetadataBasePolicy\x12$\n" +
	" METADATA_BASE_POLICY_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aMETADATA_BASE_POLICY_ALLOW\x10\x01\x12\x1d\n" +
	"\x19METADATA_BASE_POLICY_DENY\x10\x02\x12'\n" +
	"#METADATA_BASE_POLICY_ALLOW_IF_ADMIN\x10\x03\x12-\n" +
	")METADATA_BASE_POLICY_ALLOW_IF_SUPER_ADMIN\x10\x04B\x06\n" +
	"\x04kind\"\xd4\x05\n" +
	"\x17PermissionsUpdatePolicy\x12^\n" +
	"\x04base\x18\x01 \x01(\x0e2H.xmtp.mls.message_contents.PermissionsUpdatePolicy.PermissionsBasePolicyH\x00R\x04base\x12f\n" +
	"\rand_condition\x18\x02 \x01(\v2?.xmtp.mls.message_contents.PermissionsUpdatePolicy.AndConditionH\x00R\fandCondition\x12f\n" +
	"\rany_condition\x18\x03 \x01(\v2?.xmtp.mls.message_contents.PermissionsUpdatePolicy.AnyConditionH\x00R\fanyCondition\x1a^\n" +
	"\fAndCondition\x12N\n" +
	"\bpolicies\x18\x01 \x03(\v22.xmtp.mls.message_contents.PermissionsUpdatePolicyR\bpolicies\x1a^\n" +
	"\fAnyCondition\x12N\n" +
	"\bpolicies\x18\x01 \x03(\v22.xmtp.mls.message_contents.PermissionsUpdatePolicyR\bpolicies\"\xc0\x01\n" +
	"\x15PermissionsBasePolicy\x12'\n" +
	"#PERMISSIONS_BASE_POLICY_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cPERMISSIONS_BASE_POLICY_DENY\x10\x01\x12*\n" +
	"&PERMISSIONS_BASE_POLICY_ALLOW_IF_ADMIN\x10\x02\x120\n" +
	",PERMISSIONS_BASE_POLICY_ALLOW_IF_SUPER_ADMIN\x10\x03B\x06\n" +
	"\x04kindB\xee\x01\n" +
	"\x1dcom.xmtp.mls.message_contentsB\x15GroupPermissionsProtoP\x01Z4github.com/xmtp/xmtpd/pkg/proto/mls/message_contents\xa2\x02\x03XMM\xaa\x02\x18Xmtp.Mls.MessageContents\xca\x02\x18Xmtp\\Mls\\MessageContents\xe2\x02$Xmtp\\Mls\\MessageContents\\GPBMetadata\xea\x02\x1aXmtp::Mls::MessageContentsb\x06proto3"

var (
	file_mls_message_contents_group_permissions_proto_rawDescOnce sync.Once
	file_mls_message_contents_group_permissions_proto_rawDescData []byte
)

func file_mls_message_contents_group_permissions_proto_rawDescGZIP() []byte {
	file_mls_message_contents_group_permissions_proto_rawDescOnce.Do(func() {
		file_mls_message_contents_group_permissions_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mls_message_contents_group_permissions_proto_rawDesc), len(file_mls_message_contents_group_permissions_proto_rawDesc)))
	})
	return file_mls_message_contents_group_permissions_proto_rawDescData
}

var file_mls_message_contents_group_permissions_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mls_message_contents_group_permissions_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_mls_message_contents_group_permissions_proto_goTypes = []any{
	(MembershipPolicy_BasePolicy)(0),                   // 0: xmtp.mls.message_contents.MembershipPolicy.BasePolicy
	(MetadataPolicy_MetadataBasePolicy)(0),             // 1: xmtp.mls.message_contents.MetadataPolicy.MetadataBasePolicy
	(PermissionsUpdatePolicy_PermissionsBasePolicy)(0), // 2: xmtp.mls.message_contents.PermissionsUpdatePolicy.PermissionsBasePolicy
	(*GroupMutablePermissionsV1)(nil),                  // 3: xmtp.mls.message_contents.GroupMutablePermissionsV1
	(*PolicySet)(nil),                                  // 4: xmtp.mls.message_contents.PolicySet
	(*MembershipPolicy)(nil),                           // 5: xmtp.mls.message_contents.MembershipPolicy
	(*MetadataPolicy)(nil),                             // 6: xmtp.mls.message_contents.MetadataPolicy
	(*PermissionsUpdatePolicy)(nil),                    // 7: xmtp.mls.message_contents.PermissionsUpdatePolicy
	nil,                                                // 8: xmtp.mls.message_contents.PolicySet.UpdateMetadataPolicyEntry
	(*MembershipPolicy_AndCondition)(nil),              // 9: xmtp.mls.message_contents.MembershipPolicy.AndCondition
	(*MembershipPolicy_AnyCondition)(nil),              // 10: xmtp.mls.message_contents.MembershipPolicy.AnyCondition
	(*MetadataPolicy_AndCondition)(nil),                // 11: xmtp.mls.message_contents.MetadataPolicy.AndCondition
	(*MetadataPolicy_AnyCondition)(nil),                // 12: xmtp.mls.message_contents.MetadataPolicy.AnyCondition
	(*PermissionsUpdatePolicy_AndCondition)(nil),       // 13: xmtp.mls.message_contents.PermissionsUpdatePolicy.AndCondition
	(*PermissionsUpdatePolicy_AnyCondition)(nil),       // 14: xmtp.mls.message_contents.PermissionsUpdatePolicy.AnyCondition
}
var file_mls_message_contents_group_permissions_proto_depIdxs = []int32{
	4,  // 0: xmtp.mls.message_contents.GroupMutablePermissionsV1.policies:type_name -> xmtp.mls.message_contents.PolicySet
	5,  // 1: xmtp.mls.message_contents.PolicySet.add_member_policy:type_name -> xmtp.mls.message_contents.MembershipPolicy
	5,  // 2: xmtp.mls.message_contents.PolicySet.remove_member_policy:type_name -> xmtp.mls.message_contents.MembershipPolicy
	8,  // 3: xmtp.mls.message_contents.PolicySet.update_metadata_policy:type_name -> xmtp.mls.message_contents.PolicySet.UpdateMetadataPolicyEntry
	7,  // 4: xmtp.mls.message_contents.PolicySet.add_admin_policy:type_name -> xmtp.mls.message_contents.PermissionsUpdatePolicy
	7,  // 5: xmtp.mls.message_contents.PolicySet.remove_admin_policy:type_name -> xmtp.mls.message_contents.PermissionsUpdatePolicy
	7,  // 6: xmtp.mls.message_contents.PolicySet.update_permissions_policy:type_name -> xmtp.mls.message_contents.PermissionsUpdatePolicy
	0,  // 7: xmtp.mls.message_contents.MembershipPolicy.base:type_name -> xmtp.mls.message_contents.MembershipPolicy.BasePolicy
	9,  // 8: xmtp.mls.message_contents.MembershipPolicy.and_condition:type_name -> xmtp.mls.message_contents.MembershipPolicy.AndCondition
	10, // 9: xmtp.mls.message_contents.MembershipPolicy.any_condition:type_name -> xmtp.mls.message_contents.MembershipPolicy.AnyCondition
	1,  // 10: xmtp.mls.message_contents.MetadataPolicy.base:type_name -> xmtp.mls.message_contents.MetadataPolicy.MetadataBasePolicy
	11, // 11: xmtp.mls.message_contents.MetadataPolicy.and_condition:type_name -> xmtp.mls.message_contents.MetadataPolicy.AndCondition
	12, // 12: xmtp.mls.message_contents.MetadataPolicy.any_condition:type_name -> xmtp.mls.message_contents.MetadataPolicy.AnyCondition
	2,  // 13: xmtp.mls.message_contents.PermissionsUpdatePolicy.base:type_name -> xmtp.mls.message_contents.PermissionsUpdatePolicy.PermissionsBasePolicy
	13, // 14: xmtp.mls.message_contents.PermissionsUpdatePolicy.and_condition:type_name -> xmtp.mls.message_contents.PermissionsUpdatePolicy.AndCondition
	14, // 15: xmtp.mls.message_contents.PermissionsUpdatePolicy.any_condition:type_name -> xmtp.mls.message_contents.PermissionsUpdatePolicy.AnyCondition
	6,  // 16: xmtp.mls.message_contents.PolicySet.UpdateMetadataPolicyEntry.value:type_name -> xmtp.mls.message_contents.MetadataPolicy
	5,  // 17: xmtp.mls.message_contents.MembershipPolicy.AndCondition.policies:type_name -> xmtp.mls.message_contents.MembershipPolicy
	5,  // 18: xmtp.mls.message_contents.MembershipPolicy.AnyCondition.policies:type_name -> xmtp.mls.message_contents.MembershipPolicy
	6,  // 19: xmtp.mls.message_contents.MetadataPolicy.AndCondition.policies:type_name -> xmtp.mls.message_contents.MetadataPolicy
	6,  // 20: xmtp.mls.message_contents.MetadataPolicy.AnyCondition.policies:type_name -> xmtp.mls.message_contents.MetadataPolicy
	7,  // 21: xmtp.mls.message_contents.PermissionsUpdatePolicy.AndCondition.policies:type_name -> xmtp.mls.message_contents.PermissionsUpdatePolicy
	7,  // 22: xmtp.mls.message_contents.PermissionsUpdatePolicy.AnyCondition.policies:type_name -> xmtp.mls.message_contents.PermissionsUpdatePolicy
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_mls_message_contents_group_permissions_proto_init() }
func file_mls_message_contents_group_permissions_proto_init() {
	if File_mls_message_contents_group_permissions_proto != nil {
		return
	}
	file_mls_message_contents_group_permissions_proto_msgTypes[2].OneofWrappers = []any{
		(*MembershipPolicy_Base)(nil),
		(*MembershipPolicy_AndCondition_)(nil),
		(*MembershipPolicy_AnyCondition_)(nil),
	}
	file_mls_message_contents_group_permissions_proto_msgTypes[3].OneofWrappers = []any{
		(*MetadataPolicy_Base)(nil),
		(*MetadataPolicy_AndCondition_)(nil),
		(*MetadataPolicy_AnyCondition_)(nil),
	}
	file_mls_message_contents_group_permissions_proto_msgTypes[4].OneofWrappers = []any{
		(*PermissionsUpdatePolicy_Base)(nil),
		(*PermissionsUpdatePolicy_AndCondition_)(nil),
		(*PermissionsUpdatePolicy_AnyCondition_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mls_message_contents_group_permissions_proto_rawDesc), len(file_mls_message_contents_group_permissions_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mls_message_contents_group_permissions_proto_goTypes,
		DependencyIndexes: file_mls_message_contents_group_permissions_proto_depIdxs,
		EnumInfos:         file_mls_message_contents_group_permissions_proto_enumTypes,
		MessageInfos:      file_mls_message_contents_group_permissions_proto_msgTypes,
	}.Build()
	File_mls_message_contents_group_permissions_proto = out.File
	file_mls_message_contents_group_permissions_proto_goTypes = nil
	file_mls_message_contents_group_permissions_proto_depIdxs = nil
}
