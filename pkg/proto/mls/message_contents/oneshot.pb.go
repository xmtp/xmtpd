// Out-of-band signaling payloads that are sent between devices on
// side channels outside of the main group.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: mls/message_contents/oneshot.proto

package message_contents

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OneshotMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*OneshotMessage_ReaddRequest
	MessageType   isOneshotMessage_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OneshotMessage) Reset() {
	*x = OneshotMessage{}
	mi := &file_mls_message_contents_oneshot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OneshotMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneshotMessage) ProtoMessage() {}

func (x *OneshotMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_oneshot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneshotMessage.ProtoReflect.Descriptor instead.
func (*OneshotMessage) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_oneshot_proto_rawDescGZIP(), []int{0}
}

func (x *OneshotMessage) GetMessageType() isOneshotMessage_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *OneshotMessage) GetReaddRequest() *ReaddRequest {
	if x != nil {
		if x, ok := x.MessageType.(*OneshotMessage_ReaddRequest); ok {
			return x.ReaddRequest
		}
	}
	return nil
}

type isOneshotMessage_MessageType interface {
	isOneshotMessage_MessageType()
}

type OneshotMessage_ReaddRequest struct {
	ReaddRequest *ReaddRequest `protobuf:"bytes,1,opt,name=readd_request,json=readdRequest,proto3,oneof"`
}

func (*OneshotMessage_ReaddRequest) isOneshotMessage_MessageType() {}

// A request sent by an installation to recover from a fork. Other members
// may remove and readd that installation from the group.
// XIP: https://community.xmtp.org/t/xip-68-draft-automated-fork-recovery/951
type ReaddRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	GroupId []byte                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The sequence ID of the latest commit log entry at the time the request
	// is sent; used to disambiguate cases where an installation forks
	// and is readded multiple times.
	LatestCommitSequenceId uint64 `protobuf:"varint,2,opt,name=latest_commit_sequence_id,json=latestCommitSequenceId,proto3" json:"latest_commit_sequence_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ReaddRequest) Reset() {
	*x = ReaddRequest{}
	mi := &file_mls_message_contents_oneshot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReaddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaddRequest) ProtoMessage() {}

func (x *ReaddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mls_message_contents_oneshot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaddRequest.ProtoReflect.Descriptor instead.
func (*ReaddRequest) Descriptor() ([]byte, []int) {
	return file_mls_message_contents_oneshot_proto_rawDescGZIP(), []int{1}
}

func (x *ReaddRequest) GetGroupId() []byte {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *ReaddRequest) GetLatestCommitSequenceId() uint64 {
	if x != nil {
		return x.LatestCommitSequenceId
	}
	return 0
}

var File_mls_message_contents_oneshot_proto protoreflect.FileDescriptor

const file_mls_message_contents_oneshot_proto_rawDesc = "" +
	"\n" +
	"\"mls/message_contents/oneshot.proto\x12\x19xmtp.mls.message_contents\"p\n" +
	"\x0eOneshotMessage\x12N\n" +
	"\rreadd_request\x18\x01 \x01(\v2'.xmtp.mls.message_contents.ReaddRequestH\x00R\freaddRequestB\x0e\n" +
	"\fmessage_type\"d\n" +
	"\fReaddRequest\x12\x19\n" +
	"\bgroup_id\x18\x01 \x01(\fR\agroupId\x129\n" +
	"\x19latest_commit_sequence_id\x18\x02 \x01(\x04R\x16latestCommitSequenceIdB\xe5\x01\n" +
	"\x1dcom.xmtp.mls.message_contentsB\fOneshotProtoP\x01Z4github.com/xmtp/xmtpd/pkg/proto/mls/message_contents\xa2\x02\x03XMM\xaa\x02\x18Xmtp.Mls.MessageContents\xca\x02\x18Xmtp\\Mls\\MessageContents\xe2\x02$Xmtp\\Mls\\MessageContents\\GPBMetadata\xea\x02\x1aXmtp::Mls::MessageContentsb\x06proto3"

var (
	file_mls_message_contents_oneshot_proto_rawDescOnce sync.Once
	file_mls_message_contents_oneshot_proto_rawDescData []byte
)

func file_mls_message_contents_oneshot_proto_rawDescGZIP() []byte {
	file_mls_message_contents_oneshot_proto_rawDescOnce.Do(func() {
		file_mls_message_contents_oneshot_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mls_message_contents_oneshot_proto_rawDesc), len(file_mls_message_contents_oneshot_proto_rawDesc)))
	})
	return file_mls_message_contents_oneshot_proto_rawDescData
}

var file_mls_message_contents_oneshot_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mls_message_contents_oneshot_proto_goTypes = []any{
	(*OneshotMessage)(nil), // 0: xmtp.mls.message_contents.OneshotMessage
	(*ReaddRequest)(nil),   // 1: xmtp.mls.message_contents.ReaddRequest
}
var file_mls_message_contents_oneshot_proto_depIdxs = []int32{
	1, // 0: xmtp.mls.message_contents.OneshotMessage.readd_request:type_name -> xmtp.mls.message_contents.ReaddRequest
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_mls_message_contents_oneshot_proto_init() }
func file_mls_message_contents_oneshot_proto_init() {
	if File_mls_message_contents_oneshot_proto != nil {
		return
	}
	file_mls_message_contents_oneshot_proto_msgTypes[0].OneofWrappers = []any{
		(*OneshotMessage_ReaddRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mls_message_contents_oneshot_proto_rawDesc), len(file_mls_message_contents_oneshot_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mls_message_contents_oneshot_proto_goTypes,
		DependencyIndexes: file_mls_message_contents_oneshot_proto_depIdxs,
		MessageInfos:      file_mls_message_contents_oneshot_proto_msgTypes,
	}.Build()
	File_mls_message_contents_oneshot_proto = out.File
	file_mls_message_contents_oneshot_proto_goTypes = nil
	file_mls_message_contents_oneshot_proto_depIdxs = nil
}
