// Message API

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mls_validation/v1/service.proto

package mls_validationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/xmtp/xmtpd/pkg/proto/identity/api/v1"
	v1 "github.com/xmtp/xmtpd/pkg/proto/mls_validation/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ValidationApiName is the fully-qualified name of the ValidationApi service.
	ValidationApiName = "xmtp.mls_validation.v1.ValidationApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ValidationApiValidateGroupMessagesProcedure is the fully-qualified name of the ValidationApi's
	// ValidateGroupMessages RPC.
	ValidationApiValidateGroupMessagesProcedure = "/xmtp.mls_validation.v1.ValidationApi/ValidateGroupMessages"
	// ValidationApiGetAssociationStateProcedure is the fully-qualified name of the ValidationApi's
	// GetAssociationState RPC.
	ValidationApiGetAssociationStateProcedure = "/xmtp.mls_validation.v1.ValidationApi/GetAssociationState"
	// ValidationApiValidateInboxIdKeyPackagesProcedure is the fully-qualified name of the
	// ValidationApi's ValidateInboxIdKeyPackages RPC.
	ValidationApiValidateInboxIdKeyPackagesProcedure = "/xmtp.mls_validation.v1.ValidationApi/ValidateInboxIdKeyPackages"
	// ValidationApiVerifySmartContractWalletSignaturesProcedure is the fully-qualified name of the
	// ValidationApi's VerifySmartContractWalletSignatures RPC.
	ValidationApiVerifySmartContractWalletSignaturesProcedure = "/xmtp.mls_validation.v1.ValidationApi/VerifySmartContractWalletSignatures"
)

// ValidationApiClient is a client for the xmtp.mls_validation.v1.ValidationApi service.
type ValidationApiClient interface {
	// Validates and parses a group message and returns relevant details
	ValidateGroupMessages(context.Context, *connect.Request[v1.ValidateGroupMessagesRequest]) (*connect.Response[v1.ValidateGroupMessagesResponse], error)
	// Gets the final association state for a batch of identity updates
	GetAssociationState(context.Context, *connect.Request[v1.GetAssociationStateRequest]) (*connect.Response[v1.GetAssociationStateResponse], error)
	// Validates InboxID key packages and returns credential information for them,
	// without checking whether an InboxId <> InstallationPublicKey pair is really
	// valid.
	ValidateInboxIdKeyPackages(context.Context, *connect.Request[v1.ValidateKeyPackagesRequest]) (*connect.Response[v1.ValidateInboxIdKeyPackagesResponse], error)
	// Verifies smart contracts
	// This request is proxied from the node, so we'll reuse those messages.
	VerifySmartContractWalletSignatures(context.Context, *connect.Request[v11.VerifySmartContractWalletSignaturesRequest]) (*connect.Response[v11.VerifySmartContractWalletSignaturesResponse], error)
}

// NewValidationApiClient constructs a client for the xmtp.mls_validation.v1.ValidationApi service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewValidationApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ValidationApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	validationApiMethods := v1.File_mls_validation_v1_service_proto.Services().ByName("ValidationApi").Methods()
	return &validationApiClient{
		validateGroupMessages: connect.NewClient[v1.ValidateGroupMessagesRequest, v1.ValidateGroupMessagesResponse](
			httpClient,
			baseURL+ValidationApiValidateGroupMessagesProcedure,
			connect.WithSchema(validationApiMethods.ByName("ValidateGroupMessages")),
			connect.WithClientOptions(opts...),
		),
		getAssociationState: connect.NewClient[v1.GetAssociationStateRequest, v1.GetAssociationStateResponse](
			httpClient,
			baseURL+ValidationApiGetAssociationStateProcedure,
			connect.WithSchema(validationApiMethods.ByName("GetAssociationState")),
			connect.WithClientOptions(opts...),
		),
		validateInboxIdKeyPackages: connect.NewClient[v1.ValidateKeyPackagesRequest, v1.ValidateInboxIdKeyPackagesResponse](
			httpClient,
			baseURL+ValidationApiValidateInboxIdKeyPackagesProcedure,
			connect.WithSchema(validationApiMethods.ByName("ValidateInboxIdKeyPackages")),
			connect.WithClientOptions(opts...),
		),
		verifySmartContractWalletSignatures: connect.NewClient[v11.VerifySmartContractWalletSignaturesRequest, v11.VerifySmartContractWalletSignaturesResponse](
			httpClient,
			baseURL+ValidationApiVerifySmartContractWalletSignaturesProcedure,
			connect.WithSchema(validationApiMethods.ByName("VerifySmartContractWalletSignatures")),
			connect.WithClientOptions(opts...),
		),
	}
}

// validationApiClient implements ValidationApiClient.
type validationApiClient struct {
	validateGroupMessages               *connect.Client[v1.ValidateGroupMessagesRequest, v1.ValidateGroupMessagesResponse]
	getAssociationState                 *connect.Client[v1.GetAssociationStateRequest, v1.GetAssociationStateResponse]
	validateInboxIdKeyPackages          *connect.Client[v1.ValidateKeyPackagesRequest, v1.ValidateInboxIdKeyPackagesResponse]
	verifySmartContractWalletSignatures *connect.Client[v11.VerifySmartContractWalletSignaturesRequest, v11.VerifySmartContractWalletSignaturesResponse]
}

// ValidateGroupMessages calls xmtp.mls_validation.v1.ValidationApi.ValidateGroupMessages.
func (c *validationApiClient) ValidateGroupMessages(ctx context.Context, req *connect.Request[v1.ValidateGroupMessagesRequest]) (*connect.Response[v1.ValidateGroupMessagesResponse], error) {
	return c.validateGroupMessages.CallUnary(ctx, req)
}

// GetAssociationState calls xmtp.mls_validation.v1.ValidationApi.GetAssociationState.
func (c *validationApiClient) GetAssociationState(ctx context.Context, req *connect.Request[v1.GetAssociationStateRequest]) (*connect.Response[v1.GetAssociationStateResponse], error) {
	return c.getAssociationState.CallUnary(ctx, req)
}

// ValidateInboxIdKeyPackages calls xmtp.mls_validation.v1.ValidationApi.ValidateInboxIdKeyPackages.
func (c *validationApiClient) ValidateInboxIdKeyPackages(ctx context.Context, req *connect.Request[v1.ValidateKeyPackagesRequest]) (*connect.Response[v1.ValidateInboxIdKeyPackagesResponse], error) {
	return c.validateInboxIdKeyPackages.CallUnary(ctx, req)
}

// VerifySmartContractWalletSignatures calls
// xmtp.mls_validation.v1.ValidationApi.VerifySmartContractWalletSignatures.
func (c *validationApiClient) VerifySmartContractWalletSignatures(ctx context.Context, req *connect.Request[v11.VerifySmartContractWalletSignaturesRequest]) (*connect.Response[v11.VerifySmartContractWalletSignaturesResponse], error) {
	return c.verifySmartContractWalletSignatures.CallUnary(ctx, req)
}

// ValidationApiHandler is an implementation of the xmtp.mls_validation.v1.ValidationApi service.
type ValidationApiHandler interface {
	// Validates and parses a group message and returns relevant details
	ValidateGroupMessages(context.Context, *connect.Request[v1.ValidateGroupMessagesRequest]) (*connect.Response[v1.ValidateGroupMessagesResponse], error)
	// Gets the final association state for a batch of identity updates
	GetAssociationState(context.Context, *connect.Request[v1.GetAssociationStateRequest]) (*connect.Response[v1.GetAssociationStateResponse], error)
	// Validates InboxID key packages and returns credential information for them,
	// without checking whether an InboxId <> InstallationPublicKey pair is really
	// valid.
	ValidateInboxIdKeyPackages(context.Context, *connect.Request[v1.ValidateKeyPackagesRequest]) (*connect.Response[v1.ValidateInboxIdKeyPackagesResponse], error)
	// Verifies smart contracts
	// This request is proxied from the node, so we'll reuse those messages.
	VerifySmartContractWalletSignatures(context.Context, *connect.Request[v11.VerifySmartContractWalletSignaturesRequest]) (*connect.Response[v11.VerifySmartContractWalletSignaturesResponse], error)
}

// NewValidationApiHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewValidationApiHandler(svc ValidationApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	validationApiMethods := v1.File_mls_validation_v1_service_proto.Services().ByName("ValidationApi").Methods()
	validationApiValidateGroupMessagesHandler := connect.NewUnaryHandler(
		ValidationApiValidateGroupMessagesProcedure,
		svc.ValidateGroupMessages,
		connect.WithSchema(validationApiMethods.ByName("ValidateGroupMessages")),
		connect.WithHandlerOptions(opts...),
	)
	validationApiGetAssociationStateHandler := connect.NewUnaryHandler(
		ValidationApiGetAssociationStateProcedure,
		svc.GetAssociationState,
		connect.WithSchema(validationApiMethods.ByName("GetAssociationState")),
		connect.WithHandlerOptions(opts...),
	)
	validationApiValidateInboxIdKeyPackagesHandler := connect.NewUnaryHandler(
		ValidationApiValidateInboxIdKeyPackagesProcedure,
		svc.ValidateInboxIdKeyPackages,
		connect.WithSchema(validationApiMethods.ByName("ValidateInboxIdKeyPackages")),
		connect.WithHandlerOptions(opts...),
	)
	validationApiVerifySmartContractWalletSignaturesHandler := connect.NewUnaryHandler(
		ValidationApiVerifySmartContractWalletSignaturesProcedure,
		svc.VerifySmartContractWalletSignatures,
		connect.WithSchema(validationApiMethods.ByName("VerifySmartContractWalletSignatures")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xmtp.mls_validation.v1.ValidationApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ValidationApiValidateGroupMessagesProcedure:
			validationApiValidateGroupMessagesHandler.ServeHTTP(w, r)
		case ValidationApiGetAssociationStateProcedure:
			validationApiGetAssociationStateHandler.ServeHTTP(w, r)
		case ValidationApiValidateInboxIdKeyPackagesProcedure:
			validationApiValidateInboxIdKeyPackagesHandler.ServeHTTP(w, r)
		case ValidationApiVerifySmartContractWalletSignaturesProcedure:
			validationApiVerifySmartContractWalletSignaturesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedValidationApiHandler returns CodeUnimplemented from all methods.
type UnimplementedValidationApiHandler struct{}

func (UnimplementedValidationApiHandler) ValidateGroupMessages(context.Context, *connect.Request[v1.ValidateGroupMessagesRequest]) (*connect.Response[v1.ValidateGroupMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls_validation.v1.ValidationApi.ValidateGroupMessages is not implemented"))
}

func (UnimplementedValidationApiHandler) GetAssociationState(context.Context, *connect.Request[v1.GetAssociationStateRequest]) (*connect.Response[v1.GetAssociationStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls_validation.v1.ValidationApi.GetAssociationState is not implemented"))
}

func (UnimplementedValidationApiHandler) ValidateInboxIdKeyPackages(context.Context, *connect.Request[v1.ValidateKeyPackagesRequest]) (*connect.Response[v1.ValidateInboxIdKeyPackagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls_validation.v1.ValidationApi.ValidateInboxIdKeyPackages is not implemented"))
}

func (UnimplementedValidationApiHandler) VerifySmartContractWalletSignatures(context.Context, *connect.Request[v11.VerifySmartContractWalletSignaturesRequest]) (*connect.Response[v11.VerifySmartContractWalletSignaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.mls_validation.v1.ValidationApi.VerifySmartContractWalletSignatures is not implemented"))
}
