{
  "swagger": "2.0",
  "info": {
    "title": "IdentityApi",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "IdentityApi"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/identity/v1/get-identity-updates": {
      "post": {
        "summary": "Used to check for changes related to members of a group.\nWould return an array of any new installations associated with the wallet\naddress, and any revocations that have happened.",
        "operationId": "IdentityApi_GetIdentityUpdates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/xmtpidentityapiv1GetIdentityUpdatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/xmtpidentityapiv1GetIdentityUpdatesRequest"
            }
          }
        ],
        "tags": [
          "IdentityApi"
        ]
      }
    },
    "/identity/v1/get-inbox-ids": {
      "post": {
        "summary": "Retrieve the XIDs for the given addresses",
        "operationId": "IdentityApi_GetInboxIds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1GetInboxIdsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiv1GetInboxIdsRequest"
            }
          }
        ],
        "tags": [
          "IdentityApi"
        ]
      }
    },
    "/identity/v1/publish-identity-update": {
      "post": {
        "summary": "Publishes an identity update for an XID or wallet. An identity update may\nconsist of multiple identity actions that have been batch signed.",
        "operationId": "IdentityApi_PublishIdentityUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PublishIdentityUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PublishIdentityUpdateRequest"
            }
          }
        ],
        "tags": [
          "IdentityApi"
        ]
      }
    },
    "/identity/v1/verify-smart-contract-wallet-signatures": {
      "post": {
        "summary": "Verify an unverified smart contract wallet signature",
        "operationId": "IdentityApi_VerifySmartContractWalletSignatures",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifySmartContractWalletSignaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifySmartContractWalletSignaturesRequest"
            }
          }
        ],
        "tags": [
          "IdentityApi"
        ]
      }
    }
  },
  "definitions": {
    "GetIdentityUpdatesResponseIdentityUpdateLog": {
      "type": "object",
      "properties": {
        "sequenceId": {
          "type": "string",
          "format": "uint64"
        },
        "serverTimestampNs": {
          "type": "string",
          "format": "uint64"
        },
        "update": {
          "$ref": "#/definitions/associationsIdentityUpdate"
        }
      },
      "description": "A single entry in the XID log on the server."
    },
    "SignatureECDSACompact": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte",
          "title": "compact representation [ R || S ], 64 bytes"
        },
        "recovery": {
          "type": "integer",
          "format": "int64",
          "title": "recovery bit"
        }
      },
      "title": "ECDSA signature bytes and the recovery bit"
    },
    "SignatureWalletECDSACompact": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte",
          "title": "compact representation [ R || S ], 64 bytes"
        },
        "recovery": {
          "type": "integer",
          "format": "int64",
          "title": "recovery bit"
        }
      },
      "description": "ECDSA signature bytes and the recovery bit\nproduced by xmtp-js::PublicKey.signWithWallet function, i.e.\nEIP-191 signature of a \"Create Identity\" message with the key embedded.\nUsed to sign identity keys."
    },
    "apiv1GetInboxIdsRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiv1GetInboxIdsRequestRequest"
          }
        }
      },
      "title": "Request to retrieve the XIDs for the given addresses"
    },
    "apiv1GetInboxIdsRequestRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "identifierKind": {
          "$ref": "#/definitions/associationsIdentifierKind"
        }
      },
      "title": "A single request for a given address"
    },
    "apiv1GetInboxIdsResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiv1GetInboxIdsResponseResponse"
          }
        }
      },
      "title": "Response with the XIDs for the requested addresses"
    },
    "apiv1GetInboxIdsResponseResponse": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "inboxId": {
          "type": "string"
        },
        "identifierKind": {
          "$ref": "#/definitions/associationsIdentifierKind"
        }
      },
      "title": "A single response for a given address"
    },
    "associationsAddAssociation": {
      "type": "object",
      "properties": {
        "newMemberIdentifier": {
          "$ref": "#/definitions/associationsMemberIdentifier"
        },
        "existingMemberSignature": {
          "$ref": "#/definitions/identityassociationsSignature"
        },
        "newMemberSignature": {
          "$ref": "#/definitions/identityassociationsSignature"
        },
        "relyingPartner": {
          "type": "string",
          "title": "Should be provided if identifier kind is passkey"
        }
      },
      "description": "Adds a new member for an XID - either an addressable member such as a\nwallet, or an installation acting on behalf of an address.\nA key-pair that has been associated with one role MUST not be permitted to be\nassociated with a different role."
    },
    "associationsChangeRecoveryAddress": {
      "type": "object",
      "properties": {
        "newRecoveryIdentifier": {
          "type": "string"
        },
        "existingRecoveryIdentifierSignature": {
          "$ref": "#/definitions/identityassociationsSignature"
        },
        "newRecoveryIdentifierKind": {
          "$ref": "#/definitions/associationsIdentifierKind"
        },
        "relyingPartner": {
          "type": "string",
          "title": "Should be provided if identifier kind is passkey"
        }
      },
      "description": "Changes the recovery identifier for an XID. The recovery identifier is not required\nto be a member of the XID. In addition to being able to add members, the\nrecovery identifier can also revoke members."
    },
    "associationsCreateInbox": {
      "type": "object",
      "properties": {
        "initialIdentifier": {
          "type": "string"
        },
        "nonce": {
          "type": "string",
          "format": "uint64"
        },
        "initialIdentifierSignature": {
          "$ref": "#/definitions/identityassociationsSignature",
          "title": "Must be an addressable member"
        },
        "initialIdentifierKind": {
          "$ref": "#/definitions/associationsIdentifierKind"
        },
        "relyingPartner": {
          "type": "string",
          "title": "Should be provided if identifier kind is passkey"
        }
      },
      "description": "The first entry of any XID log. The XID must be deterministically derivable\nfrom the address and nonce.\nThe recovery address defaults to the initial associated_address unless\nthere is a subsequent ChangeRecoveryAddress in the log."
    },
    "associationsIdentifierKind": {
      "type": "string",
      "enum": [
        "IDENTIFIER_KIND_UNSPECIFIED",
        "IDENTIFIER_KIND_ETHEREUM",
        "IDENTIFIER_KIND_PASSKEY"
      ],
      "default": "IDENTIFIER_KIND_UNSPECIFIED",
      "description": "- IDENTIFIER_KIND_UNSPECIFIED: Ethereum on old clients",
      "title": "List of identity kinds"
    },
    "associationsIdentityAction": {
      "type": "object",
      "properties": {
        "createInbox": {
          "$ref": "#/definitions/associationsCreateInbox"
        },
        "add": {
          "$ref": "#/definitions/associationsAddAssociation"
        },
        "revoke": {
          "$ref": "#/definitions/associationsRevokeAssociation"
        },
        "changeRecoveryAddress": {
          "$ref": "#/definitions/associationsChangeRecoveryAddress"
        }
      },
      "title": "A single identity operation"
    },
    "associationsIdentityUpdate": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/associationsIdentityAction"
          }
        },
        "clientTimestampNs": {
          "type": "string",
          "format": "uint64"
        },
        "inboxId": {
          "type": "string"
        }
      },
      "description": "One or more identity actions that were signed together.\nExample: [CreateXid, AddAssociation, ChangeRecoveryAddress]\n1. The batched signature text is created by concatenating the signature text\n   of each association together with a separator, '\\n\\n\\n'.\n2. The user signs this concatenated result.\n3. The resulting signature is added to each association proto where relevant.\n   The same signature may be used for multiple associations in the array."
    },
    "associationsLegacyDelegatedSignature": {
      "type": "object",
      "properties": {
        "delegatedKey": {
          "$ref": "#/definitions/message_contentsSignedPublicKey"
        },
        "signature": {
          "$ref": "#/definitions/associationsRecoverableEcdsaSignature"
        }
      },
      "description": "An existing address on xmtpv2 may have already signed a legacy identity key\nof type SignedPublicKey via the 'Create Identity' signature.\nFor migration to xmtpv3, the legacy key is permitted to sign on behalf of the\naddress to create a matching xmtpv3 installation key.\nThis signature type can ONLY be used for CreateXid and AddAssociation\npayloads, and can only be used once in xmtpv3."
    },
    "associationsMemberIdentifier": {
      "type": "object",
      "properties": {
        "ethereumAddress": {
          "type": "string"
        },
        "installationPublicKey": {
          "type": "string",
          "format": "byte"
        },
        "passkey": {
          "$ref": "#/definitions/associationsPasskey"
        }
      },
      "title": "The identifier for a member of an XID"
    },
    "associationsPasskey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte"
        },
        "relyingPartner": {
          "type": "string"
        }
      },
      "title": "Passkey identifier"
    },
    "associationsRecoverableEcdsaSignature": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte",
          "title": "65-bytes [ R || S || V ], with recovery id as the last byte"
        }
      },
      "title": "RecoverableEcdsaSignature for EIP-191 and V2 signatures"
    },
    "associationsRecoverableEd25519Signature": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte",
          "title": "64 bytes [R(32 bytes) || S(32 bytes)]"
        },
        "publicKey": {
          "type": "string",
          "format": "byte",
          "title": "32 bytes"
        }
      },
      "title": "EdDSA signature for 25519"
    },
    "associationsRevokeAssociation": {
      "type": "object",
      "properties": {
        "memberToRevoke": {
          "$ref": "#/definitions/associationsMemberIdentifier"
        },
        "recoveryIdentifierSignature": {
          "$ref": "#/definitions/identityassociationsSignature"
        }
      },
      "description": "Revokes a member from an XID. The recovery address must sign the revocation."
    },
    "associationsSmartContractWalletSignature": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "title": "CAIP-10 string\nhttps://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64",
          "title": "Specify the block number to verify the signature against"
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "title": "The actual signature bytes"
        }
      },
      "title": "Smart Contract Wallet signature"
    },
    "identityassociationsSignature": {
      "type": "object",
      "properties": {
        "erc191": {
          "$ref": "#/definitions/associationsRecoverableEcdsaSignature"
        },
        "erc6492": {
          "$ref": "#/definitions/associationsSmartContractWalletSignature"
        },
        "installationKey": {
          "$ref": "#/definitions/associationsRecoverableEd25519Signature"
        },
        "delegatedErc191": {
          "$ref": "#/definitions/associationsLegacyDelegatedSignature"
        }
      },
      "title": "A wrapper for all possible signature types"
    },
    "message_contentsSignedPublicKey": {
      "type": "object",
      "properties": {
        "keyBytes": {
          "type": "string",
          "format": "byte",
          "title": "embeds an UnsignedPublicKey"
        },
        "signature": {
          "$ref": "#/definitions/xmtpmessage_contentsSignature",
          "title": "signs key_bytes"
        }
      },
      "title": "SignedPublicKey"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1GetIdentityUpdatesRequestRequest": {
      "type": "object",
      "properties": {
        "inboxId": {
          "type": "string"
        },
        "sequenceId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "Points to the last entry the client has received. The sequence_id should be\nset to 0 if the client has not received anything."
    },
    "v1GetIdentityUpdatesResponseResponse": {
      "type": "object",
      "properties": {
        "inboxId": {
          "type": "string"
        },
        "updates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetIdentityUpdatesResponseIdentityUpdateLog"
          }
        }
      },
      "title": "The update log for a single identity, starting after the last cursor"
    },
    "v1PublishIdentityUpdateRequest": {
      "type": "object",
      "properties": {
        "identityUpdate": {
          "$ref": "#/definitions/associationsIdentityUpdate"
        }
      },
      "title": "Publishes an identity update to the network"
    },
    "v1PublishIdentityUpdateResponse": {
      "type": "object",
      "title": "The response when an identity update is published"
    },
    "v1VerifySmartContractWalletSignatureRequestSignature": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "title": "CAIP-10 string\nhttps://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64",
          "title": "Specify the block number to verify the signature against"
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "title": "The signature bytes"
        },
        "hash": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1VerifySmartContractWalletSignaturesRequest": {
      "type": "object",
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VerifySmartContractWalletSignatureRequestSignature"
          }
        }
      }
    },
    "v1VerifySmartContractWalletSignaturesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VerifySmartContractWalletSignaturesResponseValidationResponse"
          }
        }
      }
    },
    "v1VerifySmartContractWalletSignaturesResponseValidationResponse": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "boolean"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "xmtpidentityapiv1GetIdentityUpdatesRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetIdentityUpdatesRequestRequest"
          }
        }
      },
      "title": "Get all updates for an identity since the specified time"
    },
    "xmtpidentityapiv1GetIdentityUpdatesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetIdentityUpdatesResponseResponse"
          }
        }
      },
      "title": "Returns all log entries for the requested identities"
    },
    "xmtpmessage_contentsSignature": {
      "type": "object",
      "properties": {
        "ecdsaCompact": {
          "$ref": "#/definitions/SignatureECDSACompact"
        },
        "walletEcdsaCompact": {
          "$ref": "#/definitions/SignatureWalletECDSACompact"
        }
      },
      "description": "Signature represents a generalized public key signature,\ndefined as a union to support cryptographic algorithm agility."
    }
  }
}
