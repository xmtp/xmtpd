{
  "swagger": "2.0",
  "info": {
    "title": "mls_validation/v1/service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ValidationApi"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "SignatureECDSACompact": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte",
          "title": "compact representation [ R || S ], 64 bytes"
        },
        "recovery": {
          "type": "integer",
          "format": "int64",
          "title": "recovery bit"
        }
      },
      "title": "ECDSA signature bytes and the recovery bit"
    },
    "SignatureWalletECDSACompact": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte",
          "title": "compact representation [ R || S ], 64 bytes"
        },
        "recovery": {
          "type": "integer",
          "format": "int64",
          "title": "recovery bit"
        }
      },
      "description": "ECDSA signature bytes and the recovery bit\nproduced by xmtp-js::PublicKey.signWithWallet function, i.e.\nEIP-191 signature of a \"Create Identity\" message with the key embedded.\nUsed to sign identity keys."
    },
    "ValidateInboxIdsRequestValidationRequest": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/identityMlsCredential"
        },
        "installationPublicKey": {
          "type": "string",
          "format": "byte"
        },
        "identityUpdates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/associationsIdentityUpdate"
          }
        }
      },
      "title": "a single validation request"
    },
    "associationsAddAssociation": {
      "type": "object",
      "properties": {
        "newMemberIdentifier": {
          "$ref": "#/definitions/associationsMemberIdentifier"
        },
        "existingMemberSignature": {
          "$ref": "#/definitions/identityassociationsSignature"
        },
        "newMemberSignature": {
          "$ref": "#/definitions/identityassociationsSignature"
        }
      },
      "description": "Adds a new member for an XID - either an addressable member such as a\nwallet, or an installation acting on behalf of an address.\nA key-pair that has been associated with one role MUST not be permitted to be\nassociated with a different role."
    },
    "associationsAssociationState": {
      "type": "object",
      "properties": {
        "inboxId": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/associationsMemberMap"
          }
        },
        "recoveryAddress": {
          "type": "string"
        },
        "seenSignatures": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "title": "A final association state resulting from multiple `IdentityUpdates`"
    },
    "associationsAssociationStateDiff": {
      "type": "object",
      "properties": {
        "newMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/associationsMemberIdentifier"
          }
        },
        "removedMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/associationsMemberIdentifier"
          }
        }
      },
      "title": "/ state diff between two final AssociationStates"
    },
    "associationsChangeRecoveryAddress": {
      "type": "object",
      "properties": {
        "newRecoveryAddress": {
          "type": "string"
        },
        "existingRecoveryAddressSignature": {
          "$ref": "#/definitions/identityassociationsSignature"
        }
      },
      "description": "Changes the recovery address for an XID. The recovery address is not required\nto be a member of the XID. In addition to being able to add members, the\nrecovery address can also revoke members."
    },
    "associationsCreateInbox": {
      "type": "object",
      "properties": {
        "initialAddress": {
          "type": "string"
        },
        "nonce": {
          "type": "string",
          "format": "uint64"
        },
        "initialAddressSignature": {
          "$ref": "#/definitions/identityassociationsSignature",
          "title": "Must be an addressable member"
        }
      },
      "description": "The first entry of any XID log. The XID must be deterministically derivable\nfrom the address and nonce.\nThe recovery address defaults to the initial associated_address unless\nthere is a subsequent ChangeRecoveryAddress in the log."
    },
    "associationsIdentityAction": {
      "type": "object",
      "properties": {
        "createInbox": {
          "$ref": "#/definitions/associationsCreateInbox"
        },
        "add": {
          "$ref": "#/definitions/associationsAddAssociation"
        },
        "revoke": {
          "$ref": "#/definitions/associationsRevokeAssociation"
        },
        "changeRecoveryAddress": {
          "$ref": "#/definitions/associationsChangeRecoveryAddress"
        }
      },
      "title": "A single identity operation"
    },
    "associationsIdentityUpdate": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/associationsIdentityAction"
          }
        },
        "clientTimestampNs": {
          "type": "string",
          "format": "uint64"
        },
        "inboxId": {
          "type": "string"
        }
      },
      "description": "One or more identity actions that were signed together.\nExample: [CreateXid, AddAssociation, ChangeRecoveryAddress]\n1. The batched signature text is created by concatenating the signature text\n   of each association together with a separator, '\\n\\n\\n'.\n2. The user signs this concatenated result.\n3. The resulting signature is added to each association proto where relevant.\n   The same signature may be used for multiple associations in the array."
    },
    "associationsLegacyDelegatedSignature": {
      "type": "object",
      "properties": {
        "delegatedKey": {
          "$ref": "#/definitions/message_contentsSignedPublicKey"
        },
        "signature": {
          "$ref": "#/definitions/associationsRecoverableEcdsaSignature"
        }
      },
      "description": "An existing address on xmtpv2 may have already signed a legacy identity key\nof type SignedPublicKey via the 'Create Identity' signature.\nFor migration to xmtpv3, the legacy key is permitted to sign on behalf of the\naddress to create a matching xmtpv3 installation key.\nThis signature type can ONLY be used for CreateXid and AddAssociation\npayloads, and can only be used once in xmtpv3."
    },
    "associationsMember": {
      "type": "object",
      "properties": {
        "identifier": {
          "$ref": "#/definitions/associationsMemberIdentifier"
        },
        "addedByEntity": {
          "$ref": "#/definitions/associationsMemberIdentifier"
        },
        "clientTimestampNs": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "single member that optionally indicates the member that added them"
    },
    "associationsMemberIdentifier": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "installationPublicKey": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "The identifier for a member of an XID"
    },
    "associationsMemberMap": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/associationsMemberIdentifier"
        },
        "value": {
          "$ref": "#/definitions/associationsMember"
        }
      },
      "title": "Map of members belonging to an inbox_id"
    },
    "associationsRecoverableEcdsaSignature": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte",
          "title": "65-bytes [ R || S || V ], with recovery id as the last byte"
        }
      },
      "title": "RecoverableEcdsaSignature for EIP-191 and V2 signatures"
    },
    "associationsRecoverableEd25519Signature": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "format": "byte",
          "title": "64 bytes [R(32 bytes) || S(32 bytes)]"
        },
        "publicKey": {
          "type": "string",
          "format": "byte",
          "title": "32 bytes"
        }
      },
      "title": "EdDSA signature for 25519"
    },
    "associationsRevokeAssociation": {
      "type": "object",
      "properties": {
        "memberToRevoke": {
          "$ref": "#/definitions/associationsMemberIdentifier"
        },
        "recoveryAddressSignature": {
          "$ref": "#/definitions/identityassociationsSignature"
        }
      },
      "description": "Revokes a member from an XID. The recovery address must sign the revocation."
    },
    "associationsSmartContractWalletSignature": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "title": "CAIP-10 string\nhttps://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64",
          "title": "Specify the block number to verify the signature against"
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "title": "The actual signature bytes"
        }
      },
      "title": "Smart Contract Wallet signature"
    },
    "identityMlsCredential": {
      "type": "object",
      "properties": {
        "inboxId": {
          "type": "string"
        }
      },
      "title": "A credential that can be used in MLS leaf nodes"
    },
    "identityassociationsSignature": {
      "type": "object",
      "properties": {
        "erc191": {
          "$ref": "#/definitions/associationsRecoverableEcdsaSignature"
        },
        "erc6492": {
          "$ref": "#/definitions/associationsSmartContractWalletSignature"
        },
        "installationKey": {
          "$ref": "#/definitions/associationsRecoverableEd25519Signature"
        },
        "delegatedErc191": {
          "$ref": "#/definitions/associationsLegacyDelegatedSignature"
        }
      },
      "title": "A wrapper for all possible signature types"
    },
    "message_contentsSignedPublicKey": {
      "type": "object",
      "properties": {
        "keyBytes": {
          "type": "string",
          "format": "byte",
          "title": "embeds an UnsignedPublicKey"
        },
        "signature": {
          "$ref": "#/definitions/xmtpmessage_contentsSignature",
          "title": "signs key_bytes"
        }
      },
      "title": "SignedPublicKey"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1GetAssociationStateResponse": {
      "type": "object",
      "properties": {
        "associationState": {
          "$ref": "#/definitions/associationsAssociationState"
        },
        "stateDiff": {
          "$ref": "#/definitions/associationsAssociationStateDiff"
        }
      },
      "title": "Response to GetAssociationStateRequest, containing the final association state\nfor an InboxID"
    },
    "v1UnverifiedSmartContractWalletSignature": {
      "type": "object",
      "properties": {
        "scwSignature": {
          "$ref": "#/definitions/associationsSmartContractWalletSignature"
        },
        "hash": {
          "type": "string",
          "format": "byte",
          "title": "SHA256 hash of the signature payload"
        }
      }
    },
    "v1ValidateGroupMessagesRequestGroupMessage": {
      "type": "object",
      "properties": {
        "groupMessageBytesTlsSerialized": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "Wrapper for each message"
    },
    "v1ValidateGroupMessagesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValidateGroupMessagesResponseValidationResponse"
          }
        }
      },
      "title": "Response to ValidateGroupMessagesRequest"
    },
    "v1ValidateGroupMessagesResponseValidationResponse": {
      "type": "object",
      "properties": {
        "isOk": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        }
      },
      "title": "An individual response to one message"
    },
    "v1ValidateInboxIdKeyPackagesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValidateInboxIdKeyPackagesResponseResponse"
          }
        }
      },
      "title": "Validates a Inbox-ID Key Package Type"
    },
    "v1ValidateInboxIdKeyPackagesResponseResponse": {
      "type": "object",
      "properties": {
        "isOk": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        },
        "credential": {
          "$ref": "#/definitions/identityMlsCredential"
        },
        "installationPublicKey": {
          "type": "string",
          "format": "byte"
        },
        "expiration": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "one response corresponding to information about one key package"
    },
    "v1ValidateInboxIdsResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValidateInboxIdsResponseValidationResponse"
          },
          "title": "List of validation responses"
        }
      },
      "title": "Response to ValidateInboxIdRequest"
    },
    "v1ValidateInboxIdsResponseValidationResponse": {
      "type": "object",
      "properties": {
        "isOk": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        },
        "inboxId": {
          "type": "string"
        }
      },
      "title": "a single validation response"
    },
    "v1ValidateKeyPackagesRequestKeyPackage": {
      "type": "object",
      "properties": {
        "keyPackageBytesTlsSerialized": {
          "type": "string",
          "format": "byte"
        },
        "isInboxIdCredential": {
          "type": "boolean"
        }
      },
      "title": "Wrapper for each key package"
    },
    "v1ValidateKeyPackagesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValidateKeyPackagesResponseValidationResponse"
          }
        }
      },
      "title": "Response to ValidateKeyPackagesRequest"
    },
    "v1ValidateKeyPackagesResponseValidationResponse": {
      "type": "object",
      "properties": {
        "isOk": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        },
        "installationId": {
          "type": "string",
          "format": "byte"
        },
        "accountAddress": {
          "type": "string"
        },
        "credentialIdentityBytes": {
          "type": "string",
          "format": "byte"
        },
        "expiration": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "An individual response to one key package"
    },
    "v1VerifySmartContractWalletSignaturesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VerifySmartContractWalletSignaturesResponseValidationResponse"
          }
        }
      }
    },
    "v1VerifySmartContractWalletSignaturesResponseValidationResponse": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "boolean"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "xmtpmessage_contentsSignature": {
      "type": "object",
      "properties": {
        "ecdsaCompact": {
          "$ref": "#/definitions/SignatureECDSACompact"
        },
        "walletEcdsaCompact": {
          "$ref": "#/definitions/SignatureWalletECDSACompact"
        }
      },
      "description": "Signature represents a generalized public key signature,\ndefined as a union to support cryptographic algorithm agility."
    }
  }
}
