// Message API for XMTP V4

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: xmtpv4/envelopes/envelopes.proto

package envelopes

import (
	associations "github.com/xmtp/xmtpd/pkg/proto/identity/associations"
	v1 "github.com/xmtp/xmtpd/pkg/proto/mls/api/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The last seen entry per originator. Originators that have not been seen are omitted.
type Cursor struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	NodeIdToSequenceId map[uint32]uint64      `protobuf:"bytes,1,rep,name=node_id_to_sequence_id,json=nodeIdToSequenceId,proto3" json:"node_id_to_sequence_id,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_xmtpv4_envelopes_envelopes_proto_rawDescGZIP(), []int{0}
}

func (x *Cursor) GetNodeIdToSequenceId() map[uint32]uint64 {
	if x != nil {
		return x.NodeIdToSequenceId
	}
	return nil
}

// Data visible to the server that has been authenticated by the client.
type AuthenticatedData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in xmtpv4/envelopes/envelopes.proto.
	TargetOriginator *uint32 `protobuf:"varint,1,opt,name=target_originator,json=targetOriginator,proto3,oneof" json:"target_originator,omitempty"`
	TargetTopic      []byte  `protobuf:"bytes,2,opt,name=target_topic,json=targetTopic,proto3" json:"target_topic,omitempty"`
	DependsOn        *Cursor `protobuf:"bytes,3,opt,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	IsCommit         bool    `protobuf:"varint,4,opt,name=is_commit,json=isCommit,proto3" json:"is_commit,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AuthenticatedData) Reset() {
	*x = AuthenticatedData{}
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticatedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatedData) ProtoMessage() {}

func (x *AuthenticatedData) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatedData.ProtoReflect.Descriptor instead.
func (*AuthenticatedData) Descriptor() ([]byte, []int) {
	return file_xmtpv4_envelopes_envelopes_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in xmtpv4/envelopes/envelopes.proto.
func (x *AuthenticatedData) GetTargetOriginator() uint32 {
	if x != nil && x.TargetOriginator != nil {
		return *x.TargetOriginator
	}
	return 0
}

func (x *AuthenticatedData) GetTargetTopic() []byte {
	if x != nil {
		return x.TargetTopic
	}
	return nil
}

func (x *AuthenticatedData) GetDependsOn() *Cursor {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *AuthenticatedData) GetIsCommit() bool {
	if x != nil {
		return x.IsCommit
	}
	return false
}

type ClientEnvelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Aad   *AuthenticatedData     `protobuf:"bytes,1,opt,name=aad,proto3" json:"aad,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*ClientEnvelope_GroupMessage
	//	*ClientEnvelope_WelcomeMessage
	//	*ClientEnvelope_UploadKeyPackage
	//	*ClientEnvelope_IdentityUpdate
	Payload       isClientEnvelope_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientEnvelope) Reset() {
	*x = ClientEnvelope{}
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEnvelope) ProtoMessage() {}

func (x *ClientEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEnvelope.ProtoReflect.Descriptor instead.
func (*ClientEnvelope) Descriptor() ([]byte, []int) {
	return file_xmtpv4_envelopes_envelopes_proto_rawDescGZIP(), []int{2}
}

func (x *ClientEnvelope) GetAad() *AuthenticatedData {
	if x != nil {
		return x.Aad
	}
	return nil
}

func (x *ClientEnvelope) GetPayload() isClientEnvelope_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ClientEnvelope) GetGroupMessage() *v1.GroupMessageInput {
	if x != nil {
		if x, ok := x.Payload.(*ClientEnvelope_GroupMessage); ok {
			return x.GroupMessage
		}
	}
	return nil
}

func (x *ClientEnvelope) GetWelcomeMessage() *v1.WelcomeMessageInput {
	if x != nil {
		if x, ok := x.Payload.(*ClientEnvelope_WelcomeMessage); ok {
			return x.WelcomeMessage
		}
	}
	return nil
}

func (x *ClientEnvelope) GetUploadKeyPackage() *v1.UploadKeyPackageRequest {
	if x != nil {
		if x, ok := x.Payload.(*ClientEnvelope_UploadKeyPackage); ok {
			return x.UploadKeyPackage
		}
	}
	return nil
}

func (x *ClientEnvelope) GetIdentityUpdate() *associations.IdentityUpdate {
	if x != nil {
		if x, ok := x.Payload.(*ClientEnvelope_IdentityUpdate); ok {
			return x.IdentityUpdate
		}
	}
	return nil
}

type isClientEnvelope_Payload interface {
	isClientEnvelope_Payload()
}

type ClientEnvelope_GroupMessage struct {
	GroupMessage *v1.GroupMessageInput `protobuf:"bytes,2,opt,name=group_message,json=groupMessage,proto3,oneof"`
}

type ClientEnvelope_WelcomeMessage struct {
	WelcomeMessage *v1.WelcomeMessageInput `protobuf:"bytes,3,opt,name=welcome_message,json=welcomeMessage,proto3,oneof"`
}

type ClientEnvelope_UploadKeyPackage struct {
	UploadKeyPackage *v1.UploadKeyPackageRequest `protobuf:"bytes,4,opt,name=upload_key_package,json=uploadKeyPackage,proto3,oneof"`
}

type ClientEnvelope_IdentityUpdate struct {
	IdentityUpdate *associations.IdentityUpdate `protobuf:"bytes,5,opt,name=identity_update,json=identityUpdate,proto3,oneof"`
}

func (*ClientEnvelope_GroupMessage) isClientEnvelope_Payload() {}

func (*ClientEnvelope_WelcomeMessage) isClientEnvelope_Payload() {}

func (*ClientEnvelope_UploadKeyPackage) isClientEnvelope_Payload() {}

func (*ClientEnvelope_IdentityUpdate) isClientEnvelope_Payload() {}

// Wraps client envelope with payer signature
type PayerEnvelope struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	UnsignedClientEnvelope []byte                                  `protobuf:"bytes,1,opt,name=unsigned_client_envelope,json=unsignedClientEnvelope,proto3" json:"unsigned_client_envelope,omitempty"` // Protobuf serialized
	PayerSignature         *associations.RecoverableEcdsaSignature `protobuf:"bytes,2,opt,name=payer_signature,json=payerSignature,proto3" json:"payer_signature,omitempty"`
	TargetOriginator       uint32                                  `protobuf:"varint,3,opt,name=target_originator,json=targetOriginator,proto3" json:"target_originator,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PayerEnvelope) Reset() {
	*x = PayerEnvelope{}
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayerEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayerEnvelope) ProtoMessage() {}

func (x *PayerEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayerEnvelope.ProtoReflect.Descriptor instead.
func (*PayerEnvelope) Descriptor() ([]byte, []int) {
	return file_xmtpv4_envelopes_envelopes_proto_rawDescGZIP(), []int{3}
}

func (x *PayerEnvelope) GetUnsignedClientEnvelope() []byte {
	if x != nil {
		return x.UnsignedClientEnvelope
	}
	return nil
}

func (x *PayerEnvelope) GetPayerSignature() *associations.RecoverableEcdsaSignature {
	if x != nil {
		return x.PayerSignature
	}
	return nil
}

func (x *PayerEnvelope) GetTargetOriginator() uint32 {
	if x != nil {
		return x.TargetOriginator
	}
	return 0
}

// For blockchain envelopes, these fields are set by the smart contract
type UnsignedOriginatorEnvelope struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	OriginatorNodeId         uint32                 `protobuf:"varint,1,opt,name=originator_node_id,json=originatorNodeId,proto3" json:"originator_node_id,omitempty"`
	OriginatorSequenceId     uint64                 `protobuf:"varint,2,opt,name=originator_sequence_id,json=originatorSequenceId,proto3" json:"originator_sequence_id,omitempty"`
	OriginatorNs             int64                  `protobuf:"varint,3,opt,name=originator_ns,json=originatorNs,proto3" json:"originator_ns,omitempty"`
	PayerEnvelopeBytes       []byte                 `protobuf:"bytes,4,opt,name=payer_envelope_bytes,json=payerEnvelopeBytes,proto3" json:"payer_envelope_bytes,omitempty"`
	BaseFeePicodollars       uint64                 `protobuf:"varint,5,opt,name=base_fee_picodollars,json=baseFeePicodollars,proto3" json:"base_fee_picodollars,omitempty"`                   // The base fee for the message in picodollars
	CongestionFeePicodollars uint64                 `protobuf:"varint,6,opt,name=congestion_fee_picodollars,json=congestionFeePicodollars,proto3" json:"congestion_fee_picodollars,omitempty"` // The congestion fee for the message in picodollars
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UnsignedOriginatorEnvelope) Reset() {
	*x = UnsignedOriginatorEnvelope{}
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsignedOriginatorEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsignedOriginatorEnvelope) ProtoMessage() {}

func (x *UnsignedOriginatorEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsignedOriginatorEnvelope.ProtoReflect.Descriptor instead.
func (*UnsignedOriginatorEnvelope) Descriptor() ([]byte, []int) {
	return file_xmtpv4_envelopes_envelopes_proto_rawDescGZIP(), []int{4}
}

func (x *UnsignedOriginatorEnvelope) GetOriginatorNodeId() uint32 {
	if x != nil {
		return x.OriginatorNodeId
	}
	return 0
}

func (x *UnsignedOriginatorEnvelope) GetOriginatorSequenceId() uint64 {
	if x != nil {
		return x.OriginatorSequenceId
	}
	return 0
}

func (x *UnsignedOriginatorEnvelope) GetOriginatorNs() int64 {
	if x != nil {
		return x.OriginatorNs
	}
	return 0
}

func (x *UnsignedOriginatorEnvelope) GetPayerEnvelopeBytes() []byte {
	if x != nil {
		return x.PayerEnvelopeBytes
	}
	return nil
}

func (x *UnsignedOriginatorEnvelope) GetBaseFeePicodollars() uint64 {
	if x != nil {
		return x.BaseFeePicodollars
	}
	return 0
}

func (x *UnsignedOriginatorEnvelope) GetCongestionFeePicodollars() uint64 {
	if x != nil {
		return x.CongestionFeePicodollars
	}
	return 0
}

// An alternative to a signature for blockchain payloads
type BlockchainProof struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TransactionHash []byte                 `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BlockchainProof) Reset() {
	*x = BlockchainProof{}
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockchainProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainProof) ProtoMessage() {}

func (x *BlockchainProof) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainProof.ProtoReflect.Descriptor instead.
func (*BlockchainProof) Descriptor() ([]byte, []int) {
	return file_xmtpv4_envelopes_envelopes_proto_rawDescGZIP(), []int{5}
}

func (x *BlockchainProof) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

// Signed originator envelope
type OriginatorEnvelope struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	UnsignedOriginatorEnvelope []byte                 `protobuf:"bytes,1,opt,name=unsigned_originator_envelope,json=unsignedOriginatorEnvelope,proto3" json:"unsigned_originator_envelope,omitempty"` // Protobuf serialized
	// Types that are valid to be assigned to Proof:
	//
	//	*OriginatorEnvelope_OriginatorSignature
	//	*OriginatorEnvelope_BlockchainProof
	Proof         isOriginatorEnvelope_Proof `protobuf_oneof:"proof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OriginatorEnvelope) Reset() {
	*x = OriginatorEnvelope{}
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OriginatorEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginatorEnvelope) ProtoMessage() {}

func (x *OriginatorEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_envelopes_envelopes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginatorEnvelope.ProtoReflect.Descriptor instead.
func (*OriginatorEnvelope) Descriptor() ([]byte, []int) {
	return file_xmtpv4_envelopes_envelopes_proto_rawDescGZIP(), []int{6}
}

func (x *OriginatorEnvelope) GetUnsignedOriginatorEnvelope() []byte {
	if x != nil {
		return x.UnsignedOriginatorEnvelope
	}
	return nil
}

func (x *OriginatorEnvelope) GetProof() isOriginatorEnvelope_Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *OriginatorEnvelope) GetOriginatorSignature() *associations.RecoverableEcdsaSignature {
	if x != nil {
		if x, ok := x.Proof.(*OriginatorEnvelope_OriginatorSignature); ok {
			return x.OriginatorSignature
		}
	}
	return nil
}

func (x *OriginatorEnvelope) GetBlockchainProof() *BlockchainProof {
	if x != nil {
		if x, ok := x.Proof.(*OriginatorEnvelope_BlockchainProof); ok {
			return x.BlockchainProof
		}
	}
	return nil
}

type isOriginatorEnvelope_Proof interface {
	isOriginatorEnvelope_Proof()
}

type OriginatorEnvelope_OriginatorSignature struct {
	OriginatorSignature *associations.RecoverableEcdsaSignature `protobuf:"bytes,2,opt,name=originator_signature,json=originatorSignature,proto3,oneof"`
}

type OriginatorEnvelope_BlockchainProof struct {
	BlockchainProof *BlockchainProof `protobuf:"bytes,3,opt,name=blockchain_proof,json=blockchainProof,proto3,oneof"`
}

func (*OriginatorEnvelope_OriginatorSignature) isOriginatorEnvelope_Proof() {}

func (*OriginatorEnvelope_BlockchainProof) isOriginatorEnvelope_Proof() {}

var File_xmtpv4_envelopes_envelopes_proto protoreflect.FileDescriptor

const file_xmtpv4_envelopes_envelopes_proto_rawDesc = "" +
	"\n" +
	" xmtpv4/envelopes/envelopes.proto\x12\x15xmtp.xmtpv4.envelopes\x1a'identity/associations/association.proto\x1a%identity/associations/signature.proto\x1a\x14mls/api/v1/mls.proto\"\xba\x01\n" +
	"\x06Cursor\x12i\n" +
	"\x16node_id_to_sequence_id\x18\x01 \x03(\v25.xmtp.xmtpv4.envelopes.Cursor.NodeIdToSequenceIdEntryR\x12nodeIdToSequenceId\x1aE\n" +
	"\x17NodeIdToSequenceIdEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\xdd\x01\n" +
	"\x11AuthenticatedData\x124\n" +
	"\x11target_originator\x18\x01 \x01(\rB\x02\x18\x01H\x00R\x10targetOriginator\x88\x01\x01\x12!\n" +
	"\ftarget_topic\x18\x02 \x01(\fR\vtargetTopic\x12<\n" +
	"\n" +
	"depends_on\x18\x03 \x01(\v2\x1d.xmtp.xmtpv4.envelopes.CursorR\tdependsOn\x12\x1b\n" +
	"\tis_commit\x18\x04 \x01(\bR\bisCommitB\x14\n" +
	"\x12_target_originator\"\xa4\x03\n" +
	"\x0eClientEnvelope\x12:\n" +
	"\x03aad\x18\x01 \x01(\v2(.xmtp.xmtpv4.envelopes.AuthenticatedDataR\x03aad\x12I\n" +
	"\rgroup_message\x18\x02 \x01(\v2\".xmtp.mls.api.v1.GroupMessageInputH\x00R\fgroupMessage\x12O\n" +
	"\x0fwelcome_message\x18\x03 \x01(\v2$.xmtp.mls.api.v1.WelcomeMessageInputH\x00R\x0ewelcomeMessage\x12X\n" +
	"\x12upload_key_package\x18\x04 \x01(\v2(.xmtp.mls.api.v1.UploadKeyPackageRequestH\x00R\x10uploadKeyPackage\x12U\n" +
	"\x0fidentity_update\x18\x05 \x01(\v2*.xmtp.identity.associations.IdentityUpdateH\x00R\x0eidentityUpdateB\t\n" +
	"\apayload\"\xd6\x01\n" +
	"\rPayerEnvelope\x128\n" +
	"\x18unsigned_client_envelope\x18\x01 \x01(\fR\x16unsignedClientEnvelope\x12^\n" +
	"\x0fpayer_signature\x18\x02 \x01(\v25.xmtp.identity.associations.RecoverableEcdsaSignatureR\x0epayerSignature\x12+\n" +
	"\x11target_originator\x18\x03 \x01(\rR\x10targetOriginator\"\xc7\x02\n" +
	"\x1aUnsignedOriginatorEnvelope\x12,\n" +
	"\x12originator_node_id\x18\x01 \x01(\rR\x10originatorNodeId\x124\n" +
	"\x16originator_sequence_id\x18\x02 \x01(\x04R\x14originatorSequenceId\x12#\n" +
	"\roriginator_ns\x18\x03 \x01(\x03R\foriginatorNs\x120\n" +
	"\x14payer_envelope_bytes\x18\x04 \x01(\fR\x12payerEnvelopeBytes\x120\n" +
	"\x14base_fee_picodollars\x18\x05 \x01(\x04R\x12baseFeePicodollars\x12<\n" +
	"\x1acongestion_fee_picodollars\x18\x06 \x01(\x04R\x18congestionFeePicodollars\"<\n" +
	"\x0fBlockchainProof\x12)\n" +
	"\x10transaction_hash\x18\x01 \x01(\fR\x0ftransactionHash\"\xa0\x02\n" +
	"\x12OriginatorEnvelope\x12@\n" +
	"\x1cunsigned_originator_envelope\x18\x01 \x01(\fR\x1aunsignedOriginatorEnvelope\x12j\n" +
	"\x14originator_signature\x18\x02 \x01(\v25.xmtp.identity.associations.RecoverableEcdsaSignatureH\x00R\x13originatorSignature\x12S\n" +
	"\x10blockchain_proof\x18\x03 \x01(\v2&.xmtp.xmtpv4.envelopes.BlockchainProofH\x00R\x0fblockchainProofB\a\n" +
	"\x05proofB\xd3\x01\n" +
	"\x19com.xmtp.xmtpv4.envelopesB\x0eEnvelopesProtoP\x01Z0github.com/xmtp/xmtpd/pkg/proto/xmtpv4/envelopes\xa2\x02\x03XXE\xaa\x02\x15Xmtp.Xmtpv4.Envelopes\xca\x02\x15Xmtp\\Xmtpv4\\Envelopes\xe2\x02!Xmtp\\Xmtpv4\\Envelopes\\GPBMetadata\xea\x02\x17Xmtp::Xmtpv4::Envelopesb\x06proto3"

var (
	file_xmtpv4_envelopes_envelopes_proto_rawDescOnce sync.Once
	file_xmtpv4_envelopes_envelopes_proto_rawDescData []byte
)

func file_xmtpv4_envelopes_envelopes_proto_rawDescGZIP() []byte {
	file_xmtpv4_envelopes_envelopes_proto_rawDescOnce.Do(func() {
		file_xmtpv4_envelopes_envelopes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_xmtpv4_envelopes_envelopes_proto_rawDesc), len(file_xmtpv4_envelopes_envelopes_proto_rawDesc)))
	})
	return file_xmtpv4_envelopes_envelopes_proto_rawDescData
}

var file_xmtpv4_envelopes_envelopes_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_xmtpv4_envelopes_envelopes_proto_goTypes = []any{
	(*Cursor)(nil),                                 // 0: xmtp.xmtpv4.envelopes.Cursor
	(*AuthenticatedData)(nil),                      // 1: xmtp.xmtpv4.envelopes.AuthenticatedData
	(*ClientEnvelope)(nil),                         // 2: xmtp.xmtpv4.envelopes.ClientEnvelope
	(*PayerEnvelope)(nil),                          // 3: xmtp.xmtpv4.envelopes.PayerEnvelope
	(*UnsignedOriginatorEnvelope)(nil),             // 4: xmtp.xmtpv4.envelopes.UnsignedOriginatorEnvelope
	(*BlockchainProof)(nil),                        // 5: xmtp.xmtpv4.envelopes.BlockchainProof
	(*OriginatorEnvelope)(nil),                     // 6: xmtp.xmtpv4.envelopes.OriginatorEnvelope
	nil,                                            // 7: xmtp.xmtpv4.envelopes.Cursor.NodeIdToSequenceIdEntry
	(*v1.GroupMessageInput)(nil),                   // 8: xmtp.mls.api.v1.GroupMessageInput
	(*v1.WelcomeMessageInput)(nil),                 // 9: xmtp.mls.api.v1.WelcomeMessageInput
	(*v1.UploadKeyPackageRequest)(nil),             // 10: xmtp.mls.api.v1.UploadKeyPackageRequest
	(*associations.IdentityUpdate)(nil),            // 11: xmtp.identity.associations.IdentityUpdate
	(*associations.RecoverableEcdsaSignature)(nil), // 12: xmtp.identity.associations.RecoverableEcdsaSignature
}
var file_xmtpv4_envelopes_envelopes_proto_depIdxs = []int32{
	7,  // 0: xmtp.xmtpv4.envelopes.Cursor.node_id_to_sequence_id:type_name -> xmtp.xmtpv4.envelopes.Cursor.NodeIdToSequenceIdEntry
	0,  // 1: xmtp.xmtpv4.envelopes.AuthenticatedData.depends_on:type_name -> xmtp.xmtpv4.envelopes.Cursor
	1,  // 2: xmtp.xmtpv4.envelopes.ClientEnvelope.aad:type_name -> xmtp.xmtpv4.envelopes.AuthenticatedData
	8,  // 3: xmtp.xmtpv4.envelopes.ClientEnvelope.group_message:type_name -> xmtp.mls.api.v1.GroupMessageInput
	9,  // 4: xmtp.xmtpv4.envelopes.ClientEnvelope.welcome_message:type_name -> xmtp.mls.api.v1.WelcomeMessageInput
	10, // 5: xmtp.xmtpv4.envelopes.ClientEnvelope.upload_key_package:type_name -> xmtp.mls.api.v1.UploadKeyPackageRequest
	11, // 6: xmtp.xmtpv4.envelopes.ClientEnvelope.identity_update:type_name -> xmtp.identity.associations.IdentityUpdate
	12, // 7: xmtp.xmtpv4.envelopes.PayerEnvelope.payer_signature:type_name -> xmtp.identity.associations.RecoverableEcdsaSignature
	12, // 8: xmtp.xmtpv4.envelopes.OriginatorEnvelope.originator_signature:type_name -> xmtp.identity.associations.RecoverableEcdsaSignature
	5,  // 9: xmtp.xmtpv4.envelopes.OriginatorEnvelope.blockchain_proof:type_name -> xmtp.xmtpv4.envelopes.BlockchainProof
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_xmtpv4_envelopes_envelopes_proto_init() }
func file_xmtpv4_envelopes_envelopes_proto_init() {
	if File_xmtpv4_envelopes_envelopes_proto != nil {
		return
	}
	file_xmtpv4_envelopes_envelopes_proto_msgTypes[1].OneofWrappers = []any{}
	file_xmtpv4_envelopes_envelopes_proto_msgTypes[2].OneofWrappers = []any{
		(*ClientEnvelope_GroupMessage)(nil),
		(*ClientEnvelope_WelcomeMessage)(nil),
		(*ClientEnvelope_UploadKeyPackage)(nil),
		(*ClientEnvelope_IdentityUpdate)(nil),
	}
	file_xmtpv4_envelopes_envelopes_proto_msgTypes[6].OneofWrappers = []any{
		(*OriginatorEnvelope_OriginatorSignature)(nil),
		(*OriginatorEnvelope_BlockchainProof)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_xmtpv4_envelopes_envelopes_proto_rawDesc), len(file_xmtpv4_envelopes_envelopes_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xmtpv4_envelopes_envelopes_proto_goTypes,
		DependencyIndexes: file_xmtpv4_envelopes_envelopes_proto_depIdxs,
		MessageInfos:      file_xmtpv4_envelopes_envelopes_proto_msgTypes,
	}.Build()
	File_xmtpv4_envelopes_envelopes_proto = out.File
	file_xmtpv4_envelopes_envelopes_proto_goTypes = nil
	file_xmtpv4_envelopes_envelopes_proto_depIdxs = nil
}
