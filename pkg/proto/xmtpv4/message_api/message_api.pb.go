// Message API for XMTP V4

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: xmtpv4/message_api/message_api.proto

package message_api

import (
	associations "github.com/xmtp/xmtpd/pkg/proto/identity/associations"
	v1 "github.com/xmtp/xmtpd/pkg/proto/mls/api/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Misbehavior types
type Misbehavior int32

const (
	Misbehavior_MISBEHAVIOR_UNSPECIFIED                 Misbehavior = 0
	Misbehavior_MISBEHAVIOR_UNAVAILABLE_NODE            Misbehavior = 1
	Misbehavior_MISBEHAVIOR_OUT_OF_ORDER_ORIGINATOR_SID Misbehavior = 2
	Misbehavior_MISBEHAVIOR_DUPLICATE_ORIGINATOR_SID    Misbehavior = 3
	Misbehavior_MISBEHAVIOR_CYCLICAL_MESSAGE_ORDERING   Misbehavior = 4
)

// Enum value maps for Misbehavior.
var (
	Misbehavior_name = map[int32]string{
		0: "MISBEHAVIOR_UNSPECIFIED",
		1: "MISBEHAVIOR_UNAVAILABLE_NODE",
		2: "MISBEHAVIOR_OUT_OF_ORDER_ORIGINATOR_SID",
		3: "MISBEHAVIOR_DUPLICATE_ORIGINATOR_SID",
		4: "MISBEHAVIOR_CYCLICAL_MESSAGE_ORDERING",
	}
	Misbehavior_value = map[string]int32{
		"MISBEHAVIOR_UNSPECIFIED":                 0,
		"MISBEHAVIOR_UNAVAILABLE_NODE":            1,
		"MISBEHAVIOR_OUT_OF_ORDER_ORIGINATOR_SID": 2,
		"MISBEHAVIOR_DUPLICATE_ORIGINATOR_SID":    3,
		"MISBEHAVIOR_CYCLICAL_MESSAGE_ORDERING":   4,
	}
)

func (x Misbehavior) Enum() *Misbehavior {
	p := new(Misbehavior)
	*p = x
	return p
}

func (x Misbehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Misbehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_xmtpv4_message_api_message_api_proto_enumTypes[0].Descriptor()
}

func (Misbehavior) Type() protoreflect.EnumType {
	return &file_xmtpv4_message_api_message_api_proto_enumTypes[0]
}

func (x Misbehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Misbehavior.Descriptor instead.
func (Misbehavior) EnumDescriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{0}
}

// The last seen entry per originator. Originators that have not been seen are omitted.
// Entries MUST be sorted in ascending order, so that smaller node ID's appear first.
type VectorClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginatorSids []uint64 `protobuf:"varint,1,rep,packed,name=originator_sids,json=originatorSids,proto3" json:"originator_sids,omitempty"`
}

func (x *VectorClock) Reset() {
	*x = VectorClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorClock) ProtoMessage() {}

func (x *VectorClock) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorClock.ProtoReflect.Descriptor instead.
func (*VectorClock) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{0}
}

func (x *VectorClock) GetOriginatorSids() []uint64 {
	if x != nil {
		return x.OriginatorSids
	}
	return nil
}

// Data visible to the server that has been authenticated by the client.
type AuthenticatedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetOriginator uint32       `protobuf:"varint,1,opt,name=target_originator,json=targetOriginator,proto3" json:"target_originator,omitempty"`
	TargetTopic      []byte       `protobuf:"bytes,2,opt,name=target_topic,json=targetTopic,proto3" json:"target_topic,omitempty"`
	LastSeen         *VectorClock `protobuf:"bytes,3,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
}

func (x *AuthenticatedData) Reset() {
	*x = AuthenticatedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatedData) ProtoMessage() {}

func (x *AuthenticatedData) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatedData.ProtoReflect.Descriptor instead.
func (*AuthenticatedData) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticatedData) GetTargetOriginator() uint32 {
	if x != nil {
		return x.TargetOriginator
	}
	return 0
}

func (x *AuthenticatedData) GetTargetTopic() []byte {
	if x != nil {
		return x.TargetTopic
	}
	return nil
}

func (x *AuthenticatedData) GetLastSeen() *VectorClock {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

type ClientEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*ClientEnvelope_GroupMessage
	//	*ClientEnvelope_WelcomeMessage
	//	*ClientEnvelope_IdentityUpdate
	//	*ClientEnvelope_UploadKeyPackage
	Payload isClientEnvelope_Payload `protobuf_oneof:"payload"`
	Aad     *AuthenticatedData       `protobuf:"bytes,6,opt,name=aad,proto3" json:"aad,omitempty"`
}

func (x *ClientEnvelope) Reset() {
	*x = ClientEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEnvelope) ProtoMessage() {}

func (x *ClientEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEnvelope.ProtoReflect.Descriptor instead.
func (*ClientEnvelope) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{2}
}

func (m *ClientEnvelope) GetPayload() isClientEnvelope_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ClientEnvelope) GetGroupMessage() *v1.GroupMessageInput {
	if x, ok := x.GetPayload().(*ClientEnvelope_GroupMessage); ok {
		return x.GroupMessage
	}
	return nil
}

func (x *ClientEnvelope) GetWelcomeMessage() *v1.WelcomeMessageInput {
	if x, ok := x.GetPayload().(*ClientEnvelope_WelcomeMessage); ok {
		return x.WelcomeMessage
	}
	return nil
}

func (x *ClientEnvelope) GetIdentityUpdate() *associations.IdentityUpdate {
	if x, ok := x.GetPayload().(*ClientEnvelope_IdentityUpdate); ok {
		return x.IdentityUpdate
	}
	return nil
}

func (x *ClientEnvelope) GetUploadKeyPackage() *v1.UploadKeyPackageRequest {
	if x, ok := x.GetPayload().(*ClientEnvelope_UploadKeyPackage); ok {
		return x.UploadKeyPackage
	}
	return nil
}

func (x *ClientEnvelope) GetAad() *AuthenticatedData {
	if x != nil {
		return x.Aad
	}
	return nil
}

type isClientEnvelope_Payload interface {
	isClientEnvelope_Payload()
}

type ClientEnvelope_GroupMessage struct {
	GroupMessage *v1.GroupMessageInput `protobuf:"bytes,1,opt,name=group_message,json=groupMessage,proto3,oneof"`
}

type ClientEnvelope_WelcomeMessage struct {
	WelcomeMessage *v1.WelcomeMessageInput `protobuf:"bytes,2,opt,name=welcome_message,json=welcomeMessage,proto3,oneof"`
}

type ClientEnvelope_IdentityUpdate struct {
	IdentityUpdate *associations.IdentityUpdate `protobuf:"bytes,3,opt,name=identity_update,json=identityUpdate,proto3,oneof"`
}

type ClientEnvelope_UploadKeyPackage struct {
	UploadKeyPackage *v1.UploadKeyPackageRequest `protobuf:"bytes,4,opt,name=upload_key_package,json=uploadKeyPackage,proto3,oneof"`
}

func (*ClientEnvelope_GroupMessage) isClientEnvelope_Payload() {}

func (*ClientEnvelope_WelcomeMessage) isClientEnvelope_Payload() {}

func (*ClientEnvelope_IdentityUpdate) isClientEnvelope_Payload() {}

func (*ClientEnvelope_UploadKeyPackage) isClientEnvelope_Payload() {}

// Wraps client envelope with payer signature
type PayerEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnsignedClientEnvelope []byte                                  `protobuf:"bytes,1,opt,name=unsigned_client_envelope,json=unsignedClientEnvelope,proto3" json:"unsigned_client_envelope,omitempty"` // Protobuf serialized
	PayerSignature         *associations.RecoverableEcdsaSignature `protobuf:"bytes,2,opt,name=payer_signature,json=payerSignature,proto3" json:"payer_signature,omitempty"`
}

func (x *PayerEnvelope) Reset() {
	*x = PayerEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayerEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayerEnvelope) ProtoMessage() {}

func (x *PayerEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayerEnvelope.ProtoReflect.Descriptor instead.
func (*PayerEnvelope) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{3}
}

func (x *PayerEnvelope) GetUnsignedClientEnvelope() []byte {
	if x != nil {
		return x.UnsignedClientEnvelope
	}
	return nil
}

func (x *PayerEnvelope) GetPayerSignature() *associations.RecoverableEcdsaSignature {
	if x != nil {
		return x.PayerSignature
	}
	return nil
}

// For blockchain envelopes, the originator_sid is set by the smart contract,
// but the originator_ns is set by the publishing node
type UnsignedOriginatorEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginatorSid uint64         `protobuf:"varint,1,opt,name=originator_sid,json=originatorSid,proto3" json:"originator_sid,omitempty"`
	OriginatorNs  int64          `protobuf:"varint,2,opt,name=originator_ns,json=originatorNs,proto3" json:"originator_ns,omitempty"`
	PayerEnvelope *PayerEnvelope `protobuf:"bytes,3,opt,name=payer_envelope,json=payerEnvelope,proto3" json:"payer_envelope,omitempty"`
}

func (x *UnsignedOriginatorEnvelope) Reset() {
	*x = UnsignedOriginatorEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsignedOriginatorEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsignedOriginatorEnvelope) ProtoMessage() {}

func (x *UnsignedOriginatorEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsignedOriginatorEnvelope.ProtoReflect.Descriptor instead.
func (*UnsignedOriginatorEnvelope) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{4}
}

func (x *UnsignedOriginatorEnvelope) GetOriginatorSid() uint64 {
	if x != nil {
		return x.OriginatorSid
	}
	return 0
}

func (x *UnsignedOriginatorEnvelope) GetOriginatorNs() int64 {
	if x != nil {
		return x.OriginatorNs
	}
	return 0
}

func (x *UnsignedOriginatorEnvelope) GetPayerEnvelope() *PayerEnvelope {
	if x != nil {
		return x.PayerEnvelope
	}
	return nil
}

// An alternative to a signature for blockchain payloads
type BlockchainProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	PublisherId uint32 `protobuf:"varint,2,opt,name=publisher_id,json=publisherId,proto3" json:"publisher_id,omitempty"`
}

func (x *BlockchainProof) Reset() {
	*x = BlockchainProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainProof) ProtoMessage() {}

func (x *BlockchainProof) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainProof.ProtoReflect.Descriptor instead.
func (*BlockchainProof) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{5}
}

func (x *BlockchainProof) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockchainProof) GetPublisherId() uint32 {
	if x != nil {
		return x.PublisherId
	}
	return 0
}

// Signed originator envelope
type OriginatorEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnsignedOriginatorEnvelope []byte `protobuf:"bytes,1,opt,name=unsigned_originator_envelope,json=unsignedOriginatorEnvelope,proto3" json:"unsigned_originator_envelope,omitempty"` // Protobuf serialized
	// Types that are assignable to Proof:
	//
	//	*OriginatorEnvelope_OriginatorSignature
	//	*OriginatorEnvelope_BlockchainProof
	Proof isOriginatorEnvelope_Proof `protobuf_oneof:"proof"`
}

func (x *OriginatorEnvelope) Reset() {
	*x = OriginatorEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginatorEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginatorEnvelope) ProtoMessage() {}

func (x *OriginatorEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginatorEnvelope.ProtoReflect.Descriptor instead.
func (*OriginatorEnvelope) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{6}
}

func (x *OriginatorEnvelope) GetUnsignedOriginatorEnvelope() []byte {
	if x != nil {
		return x.UnsignedOriginatorEnvelope
	}
	return nil
}

func (m *OriginatorEnvelope) GetProof() isOriginatorEnvelope_Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (x *OriginatorEnvelope) GetOriginatorSignature() *associations.RecoverableEcdsaSignature {
	if x, ok := x.GetProof().(*OriginatorEnvelope_OriginatorSignature); ok {
		return x.OriginatorSignature
	}
	return nil
}

func (x *OriginatorEnvelope) GetBlockchainProof() *BlockchainProof {
	if x, ok := x.GetProof().(*OriginatorEnvelope_BlockchainProof); ok {
		return x.BlockchainProof
	}
	return nil
}

type isOriginatorEnvelope_Proof interface {
	isOriginatorEnvelope_Proof()
}

type OriginatorEnvelope_OriginatorSignature struct {
	OriginatorSignature *associations.RecoverableEcdsaSignature `protobuf:"bytes,2,opt,name=originator_signature,json=originatorSignature,proto3,oneof"`
}

type OriginatorEnvelope_BlockchainProof struct {
	BlockchainProof *BlockchainProof `protobuf:"bytes,3,opt,name=blockchain_proof,json=blockchainProof,proto3,oneof"`
}

func (*OriginatorEnvelope_OriginatorSignature) isOriginatorEnvelope_Proof() {}

func (*OriginatorEnvelope_BlockchainProof) isOriginatorEnvelope_Proof() {}

// Reports node misbehavior, submittable by nodes or by clients
type MisbehaviorReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Misbehavior           `protobuf:"varint,1,opt,name=type,proto3,enum=xmtp.xmtpv4.Misbehavior" json:"type,omitempty"`
	Envelopes []*OriginatorEnvelope `protobuf:"bytes,2,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *MisbehaviorReport) Reset() {
	*x = MisbehaviorReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MisbehaviorReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MisbehaviorReport) ProtoMessage() {}

func (x *MisbehaviorReport) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MisbehaviorReport.ProtoReflect.Descriptor instead.
func (*MisbehaviorReport) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{7}
}

func (x *MisbehaviorReport) GetType() Misbehavior {
	if x != nil {
		return x.Type
	}
	return Misbehavior_MISBEHAVIOR_UNSPECIFIED
}

func (x *MisbehaviorReport) GetEnvelopes() []*OriginatorEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

// Query for envelopes, shared by query and subscribe endpoints
type EnvelopesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*EnvelopesQuery_Topic
	//	*EnvelopesQuery_OriginatorNodeId
	Filter   isEnvelopesQuery_Filter `protobuf_oneof:"filter"`
	LastSeen *VectorClock            `protobuf:"bytes,3,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
}

func (x *EnvelopesQuery) Reset() {
	*x = EnvelopesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopesQuery) ProtoMessage() {}

func (x *EnvelopesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopesQuery.ProtoReflect.Descriptor instead.
func (*EnvelopesQuery) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{8}
}

func (m *EnvelopesQuery) GetFilter() isEnvelopesQuery_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *EnvelopesQuery) GetTopic() []byte {
	if x, ok := x.GetFilter().(*EnvelopesQuery_Topic); ok {
		return x.Topic
	}
	return nil
}

func (x *EnvelopesQuery) GetOriginatorNodeId() uint32 {
	if x, ok := x.GetFilter().(*EnvelopesQuery_OriginatorNodeId); ok {
		return x.OriginatorNodeId
	}
	return 0
}

func (x *EnvelopesQuery) GetLastSeen() *VectorClock {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

type isEnvelopesQuery_Filter interface {
	isEnvelopesQuery_Filter()
}

type EnvelopesQuery_Topic struct {
	// Client queries
	Topic []byte `protobuf:"bytes,1,opt,name=topic,proto3,oneof"`
}

type EnvelopesQuery_OriginatorNodeId struct {
	// Node queries
	OriginatorNodeId uint32 `protobuf:"varint,2,opt,name=originator_node_id,json=originatorNodeId,proto3,oneof"`
}

func (*EnvelopesQuery_Topic) isEnvelopesQuery_Filter() {}

func (*EnvelopesQuery_OriginatorNodeId) isEnvelopesQuery_Filter() {}

// Batch subscribe to envelopes
type BatchSubscribeEnvelopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchSubscribeEnvelopesRequest) Reset() {
	*x = BatchSubscribeEnvelopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSubscribeEnvelopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSubscribeEnvelopesRequest) ProtoMessage() {}

func (x *BatchSubscribeEnvelopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSubscribeEnvelopesRequest.ProtoReflect.Descriptor instead.
func (*BatchSubscribeEnvelopesRequest) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{9}
}

func (x *BatchSubscribeEnvelopesRequest) GetRequests() []*BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Streamed response for batch subscribe - can be multiple envelopes at once
type BatchSubscribeEnvelopesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelopes []*OriginatorEnvelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *BatchSubscribeEnvelopesResponse) Reset() {
	*x = BatchSubscribeEnvelopesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSubscribeEnvelopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSubscribeEnvelopesResponse) ProtoMessage() {}

func (x *BatchSubscribeEnvelopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSubscribeEnvelopesResponse.ProtoReflect.Descriptor instead.
func (*BatchSubscribeEnvelopesResponse) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{10}
}

func (x *BatchSubscribeEnvelopesResponse) GetEnvelopes() []*OriginatorEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

// Query envelopes request
type QueryEnvelopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *EnvelopesQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Limit uint32          `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryEnvelopesRequest) Reset() {
	*x = QueryEnvelopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEnvelopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEnvelopesRequest) ProtoMessage() {}

func (x *QueryEnvelopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEnvelopesRequest.ProtoReflect.Descriptor instead.
func (*QueryEnvelopesRequest) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{11}
}

func (x *QueryEnvelopesRequest) GetQuery() *EnvelopesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryEnvelopesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Query envelopes response
type QueryEnvelopesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelopes []*OriginatorEnvelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *QueryEnvelopesResponse) Reset() {
	*x = QueryEnvelopesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEnvelopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEnvelopesResponse) ProtoMessage() {}

func (x *QueryEnvelopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEnvelopesResponse.ProtoReflect.Descriptor instead.
func (*QueryEnvelopesResponse) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{12}
}

func (x *QueryEnvelopesResponse) GetEnvelopes() []*OriginatorEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type PublishEnvelopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayerEnvelope *PayerEnvelope `protobuf:"bytes,1,opt,name=payer_envelope,json=payerEnvelope,proto3" json:"payer_envelope,omitempty"`
}

func (x *PublishEnvelopeRequest) Reset() {
	*x = PublishEnvelopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishEnvelopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEnvelopeRequest) ProtoMessage() {}

func (x *PublishEnvelopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEnvelopeRequest.ProtoReflect.Descriptor instead.
func (*PublishEnvelopeRequest) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{13}
}

func (x *PublishEnvelopeRequest) GetPayerEnvelope() *PayerEnvelope {
	if x != nil {
		return x.PayerEnvelope
	}
	return nil
}

type PublishEnvelopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginatorEnvelope *OriginatorEnvelope `protobuf:"bytes,1,opt,name=originator_envelope,json=originatorEnvelope,proto3" json:"originator_envelope,omitempty"`
}

func (x *PublishEnvelopeResponse) Reset() {
	*x = PublishEnvelopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishEnvelopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEnvelopeResponse) ProtoMessage() {}

func (x *PublishEnvelopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEnvelopeResponse.ProtoReflect.Descriptor instead.
func (*PublishEnvelopeResponse) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{14}
}

func (x *PublishEnvelopeResponse) GetOriginatorEnvelope() *OriginatorEnvelope {
	if x != nil {
		return x.OriginatorEnvelope
	}
	return nil
}

// Single subscription request for envelopes
type BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *EnvelopesQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest) Reset() {
	*x = BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest) ProtoMessage() {}

func (x *BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest.ProtoReflect.Descriptor instead.
func (*BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{9, 0}
}

func (x *BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest) GetQuery() *EnvelopesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

var File_xmtpv4_message_api_message_api_proto protoreflect.FileDescriptor

var file_xmtpv4_message_api_message_api_proto_rawDesc = []byte{
	0x0a, 0x24, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74,
	0x70, 0x76, 0x34, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x6d, 0x6c, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x64, 0x73, 0x22,
	0x9a, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e,
	0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x22, 0x9a, 0x03, 0x0a,
	0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12,
	0x49, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x77, 0x65,
	0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x61, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x61, 0x61, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x50, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x1a, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x73,
	0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e,
	0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96, 0x02, 0x0a,
	0x12, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x75, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x63, 0x64, 0x73,
	0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x49, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x07, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x4d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78,
	0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xd3, 0x01, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x4e, 0x0a, 0x19, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x76, 0x34, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x60, 0x0a, 0x1f, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x76, 0x34, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x57,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78,
	0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x12, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2a, 0xce, 0x01, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01,
	0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a,
	0x24, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x53, 0x49, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x49, 0x53, 0x42, 0x45,
	0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x32, 0xb4, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x2b, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2d, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x73, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e,
	0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x78,
	0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x6d,
	0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22,
	0x18, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x2d, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42, 0xa3, 0x01, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x42, 0x0f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x6d, 0x74,
	0x70, 0x2f, 0x78, 0x6d, 0x74, 0x70, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x03, 0x58, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x58, 0x6d, 0x74,
	0x70, 0x2e, 0x58, 0x6d, 0x74, 0x70, 0x76, 0x34, 0xca, 0x02, 0x0b, 0x58, 0x6d, 0x74, 0x70, 0x5c,
	0x58, 0x6d, 0x74, 0x70, 0x76, 0x34, 0xe2, 0x02, 0x17, 0x58, 0x6d, 0x74, 0x70, 0x5c, 0x58, 0x6d,
	0x74, 0x70, 0x76, 0x34, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0c, 0x58, 0x6d, 0x74, 0x70, 0x3a, 0x3a, 0x58, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xmtpv4_message_api_message_api_proto_rawDescOnce sync.Once
	file_xmtpv4_message_api_message_api_proto_rawDescData = file_xmtpv4_message_api_message_api_proto_rawDesc
)

func file_xmtpv4_message_api_message_api_proto_rawDescGZIP() []byte {
	file_xmtpv4_message_api_message_api_proto_rawDescOnce.Do(func() {
		file_xmtpv4_message_api_message_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_xmtpv4_message_api_message_api_proto_rawDescData)
	})
	return file_xmtpv4_message_api_message_api_proto_rawDescData
}

var file_xmtpv4_message_api_message_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_xmtpv4_message_api_message_api_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_xmtpv4_message_api_message_api_proto_goTypes = []any{
	(Misbehavior)(0),                                                 // 0: xmtp.xmtpv4.Misbehavior
	(*VectorClock)(nil),                                              // 1: xmtp.xmtpv4.VectorClock
	(*AuthenticatedData)(nil),                                        // 2: xmtp.xmtpv4.AuthenticatedData
	(*ClientEnvelope)(nil),                                           // 3: xmtp.xmtpv4.ClientEnvelope
	(*PayerEnvelope)(nil),                                            // 4: xmtp.xmtpv4.PayerEnvelope
	(*UnsignedOriginatorEnvelope)(nil),                               // 5: xmtp.xmtpv4.UnsignedOriginatorEnvelope
	(*BlockchainProof)(nil),                                          // 6: xmtp.xmtpv4.BlockchainProof
	(*OriginatorEnvelope)(nil),                                       // 7: xmtp.xmtpv4.OriginatorEnvelope
	(*MisbehaviorReport)(nil),                                        // 8: xmtp.xmtpv4.MisbehaviorReport
	(*EnvelopesQuery)(nil),                                           // 9: xmtp.xmtpv4.EnvelopesQuery
	(*BatchSubscribeEnvelopesRequest)(nil),                           // 10: xmtp.xmtpv4.BatchSubscribeEnvelopesRequest
	(*BatchSubscribeEnvelopesResponse)(nil),                          // 11: xmtp.xmtpv4.BatchSubscribeEnvelopesResponse
	(*QueryEnvelopesRequest)(nil),                                    // 12: xmtp.xmtpv4.QueryEnvelopesRequest
	(*QueryEnvelopesResponse)(nil),                                   // 13: xmtp.xmtpv4.QueryEnvelopesResponse
	(*PublishEnvelopeRequest)(nil),                                   // 14: xmtp.xmtpv4.PublishEnvelopeRequest
	(*PublishEnvelopeResponse)(nil),                                  // 15: xmtp.xmtpv4.PublishEnvelopeResponse
	(*BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest)(nil), // 16: xmtp.xmtpv4.BatchSubscribeEnvelopesRequest.SubscribeEnvelopesRequest
	(*v1.GroupMessageInput)(nil),                                     // 17: xmtp.mls.api.v1.GroupMessageInput
	(*v1.WelcomeMessageInput)(nil),                                   // 18: xmtp.mls.api.v1.WelcomeMessageInput
	(*associations.IdentityUpdate)(nil),                              // 19: xmtp.identity.associations.IdentityUpdate
	(*v1.UploadKeyPackageRequest)(nil),                               // 20: xmtp.mls.api.v1.UploadKeyPackageRequest
	(*associations.RecoverableEcdsaSignature)(nil),                   // 21: xmtp.identity.associations.RecoverableEcdsaSignature
}
var file_xmtpv4_message_api_message_api_proto_depIdxs = []int32{
	1,  // 0: xmtp.xmtpv4.AuthenticatedData.last_seen:type_name -> xmtp.xmtpv4.VectorClock
	17, // 1: xmtp.xmtpv4.ClientEnvelope.group_message:type_name -> xmtp.mls.api.v1.GroupMessageInput
	18, // 2: xmtp.xmtpv4.ClientEnvelope.welcome_message:type_name -> xmtp.mls.api.v1.WelcomeMessageInput
	19, // 3: xmtp.xmtpv4.ClientEnvelope.identity_update:type_name -> xmtp.identity.associations.IdentityUpdate
	20, // 4: xmtp.xmtpv4.ClientEnvelope.upload_key_package:type_name -> xmtp.mls.api.v1.UploadKeyPackageRequest
	2,  // 5: xmtp.xmtpv4.ClientEnvelope.aad:type_name -> xmtp.xmtpv4.AuthenticatedData
	21, // 6: xmtp.xmtpv4.PayerEnvelope.payer_signature:type_name -> xmtp.identity.associations.RecoverableEcdsaSignature
	4,  // 7: xmtp.xmtpv4.UnsignedOriginatorEnvelope.payer_envelope:type_name -> xmtp.xmtpv4.PayerEnvelope
	21, // 8: xmtp.xmtpv4.OriginatorEnvelope.originator_signature:type_name -> xmtp.identity.associations.RecoverableEcdsaSignature
	6,  // 9: xmtp.xmtpv4.OriginatorEnvelope.blockchain_proof:type_name -> xmtp.xmtpv4.BlockchainProof
	0,  // 10: xmtp.xmtpv4.MisbehaviorReport.type:type_name -> xmtp.xmtpv4.Misbehavior
	7,  // 11: xmtp.xmtpv4.MisbehaviorReport.envelopes:type_name -> xmtp.xmtpv4.OriginatorEnvelope
	1,  // 12: xmtp.xmtpv4.EnvelopesQuery.last_seen:type_name -> xmtp.xmtpv4.VectorClock
	16, // 13: xmtp.xmtpv4.BatchSubscribeEnvelopesRequest.requests:type_name -> xmtp.xmtpv4.BatchSubscribeEnvelopesRequest.SubscribeEnvelopesRequest
	7,  // 14: xmtp.xmtpv4.BatchSubscribeEnvelopesResponse.envelopes:type_name -> xmtp.xmtpv4.OriginatorEnvelope
	9,  // 15: xmtp.xmtpv4.QueryEnvelopesRequest.query:type_name -> xmtp.xmtpv4.EnvelopesQuery
	7,  // 16: xmtp.xmtpv4.QueryEnvelopesResponse.envelopes:type_name -> xmtp.xmtpv4.OriginatorEnvelope
	4,  // 17: xmtp.xmtpv4.PublishEnvelopeRequest.payer_envelope:type_name -> xmtp.xmtpv4.PayerEnvelope
	7,  // 18: xmtp.xmtpv4.PublishEnvelopeResponse.originator_envelope:type_name -> xmtp.xmtpv4.OriginatorEnvelope
	9,  // 19: xmtp.xmtpv4.BatchSubscribeEnvelopesRequest.SubscribeEnvelopesRequest.query:type_name -> xmtp.xmtpv4.EnvelopesQuery
	10, // 20: xmtp.xmtpv4.ReplicationApi.BatchSubscribeEnvelopes:input_type -> xmtp.xmtpv4.BatchSubscribeEnvelopesRequest
	12, // 21: xmtp.xmtpv4.ReplicationApi.QueryEnvelopes:input_type -> xmtp.xmtpv4.QueryEnvelopesRequest
	14, // 22: xmtp.xmtpv4.ReplicationApi.PublishEnvelope:input_type -> xmtp.xmtpv4.PublishEnvelopeRequest
	11, // 23: xmtp.xmtpv4.ReplicationApi.BatchSubscribeEnvelopes:output_type -> xmtp.xmtpv4.BatchSubscribeEnvelopesResponse
	13, // 24: xmtp.xmtpv4.ReplicationApi.QueryEnvelopes:output_type -> xmtp.xmtpv4.QueryEnvelopesResponse
	15, // 25: xmtp.xmtpv4.ReplicationApi.PublishEnvelope:output_type -> xmtp.xmtpv4.PublishEnvelopeResponse
	23, // [23:26] is the sub-list for method output_type
	20, // [20:23] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_xmtpv4_message_api_message_api_proto_init() }
func file_xmtpv4_message_api_message_api_proto_init() {
	if File_xmtpv4_message_api_message_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xmtpv4_message_api_message_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*VectorClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AuthenticatedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ClientEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PayerEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UnsignedOriginatorEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BlockchainProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*OriginatorEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MisbehaviorReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*EnvelopesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BatchSubscribeEnvelopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BatchSubscribeEnvelopesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*QueryEnvelopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*QueryEnvelopesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PublishEnvelopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PublishEnvelopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xmtpv4_message_api_message_api_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*BatchSubscribeEnvelopesRequest_SubscribeEnvelopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_xmtpv4_message_api_message_api_proto_msgTypes[2].OneofWrappers = []any{
		(*ClientEnvelope_GroupMessage)(nil),
		(*ClientEnvelope_WelcomeMessage)(nil),
		(*ClientEnvelope_IdentityUpdate)(nil),
		(*ClientEnvelope_UploadKeyPackage)(nil),
	}
	file_xmtpv4_message_api_message_api_proto_msgTypes[6].OneofWrappers = []any{
		(*OriginatorEnvelope_OriginatorSignature)(nil),
		(*OriginatorEnvelope_BlockchainProof)(nil),
	}
	file_xmtpv4_message_api_message_api_proto_msgTypes[8].OneofWrappers = []any{
		(*EnvelopesQuery_Topic)(nil),
		(*EnvelopesQuery_OriginatorNodeId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xmtpv4_message_api_message_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xmtpv4_message_api_message_api_proto_goTypes,
		DependencyIndexes: file_xmtpv4_message_api_message_api_proto_depIdxs,
		EnumInfos:         file_xmtpv4_message_api_message_api_proto_enumTypes,
		MessageInfos:      file_xmtpv4_message_api_message_api_proto_msgTypes,
	}.Build()
	File_xmtpv4_message_api_message_api_proto = out.File
	file_xmtpv4_message_api_message_api_proto_rawDesc = nil
	file_xmtpv4_message_api_message_api_proto_goTypes = nil
	file_xmtpv4_message_api_message_api_proto_depIdxs = nil
}
