// Message API for XMTP V4

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: xmtpv4/message_api/message_api.proto

package message_api

import (
	envelopes "github.com/xmtp/xmtpd/pkg/proto/xmtpv4/envelopes"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Misbehavior types
type Misbehavior int32

const (
	Misbehavior_MISBEHAVIOR_UNSPECIFIED                 Misbehavior = 0
	Misbehavior_MISBEHAVIOR_UNAVAILABLE_NODE            Misbehavior = 1
	Misbehavior_MISBEHAVIOR_OUT_OF_ORDER_ORIGINATOR_SID Misbehavior = 2
	Misbehavior_MISBEHAVIOR_DUPLICATE_ORIGINATOR_SID    Misbehavior = 3
	Misbehavior_MISBEHAVIOR_CYCLICAL_MESSAGE_ORDERING   Misbehavior = 4
)

// Enum value maps for Misbehavior.
var (
	Misbehavior_name = map[int32]string{
		0: "MISBEHAVIOR_UNSPECIFIED",
		1: "MISBEHAVIOR_UNAVAILABLE_NODE",
		2: "MISBEHAVIOR_OUT_OF_ORDER_ORIGINATOR_SID",
		3: "MISBEHAVIOR_DUPLICATE_ORIGINATOR_SID",
		4: "MISBEHAVIOR_CYCLICAL_MESSAGE_ORDERING",
	}
	Misbehavior_value = map[string]int32{
		"MISBEHAVIOR_UNSPECIFIED":                 0,
		"MISBEHAVIOR_UNAVAILABLE_NODE":            1,
		"MISBEHAVIOR_OUT_OF_ORDER_ORIGINATOR_SID": 2,
		"MISBEHAVIOR_DUPLICATE_ORIGINATOR_SID":    3,
		"MISBEHAVIOR_CYCLICAL_MESSAGE_ORDERING":   4,
	}
)

func (x Misbehavior) Enum() *Misbehavior {
	p := new(Misbehavior)
	*p = x
	return p
}

func (x Misbehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Misbehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_xmtpv4_message_api_message_api_proto_enumTypes[0].Descriptor()
}

func (Misbehavior) Type() protoreflect.EnumType {
	return &file_xmtpv4_message_api_message_api_proto_enumTypes[0]
}

func (x Misbehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Misbehavior.Descriptor instead.
func (Misbehavior) EnumDescriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{0}
}

// Reports node misbehavior, submittable by nodes or by clients
type MisbehaviorReport struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Type          Misbehavior                     `protobuf:"varint,1,opt,name=type,proto3,enum=xmtp.xmtpv4.message_api.Misbehavior" json:"type,omitempty"`
	Envelopes     []*envelopes.OriginatorEnvelope `protobuf:"bytes,2,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MisbehaviorReport) Reset() {
	*x = MisbehaviorReport{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MisbehaviorReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MisbehaviorReport) ProtoMessage() {}

func (x *MisbehaviorReport) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MisbehaviorReport.ProtoReflect.Descriptor instead.
func (*MisbehaviorReport) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{0}
}

func (x *MisbehaviorReport) GetType() Misbehavior {
	if x != nil {
		return x.Type
	}
	return Misbehavior_MISBEHAVIOR_UNSPECIFIED
}

func (x *MisbehaviorReport) GetEnvelopes() []*envelopes.OriginatorEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

// Query for envelopes, shared by query and subscribe endpoints
// Either topics or originator_node_ids may be set, but not both
type EnvelopesQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Client queries
	Topics [][]byte `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	// Node queries
	OriginatorNodeIds []uint32               `protobuf:"varint,2,rep,packed,name=originator_node_ids,json=originatorNodeIds,proto3" json:"originator_node_ids,omitempty"`
	LastSeen          *envelopes.VectorClock `protobuf:"bytes,3,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EnvelopesQuery) Reset() {
	*x = EnvelopesQuery{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvelopesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopesQuery) ProtoMessage() {}

func (x *EnvelopesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopesQuery.ProtoReflect.Descriptor instead.
func (*EnvelopesQuery) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{1}
}

func (x *EnvelopesQuery) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *EnvelopesQuery) GetOriginatorNodeIds() []uint32 {
	if x != nil {
		return x.OriginatorNodeIds
	}
	return nil
}

func (x *EnvelopesQuery) GetLastSeen() *envelopes.VectorClock {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

// Batch subscribe to envelopes
type SubscribeEnvelopesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *EnvelopesQuery        `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeEnvelopesRequest) Reset() {
	*x = SubscribeEnvelopesRequest{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeEnvelopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEnvelopesRequest) ProtoMessage() {}

func (x *SubscribeEnvelopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEnvelopesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeEnvelopesRequest) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeEnvelopesRequest) GetQuery() *EnvelopesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// Streamed response for batch subscribe - can be multiple envelopes at once
type SubscribeEnvelopesResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Envelopes     []*envelopes.OriginatorEnvelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeEnvelopesResponse) Reset() {
	*x = SubscribeEnvelopesResponse{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeEnvelopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEnvelopesResponse) ProtoMessage() {}

func (x *SubscribeEnvelopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEnvelopesResponse.ProtoReflect.Descriptor instead.
func (*SubscribeEnvelopesResponse) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeEnvelopesResponse) GetEnvelopes() []*envelopes.OriginatorEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

// Query envelopes request
type QueryEnvelopesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *EnvelopesQuery        `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryEnvelopesRequest) Reset() {
	*x = QueryEnvelopesRequest{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryEnvelopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEnvelopesRequest) ProtoMessage() {}

func (x *QueryEnvelopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEnvelopesRequest.ProtoReflect.Descriptor instead.
func (*QueryEnvelopesRequest) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{4}
}

func (x *QueryEnvelopesRequest) GetQuery() *EnvelopesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryEnvelopesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Query envelopes response
type QueryEnvelopesResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Envelopes     []*envelopes.OriginatorEnvelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryEnvelopesResponse) Reset() {
	*x = QueryEnvelopesResponse{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryEnvelopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEnvelopesResponse) ProtoMessage() {}

func (x *QueryEnvelopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEnvelopesResponse.ProtoReflect.Descriptor instead.
func (*QueryEnvelopesResponse) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{5}
}

func (x *QueryEnvelopesResponse) GetEnvelopes() []*envelopes.OriginatorEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type PublishPayerEnvelopesRequest struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	PayerEnvelopes []*envelopes.PayerEnvelope `protobuf:"bytes,1,rep,name=payer_envelopes,json=payerEnvelopes,proto3" json:"payer_envelopes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PublishPayerEnvelopesRequest) Reset() {
	*x = PublishPayerEnvelopesRequest{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishPayerEnvelopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishPayerEnvelopesRequest) ProtoMessage() {}

func (x *PublishPayerEnvelopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishPayerEnvelopesRequest.ProtoReflect.Descriptor instead.
func (*PublishPayerEnvelopesRequest) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{6}
}

func (x *PublishPayerEnvelopesRequest) GetPayerEnvelopes() []*envelopes.PayerEnvelope {
	if x != nil {
		return x.PayerEnvelopes
	}
	return nil
}

type PublishPayerEnvelopesResponse struct {
	state               protoimpl.MessageState          `protogen:"open.v1"`
	OriginatorEnvelopes []*envelopes.OriginatorEnvelope `protobuf:"bytes,1,rep,name=originator_envelopes,json=originatorEnvelopes,proto3" json:"originator_envelopes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PublishPayerEnvelopesResponse) Reset() {
	*x = PublishPayerEnvelopesResponse{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishPayerEnvelopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishPayerEnvelopesResponse) ProtoMessage() {}

func (x *PublishPayerEnvelopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishPayerEnvelopesResponse.ProtoReflect.Descriptor instead.
func (*PublishPayerEnvelopesResponse) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{7}
}

func (x *PublishPayerEnvelopesResponse) GetOriginatorEnvelopes() []*envelopes.OriginatorEnvelope {
	if x != nil {
		return x.OriginatorEnvelopes
	}
	return nil
}

// Request to retrieve the XIDs for the given addresses
type GetInboxIdsRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Requests      []*GetInboxIdsRequest_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInboxIdsRequest) Reset() {
	*x = GetInboxIdsRequest{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInboxIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInboxIdsRequest) ProtoMessage() {}

func (x *GetInboxIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInboxIdsRequest.ProtoReflect.Descriptor instead.
func (*GetInboxIdsRequest) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetInboxIdsRequest) GetRequests() []*GetInboxIdsRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Response with the XIDs for the requested addresses
type GetInboxIdsResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Responses     []*GetInboxIdsResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInboxIdsResponse) Reset() {
	*x = GetInboxIdsResponse{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInboxIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInboxIdsResponse) ProtoMessage() {}

func (x *GetInboxIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInboxIdsResponse.ProtoReflect.Descriptor instead.
func (*GetInboxIdsResponse) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetInboxIdsResponse) GetResponses() []*GetInboxIdsResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

// A single request for a given address
type GetInboxIdsRequest_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInboxIdsRequest_Request) Reset() {
	*x = GetInboxIdsRequest_Request{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInboxIdsRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInboxIdsRequest_Request) ProtoMessage() {}

func (x *GetInboxIdsRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInboxIdsRequest_Request.ProtoReflect.Descriptor instead.
func (*GetInboxIdsRequest_Request) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetInboxIdsRequest_Request) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// A single response for a given address
type GetInboxIdsResponse_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	InboxId       *string                `protobuf:"bytes,2,opt,name=inbox_id,json=inboxId,proto3,oneof" json:"inbox_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInboxIdsResponse_Response) Reset() {
	*x = GetInboxIdsResponse_Response{}
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInboxIdsResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInboxIdsResponse_Response) ProtoMessage() {}

func (x *GetInboxIdsResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_xmtpv4_message_api_message_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInboxIdsResponse_Response.ProtoReflect.Descriptor instead.
func (*GetInboxIdsResponse_Response) Descriptor() ([]byte, []int) {
	return file_xmtpv4_message_api_message_api_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetInboxIdsResponse_Response) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetInboxIdsResponse_Response) GetInboxId() string {
	if x != nil && x.InboxId != nil {
		return *x.InboxId
	}
	return ""
}

var File_xmtpv4_message_api_message_api_proto protoreflect.FileDescriptor

var file_xmtpv4_message_api_message_api_proto_rawDesc = []byte{
	0x0a, 0x24, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74,
	0x70, 0x76, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x78,
	0x6d, 0x74, 0x70, 0x76, 0x34, 0x2f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x2f,
	0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x96, 0x01, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76,
	0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x69,
	0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x47, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34,
	0x2e, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x76, 0x34, 0x2e, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x65, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e,
	0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x61, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34,
	0x2e, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x1c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x50, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e,
	0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x1d, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x50, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x76, 0x34, 0x2e, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x23,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x1a, 0x51, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x5f, 0x69, 0x64, 0x2a, 0xce, 0x01, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f,
	0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x28, 0x0a, 0x24, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x49, 0x53,
	0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x32, 0x94, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x12, 0xa7, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x32,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a,
	0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x2d, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x30,
	0x01, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x76, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70,
	0x76, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a,
	0x22, 0x17, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d,
	0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76,
	0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x78, 0x6d, 0x74,
	0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f,
	0x6d, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x8a,
	0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x73, 0x12, 0x2b,
	0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x78, 0x6d,
	0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65,
	0x74, 0x2d, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2d, 0x69, 0x64, 0x73, 0x42, 0xdc, 0x01, 0x0a, 0x1b,
	0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x2e, 0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x42, 0x0f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x6d, 0x74, 0x70, 0x2f,
	0x78, 0x6d, 0x74, 0x70, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x78, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0xa2, 0x02, 0x03, 0x58, 0x58, 0x4d, 0xaa, 0x02, 0x16, 0x58, 0x6d, 0x74, 0x70, 0x2e,
	0x58, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70,
	0x69, 0xca, 0x02, 0x16, 0x58, 0x6d, 0x74, 0x70, 0x5c, 0x58, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x5c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x69, 0xe2, 0x02, 0x22, 0x58, 0x6d, 0x74,
	0x70, 0x5c, 0x58, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x5c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x70, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x18, 0x58, 0x6d, 0x74, 0x70, 0x3a, 0x3a, 0x58, 0x6d, 0x74, 0x70, 0x76, 0x34, 0x3a, 0x3a,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_xmtpv4_message_api_message_api_proto_rawDescOnce sync.Once
	file_xmtpv4_message_api_message_api_proto_rawDescData = file_xmtpv4_message_api_message_api_proto_rawDesc
)

func file_xmtpv4_message_api_message_api_proto_rawDescGZIP() []byte {
	file_xmtpv4_message_api_message_api_proto_rawDescOnce.Do(func() {
		file_xmtpv4_message_api_message_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_xmtpv4_message_api_message_api_proto_rawDescData)
	})
	return file_xmtpv4_message_api_message_api_proto_rawDescData
}

var file_xmtpv4_message_api_message_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_xmtpv4_message_api_message_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_xmtpv4_message_api_message_api_proto_goTypes = []any{
	(Misbehavior)(0),                      // 0: xmtp.xmtpv4.message_api.Misbehavior
	(*MisbehaviorReport)(nil),             // 1: xmtp.xmtpv4.message_api.MisbehaviorReport
	(*EnvelopesQuery)(nil),                // 2: xmtp.xmtpv4.message_api.EnvelopesQuery
	(*SubscribeEnvelopesRequest)(nil),     // 3: xmtp.xmtpv4.message_api.SubscribeEnvelopesRequest
	(*SubscribeEnvelopesResponse)(nil),    // 4: xmtp.xmtpv4.message_api.SubscribeEnvelopesResponse
	(*QueryEnvelopesRequest)(nil),         // 5: xmtp.xmtpv4.message_api.QueryEnvelopesRequest
	(*QueryEnvelopesResponse)(nil),        // 6: xmtp.xmtpv4.message_api.QueryEnvelopesResponse
	(*PublishPayerEnvelopesRequest)(nil),  // 7: xmtp.xmtpv4.message_api.PublishPayerEnvelopesRequest
	(*PublishPayerEnvelopesResponse)(nil), // 8: xmtp.xmtpv4.message_api.PublishPayerEnvelopesResponse
	(*GetInboxIdsRequest)(nil),            // 9: xmtp.xmtpv4.message_api.GetInboxIdsRequest
	(*GetInboxIdsResponse)(nil),           // 10: xmtp.xmtpv4.message_api.GetInboxIdsResponse
	(*GetInboxIdsRequest_Request)(nil),    // 11: xmtp.xmtpv4.message_api.GetInboxIdsRequest.Request
	(*GetInboxIdsResponse_Response)(nil),  // 12: xmtp.xmtpv4.message_api.GetInboxIdsResponse.Response
	(*envelopes.OriginatorEnvelope)(nil),  // 13: xmtp.xmtpv4.envelopes.OriginatorEnvelope
	(*envelopes.VectorClock)(nil),         // 14: xmtp.xmtpv4.envelopes.VectorClock
	(*envelopes.PayerEnvelope)(nil),       // 15: xmtp.xmtpv4.envelopes.PayerEnvelope
}
var file_xmtpv4_message_api_message_api_proto_depIdxs = []int32{
	0,  // 0: xmtp.xmtpv4.message_api.MisbehaviorReport.type:type_name -> xmtp.xmtpv4.message_api.Misbehavior
	13, // 1: xmtp.xmtpv4.message_api.MisbehaviorReport.envelopes:type_name -> xmtp.xmtpv4.envelopes.OriginatorEnvelope
	14, // 2: xmtp.xmtpv4.message_api.EnvelopesQuery.last_seen:type_name -> xmtp.xmtpv4.envelopes.VectorClock
	2,  // 3: xmtp.xmtpv4.message_api.SubscribeEnvelopesRequest.query:type_name -> xmtp.xmtpv4.message_api.EnvelopesQuery
	13, // 4: xmtp.xmtpv4.message_api.SubscribeEnvelopesResponse.envelopes:type_name -> xmtp.xmtpv4.envelopes.OriginatorEnvelope
	2,  // 5: xmtp.xmtpv4.message_api.QueryEnvelopesRequest.query:type_name -> xmtp.xmtpv4.message_api.EnvelopesQuery
	13, // 6: xmtp.xmtpv4.message_api.QueryEnvelopesResponse.envelopes:type_name -> xmtp.xmtpv4.envelopes.OriginatorEnvelope
	15, // 7: xmtp.xmtpv4.message_api.PublishPayerEnvelopesRequest.payer_envelopes:type_name -> xmtp.xmtpv4.envelopes.PayerEnvelope
	13, // 8: xmtp.xmtpv4.message_api.PublishPayerEnvelopesResponse.originator_envelopes:type_name -> xmtp.xmtpv4.envelopes.OriginatorEnvelope
	11, // 9: xmtp.xmtpv4.message_api.GetInboxIdsRequest.requests:type_name -> xmtp.xmtpv4.message_api.GetInboxIdsRequest.Request
	12, // 10: xmtp.xmtpv4.message_api.GetInboxIdsResponse.responses:type_name -> xmtp.xmtpv4.message_api.GetInboxIdsResponse.Response
	3,  // 11: xmtp.xmtpv4.message_api.ReplicationApi.SubscribeEnvelopes:input_type -> xmtp.xmtpv4.message_api.SubscribeEnvelopesRequest
	5,  // 12: xmtp.xmtpv4.message_api.ReplicationApi.QueryEnvelopes:input_type -> xmtp.xmtpv4.message_api.QueryEnvelopesRequest
	7,  // 13: xmtp.xmtpv4.message_api.ReplicationApi.PublishPayerEnvelopes:input_type -> xmtp.xmtpv4.message_api.PublishPayerEnvelopesRequest
	9,  // 14: xmtp.xmtpv4.message_api.ReplicationApi.GetInboxIds:input_type -> xmtp.xmtpv4.message_api.GetInboxIdsRequest
	4,  // 15: xmtp.xmtpv4.message_api.ReplicationApi.SubscribeEnvelopes:output_type -> xmtp.xmtpv4.message_api.SubscribeEnvelopesResponse
	6,  // 16: xmtp.xmtpv4.message_api.ReplicationApi.QueryEnvelopes:output_type -> xmtp.xmtpv4.message_api.QueryEnvelopesResponse
	8,  // 17: xmtp.xmtpv4.message_api.ReplicationApi.PublishPayerEnvelopes:output_type -> xmtp.xmtpv4.message_api.PublishPayerEnvelopesResponse
	10, // 18: xmtp.xmtpv4.message_api.ReplicationApi.GetInboxIds:output_type -> xmtp.xmtpv4.message_api.GetInboxIdsResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_xmtpv4_message_api_message_api_proto_init() }
func file_xmtpv4_message_api_message_api_proto_init() {
	if File_xmtpv4_message_api_message_api_proto != nil {
		return
	}
	file_xmtpv4_message_api_message_api_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xmtpv4_message_api_message_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xmtpv4_message_api_message_api_proto_goTypes,
		DependencyIndexes: file_xmtpv4_message_api_message_api_proto_depIdxs,
		EnumInfos:         file_xmtpv4_message_api_message_api_proto_enumTypes,
		MessageInfos:      file_xmtpv4_message_api_message_api_proto_msgTypes,
	}.Build()
	File_xmtpv4_message_api_message_api_proto = out.File
	file_xmtpv4_message_api_message_api_proto_rawDesc = nil
	file_xmtpv4_message_api_message_api_proto_goTypes = nil
	file_xmtpv4_message_api_message_api_proto_depIdxs = nil
}
