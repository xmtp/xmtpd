// Message API for XMTP V4

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: xmtpv4/message_api/message_api.proto

package message_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReplicationApi_BatchSubscribeEnvelopes_FullMethodName = "/xmtp.xmtpv4.ReplicationApi/BatchSubscribeEnvelopes"
	ReplicationApi_QueryEnvelopes_FullMethodName          = "/xmtp.xmtpv4.ReplicationApi/QueryEnvelopes"
	ReplicationApi_PublishEnvelope_FullMethodName         = "/xmtp.xmtpv4.ReplicationApi/PublishEnvelope"
	ReplicationApi_GetInboxIds_FullMethodName             = "/xmtp.xmtpv4.ReplicationApi/GetInboxIds"
)

// ReplicationApiClient is the client API for ReplicationApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicationApiClient interface {
	// Subscribe to envelopes
	BatchSubscribeEnvelopes(ctx context.Context, in *BatchSubscribeEnvelopesRequest, opts ...grpc.CallOption) (ReplicationApi_BatchSubscribeEnvelopesClient, error)
	// Query envelopes
	QueryEnvelopes(ctx context.Context, in *QueryEnvelopesRequest, opts ...grpc.CallOption) (*QueryEnvelopesResponse, error)
	// Publish envelope
	PublishEnvelope(ctx context.Context, in *PublishEnvelopeRequest, opts ...grpc.CallOption) (*PublishEnvelopeResponse, error)
	// Get inbox ids
	GetInboxIds(ctx context.Context, in *GetInboxIdsRequest, opts ...grpc.CallOption) (*GetInboxIdsResponse, error)
}

type replicationApiClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationApiClient(cc grpc.ClientConnInterface) ReplicationApiClient {
	return &replicationApiClient{cc}
}

func (c *replicationApiClient) BatchSubscribeEnvelopes(ctx context.Context, in *BatchSubscribeEnvelopesRequest, opts ...grpc.CallOption) (ReplicationApi_BatchSubscribeEnvelopesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicationApi_ServiceDesc.Streams[0], ReplicationApi_BatchSubscribeEnvelopes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationApiBatchSubscribeEnvelopesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationApi_BatchSubscribeEnvelopesClient interface {
	Recv() (*BatchSubscribeEnvelopesResponse, error)
	grpc.ClientStream
}

type replicationApiBatchSubscribeEnvelopesClient struct {
	grpc.ClientStream
}

func (x *replicationApiBatchSubscribeEnvelopesClient) Recv() (*BatchSubscribeEnvelopesResponse, error) {
	m := new(BatchSubscribeEnvelopesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationApiClient) QueryEnvelopes(ctx context.Context, in *QueryEnvelopesRequest, opts ...grpc.CallOption) (*QueryEnvelopesResponse, error) {
	out := new(QueryEnvelopesResponse)
	err := c.cc.Invoke(ctx, ReplicationApi_QueryEnvelopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationApiClient) PublishEnvelope(ctx context.Context, in *PublishEnvelopeRequest, opts ...grpc.CallOption) (*PublishEnvelopeResponse, error) {
	out := new(PublishEnvelopeResponse)
	err := c.cc.Invoke(ctx, ReplicationApi_PublishEnvelope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationApiClient) GetInboxIds(ctx context.Context, in *GetInboxIdsRequest, opts ...grpc.CallOption) (*GetInboxIdsResponse, error) {
	out := new(GetInboxIdsResponse)
	err := c.cc.Invoke(ctx, ReplicationApi_GetInboxIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationApiServer is the server API for ReplicationApi service.
// All implementations must embed UnimplementedReplicationApiServer
// for forward compatibility
type ReplicationApiServer interface {
	// Subscribe to envelopes
	BatchSubscribeEnvelopes(*BatchSubscribeEnvelopesRequest, ReplicationApi_BatchSubscribeEnvelopesServer) error
	// Query envelopes
	QueryEnvelopes(context.Context, *QueryEnvelopesRequest) (*QueryEnvelopesResponse, error)
	// Publish envelope
	PublishEnvelope(context.Context, *PublishEnvelopeRequest) (*PublishEnvelopeResponse, error)
	// Get inbox ids
	GetInboxIds(context.Context, *GetInboxIdsRequest) (*GetInboxIdsResponse, error)
	mustEmbedUnimplementedReplicationApiServer()
}

// UnimplementedReplicationApiServer must be embedded to have forward compatible implementations.
type UnimplementedReplicationApiServer struct {
}

func (UnimplementedReplicationApiServer) BatchSubscribeEnvelopes(*BatchSubscribeEnvelopesRequest, ReplicationApi_BatchSubscribeEnvelopesServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchSubscribeEnvelopes not implemented")
}
func (UnimplementedReplicationApiServer) QueryEnvelopes(context.Context, *QueryEnvelopesRequest) (*QueryEnvelopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEnvelopes not implemented")
}
func (UnimplementedReplicationApiServer) PublishEnvelope(context.Context, *PublishEnvelopeRequest) (*PublishEnvelopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEnvelope not implemented")
}
func (UnimplementedReplicationApiServer) GetInboxIds(context.Context, *GetInboxIdsRequest) (*GetInboxIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboxIds not implemented")
}
func (UnimplementedReplicationApiServer) mustEmbedUnimplementedReplicationApiServer() {}

// UnsafeReplicationApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicationApiServer will
// result in compilation errors.
type UnsafeReplicationApiServer interface {
	mustEmbedUnimplementedReplicationApiServer()
}

func RegisterReplicationApiServer(s grpc.ServiceRegistrar, srv ReplicationApiServer) {
	s.RegisterService(&ReplicationApi_ServiceDesc, srv)
}

func _ReplicationApi_BatchSubscribeEnvelopes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchSubscribeEnvelopesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationApiServer).BatchSubscribeEnvelopes(m, &replicationApiBatchSubscribeEnvelopesServer{stream})
}

type ReplicationApi_BatchSubscribeEnvelopesServer interface {
	Send(*BatchSubscribeEnvelopesResponse) error
	grpc.ServerStream
}

type replicationApiBatchSubscribeEnvelopesServer struct {
	grpc.ServerStream
}

func (x *replicationApiBatchSubscribeEnvelopesServer) Send(m *BatchSubscribeEnvelopesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationApi_QueryEnvelopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnvelopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationApiServer).QueryEnvelopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationApi_QueryEnvelopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationApiServer).QueryEnvelopes(ctx, req.(*QueryEnvelopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationApi_PublishEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEnvelopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationApiServer).PublishEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationApi_PublishEnvelope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationApiServer).PublishEnvelope(ctx, req.(*PublishEnvelopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationApi_GetInboxIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboxIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationApiServer).GetInboxIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicationApi_GetInboxIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationApiServer).GetInboxIds(ctx, req.(*GetInboxIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicationApi_ServiceDesc is the grpc.ServiceDesc for ReplicationApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicationApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xmtp.xmtpv4.ReplicationApi",
	HandlerType: (*ReplicationApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryEnvelopes",
			Handler:    _ReplicationApi_QueryEnvelopes_Handler,
		},
		{
			MethodName: "PublishEnvelope",
			Handler:    _ReplicationApi_PublishEnvelope_Handler,
		},
		{
			MethodName: "GetInboxIds",
			Handler:    _ReplicationApi_GetInboxIds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchSubscribeEnvelopes",
			Handler:       _ReplicationApi_BatchSubscribeEnvelopes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xmtpv4/message_api/message_api.proto",
}
