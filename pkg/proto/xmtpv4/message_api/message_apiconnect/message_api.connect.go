// Message API for XMTP V4

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xmtpv4/message_api/message_api.proto

package message_apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	message_api "github.com/xmtp/xmtpd/pkg/proto/xmtpv4/message_api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReplicationApiName is the fully-qualified name of the ReplicationApi service.
	ReplicationApiName = "xmtp.xmtpv4.message_api.ReplicationApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReplicationApiSubscribeEnvelopesProcedure is the fully-qualified name of the ReplicationApi's
	// SubscribeEnvelopes RPC.
	ReplicationApiSubscribeEnvelopesProcedure = "/xmtp.xmtpv4.message_api.ReplicationApi/SubscribeEnvelopes"
	// ReplicationApiQueryEnvelopesProcedure is the fully-qualified name of the ReplicationApi's
	// QueryEnvelopes RPC.
	ReplicationApiQueryEnvelopesProcedure = "/xmtp.xmtpv4.message_api.ReplicationApi/QueryEnvelopes"
	// ReplicationApiPublishPayerEnvelopesProcedure is the fully-qualified name of the ReplicationApi's
	// PublishPayerEnvelopes RPC.
	ReplicationApiPublishPayerEnvelopesProcedure = "/xmtp.xmtpv4.message_api.ReplicationApi/PublishPayerEnvelopes"
	// ReplicationApiGetInboxIdsProcedure is the fully-qualified name of the ReplicationApi's
	// GetInboxIds RPC.
	ReplicationApiGetInboxIdsProcedure = "/xmtp.xmtpv4.message_api.ReplicationApi/GetInboxIds"
	// ReplicationApiGetNewestEnvelopeProcedure is the fully-qualified name of the ReplicationApi's
	// GetNewestEnvelope RPC.
	ReplicationApiGetNewestEnvelopeProcedure = "/xmtp.xmtpv4.message_api.ReplicationApi/GetNewestEnvelope"
)

// ReplicationApiClient is a client for the xmtp.xmtpv4.message_api.ReplicationApi service.
type ReplicationApiClient interface {
	SubscribeEnvelopes(context.Context, *connect.Request[message_api.SubscribeEnvelopesRequest]) (*connect.ServerStreamForClient[message_api.SubscribeEnvelopesResponse], error)
	QueryEnvelopes(context.Context, *connect.Request[message_api.QueryEnvelopesRequest]) (*connect.Response[message_api.QueryEnvelopesResponse], error)
	PublishPayerEnvelopes(context.Context, *connect.Request[message_api.PublishPayerEnvelopesRequest]) (*connect.Response[message_api.PublishPayerEnvelopesResponse], error)
	GetInboxIds(context.Context, *connect.Request[message_api.GetInboxIdsRequest]) (*connect.Response[message_api.GetInboxIdsResponse], error)
	// Get the newest envelope for each topic
	GetNewestEnvelope(context.Context, *connect.Request[message_api.GetNewestEnvelopeRequest]) (*connect.Response[message_api.GetNewestEnvelopeResponse], error)
}

// NewReplicationApiClient constructs a client for the xmtp.xmtpv4.message_api.ReplicationApi
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReplicationApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReplicationApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	replicationApiMethods := message_api.File_xmtpv4_message_api_message_api_proto.Services().ByName("ReplicationApi").Methods()
	return &replicationApiClient{
		subscribeEnvelopes: connect.NewClient[message_api.SubscribeEnvelopesRequest, message_api.SubscribeEnvelopesResponse](
			httpClient,
			baseURL+ReplicationApiSubscribeEnvelopesProcedure,
			connect.WithSchema(replicationApiMethods.ByName("SubscribeEnvelopes")),
			connect.WithClientOptions(opts...),
		),
		queryEnvelopes: connect.NewClient[message_api.QueryEnvelopesRequest, message_api.QueryEnvelopesResponse](
			httpClient,
			baseURL+ReplicationApiQueryEnvelopesProcedure,
			connect.WithSchema(replicationApiMethods.ByName("QueryEnvelopes")),
			connect.WithClientOptions(opts...),
		),
		publishPayerEnvelopes: connect.NewClient[message_api.PublishPayerEnvelopesRequest, message_api.PublishPayerEnvelopesResponse](
			httpClient,
			baseURL+ReplicationApiPublishPayerEnvelopesProcedure,
			connect.WithSchema(replicationApiMethods.ByName("PublishPayerEnvelopes")),
			connect.WithClientOptions(opts...),
		),
		getInboxIds: connect.NewClient[message_api.GetInboxIdsRequest, message_api.GetInboxIdsResponse](
			httpClient,
			baseURL+ReplicationApiGetInboxIdsProcedure,
			connect.WithSchema(replicationApiMethods.ByName("GetInboxIds")),
			connect.WithClientOptions(opts...),
		),
		getNewestEnvelope: connect.NewClient[message_api.GetNewestEnvelopeRequest, message_api.GetNewestEnvelopeResponse](
			httpClient,
			baseURL+ReplicationApiGetNewestEnvelopeProcedure,
			connect.WithSchema(replicationApiMethods.ByName("GetNewestEnvelope")),
			connect.WithClientOptions(opts...),
		),
	}
}

// replicationApiClient implements ReplicationApiClient.
type replicationApiClient struct {
	subscribeEnvelopes    *connect.Client[message_api.SubscribeEnvelopesRequest, message_api.SubscribeEnvelopesResponse]
	queryEnvelopes        *connect.Client[message_api.QueryEnvelopesRequest, message_api.QueryEnvelopesResponse]
	publishPayerEnvelopes *connect.Client[message_api.PublishPayerEnvelopesRequest, message_api.PublishPayerEnvelopesResponse]
	getInboxIds           *connect.Client[message_api.GetInboxIdsRequest, message_api.GetInboxIdsResponse]
	getNewestEnvelope     *connect.Client[message_api.GetNewestEnvelopeRequest, message_api.GetNewestEnvelopeResponse]
}

// SubscribeEnvelopes calls xmtp.xmtpv4.message_api.ReplicationApi.SubscribeEnvelopes.
func (c *replicationApiClient) SubscribeEnvelopes(ctx context.Context, req *connect.Request[message_api.SubscribeEnvelopesRequest]) (*connect.ServerStreamForClient[message_api.SubscribeEnvelopesResponse], error) {
	return c.subscribeEnvelopes.CallServerStream(ctx, req)
}

// QueryEnvelopes calls xmtp.xmtpv4.message_api.ReplicationApi.QueryEnvelopes.
func (c *replicationApiClient) QueryEnvelopes(ctx context.Context, req *connect.Request[message_api.QueryEnvelopesRequest]) (*connect.Response[message_api.QueryEnvelopesResponse], error) {
	return c.queryEnvelopes.CallUnary(ctx, req)
}

// PublishPayerEnvelopes calls xmtp.xmtpv4.message_api.ReplicationApi.PublishPayerEnvelopes.
func (c *replicationApiClient) PublishPayerEnvelopes(ctx context.Context, req *connect.Request[message_api.PublishPayerEnvelopesRequest]) (*connect.Response[message_api.PublishPayerEnvelopesResponse], error) {
	return c.publishPayerEnvelopes.CallUnary(ctx, req)
}

// GetInboxIds calls xmtp.xmtpv4.message_api.ReplicationApi.GetInboxIds.
func (c *replicationApiClient) GetInboxIds(ctx context.Context, req *connect.Request[message_api.GetInboxIdsRequest]) (*connect.Response[message_api.GetInboxIdsResponse], error) {
	return c.getInboxIds.CallUnary(ctx, req)
}

// GetNewestEnvelope calls xmtp.xmtpv4.message_api.ReplicationApi.GetNewestEnvelope.
func (c *replicationApiClient) GetNewestEnvelope(ctx context.Context, req *connect.Request[message_api.GetNewestEnvelopeRequest]) (*connect.Response[message_api.GetNewestEnvelopeResponse], error) {
	return c.getNewestEnvelope.CallUnary(ctx, req)
}

// ReplicationApiHandler is an implementation of the xmtp.xmtpv4.message_api.ReplicationApi service.
type ReplicationApiHandler interface {
	SubscribeEnvelopes(context.Context, *connect.Request[message_api.SubscribeEnvelopesRequest], *connect.ServerStream[message_api.SubscribeEnvelopesResponse]) error
	QueryEnvelopes(context.Context, *connect.Request[message_api.QueryEnvelopesRequest]) (*connect.Response[message_api.QueryEnvelopesResponse], error)
	PublishPayerEnvelopes(context.Context, *connect.Request[message_api.PublishPayerEnvelopesRequest]) (*connect.Response[message_api.PublishPayerEnvelopesResponse], error)
	GetInboxIds(context.Context, *connect.Request[message_api.GetInboxIdsRequest]) (*connect.Response[message_api.GetInboxIdsResponse], error)
	// Get the newest envelope for each topic
	GetNewestEnvelope(context.Context, *connect.Request[message_api.GetNewestEnvelopeRequest]) (*connect.Response[message_api.GetNewestEnvelopeResponse], error)
}

// NewReplicationApiHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReplicationApiHandler(svc ReplicationApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	replicationApiMethods := message_api.File_xmtpv4_message_api_message_api_proto.Services().ByName("ReplicationApi").Methods()
	replicationApiSubscribeEnvelopesHandler := connect.NewServerStreamHandler(
		ReplicationApiSubscribeEnvelopesProcedure,
		svc.SubscribeEnvelopes,
		connect.WithSchema(replicationApiMethods.ByName("SubscribeEnvelopes")),
		connect.WithHandlerOptions(opts...),
	)
	replicationApiQueryEnvelopesHandler := connect.NewUnaryHandler(
		ReplicationApiQueryEnvelopesProcedure,
		svc.QueryEnvelopes,
		connect.WithSchema(replicationApiMethods.ByName("QueryEnvelopes")),
		connect.WithHandlerOptions(opts...),
	)
	replicationApiPublishPayerEnvelopesHandler := connect.NewUnaryHandler(
		ReplicationApiPublishPayerEnvelopesProcedure,
		svc.PublishPayerEnvelopes,
		connect.WithSchema(replicationApiMethods.ByName("PublishPayerEnvelopes")),
		connect.WithHandlerOptions(opts...),
	)
	replicationApiGetInboxIdsHandler := connect.NewUnaryHandler(
		ReplicationApiGetInboxIdsProcedure,
		svc.GetInboxIds,
		connect.WithSchema(replicationApiMethods.ByName("GetInboxIds")),
		connect.WithHandlerOptions(opts...),
	)
	replicationApiGetNewestEnvelopeHandler := connect.NewUnaryHandler(
		ReplicationApiGetNewestEnvelopeProcedure,
		svc.GetNewestEnvelope,
		connect.WithSchema(replicationApiMethods.ByName("GetNewestEnvelope")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xmtp.xmtpv4.message_api.ReplicationApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReplicationApiSubscribeEnvelopesProcedure:
			replicationApiSubscribeEnvelopesHandler.ServeHTTP(w, r)
		case ReplicationApiQueryEnvelopesProcedure:
			replicationApiQueryEnvelopesHandler.ServeHTTP(w, r)
		case ReplicationApiPublishPayerEnvelopesProcedure:
			replicationApiPublishPayerEnvelopesHandler.ServeHTTP(w, r)
		case ReplicationApiGetInboxIdsProcedure:
			replicationApiGetInboxIdsHandler.ServeHTTP(w, r)
		case ReplicationApiGetNewestEnvelopeProcedure:
			replicationApiGetNewestEnvelopeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReplicationApiHandler returns CodeUnimplemented from all methods.
type UnimplementedReplicationApiHandler struct{}

func (UnimplementedReplicationApiHandler) SubscribeEnvelopes(context.Context, *connect.Request[message_api.SubscribeEnvelopesRequest], *connect.ServerStream[message_api.SubscribeEnvelopesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.message_api.ReplicationApi.SubscribeEnvelopes is not implemented"))
}

func (UnimplementedReplicationApiHandler) QueryEnvelopes(context.Context, *connect.Request[message_api.QueryEnvelopesRequest]) (*connect.Response[message_api.QueryEnvelopesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.message_api.ReplicationApi.QueryEnvelopes is not implemented"))
}

func (UnimplementedReplicationApiHandler) PublishPayerEnvelopes(context.Context, *connect.Request[message_api.PublishPayerEnvelopesRequest]) (*connect.Response[message_api.PublishPayerEnvelopesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.message_api.ReplicationApi.PublishPayerEnvelopes is not implemented"))
}

func (UnimplementedReplicationApiHandler) GetInboxIds(context.Context, *connect.Request[message_api.GetInboxIdsRequest]) (*connect.Response[message_api.GetInboxIdsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.message_api.ReplicationApi.GetInboxIds is not implemented"))
}

func (UnimplementedReplicationApiHandler) GetNewestEnvelope(context.Context, *connect.Request[message_api.GetNewestEnvelopeRequest]) (*connect.Response[message_api.GetNewestEnvelopeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.message_api.ReplicationApi.GetNewestEnvelope is not implemented"))
}
