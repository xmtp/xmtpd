// API for reporting and querying node misbehavior in decentralized XMTP

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xmtpv4/message_api/misbehavior_api.proto

package message_apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	message_api "github.com/xmtp/xmtpd/pkg/proto/xmtpv4/message_api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MisbehaviorApiName is the fully-qualified name of the MisbehaviorApi service.
	MisbehaviorApiName = "xmtp.xmtpv4.message_api.MisbehaviorApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MisbehaviorApiSubmitMisbehaviorReportProcedure is the fully-qualified name of the
	// MisbehaviorApi's SubmitMisbehaviorReport RPC.
	MisbehaviorApiSubmitMisbehaviorReportProcedure = "/xmtp.xmtpv4.message_api.MisbehaviorApi/SubmitMisbehaviorReport"
	// MisbehaviorApiQueryMisbehaviorReportsProcedure is the fully-qualified name of the
	// MisbehaviorApi's QueryMisbehaviorReports RPC.
	MisbehaviorApiQueryMisbehaviorReportsProcedure = "/xmtp.xmtpv4.message_api.MisbehaviorApi/QueryMisbehaviorReports"
)

// MisbehaviorApiClient is a client for the xmtp.xmtpv4.message_api.MisbehaviorApi service.
type MisbehaviorApiClient interface {
	SubmitMisbehaviorReport(context.Context, *connect.Request[message_api.SubmitMisbehaviorReportRequest]) (*connect.Response[message_api.SubmitMisbehaviorReportResponse], error)
	QueryMisbehaviorReports(context.Context, *connect.Request[message_api.QueryMisbehaviorReportsRequest]) (*connect.Response[message_api.QueryMisbehaviorReportsResponse], error)
}

// NewMisbehaviorApiClient constructs a client for the xmtp.xmtpv4.message_api.MisbehaviorApi
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMisbehaviorApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MisbehaviorApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	misbehaviorApiMethods := message_api.File_xmtpv4_message_api_misbehavior_api_proto.Services().ByName("MisbehaviorApi").Methods()
	return &misbehaviorApiClient{
		submitMisbehaviorReport: connect.NewClient[message_api.SubmitMisbehaviorReportRequest, message_api.SubmitMisbehaviorReportResponse](
			httpClient,
			baseURL+MisbehaviorApiSubmitMisbehaviorReportProcedure,
			connect.WithSchema(misbehaviorApiMethods.ByName("SubmitMisbehaviorReport")),
			connect.WithClientOptions(opts...),
		),
		queryMisbehaviorReports: connect.NewClient[message_api.QueryMisbehaviorReportsRequest, message_api.QueryMisbehaviorReportsResponse](
			httpClient,
			baseURL+MisbehaviorApiQueryMisbehaviorReportsProcedure,
			connect.WithSchema(misbehaviorApiMethods.ByName("QueryMisbehaviorReports")),
			connect.WithClientOptions(opts...),
		),
	}
}

// misbehaviorApiClient implements MisbehaviorApiClient.
type misbehaviorApiClient struct {
	submitMisbehaviorReport *connect.Client[message_api.SubmitMisbehaviorReportRequest, message_api.SubmitMisbehaviorReportResponse]
	queryMisbehaviorReports *connect.Client[message_api.QueryMisbehaviorReportsRequest, message_api.QueryMisbehaviorReportsResponse]
}

// SubmitMisbehaviorReport calls xmtp.xmtpv4.message_api.MisbehaviorApi.SubmitMisbehaviorReport.
func (c *misbehaviorApiClient) SubmitMisbehaviorReport(ctx context.Context, req *connect.Request[message_api.SubmitMisbehaviorReportRequest]) (*connect.Response[message_api.SubmitMisbehaviorReportResponse], error) {
	return c.submitMisbehaviorReport.CallUnary(ctx, req)
}

// QueryMisbehaviorReports calls xmtp.xmtpv4.message_api.MisbehaviorApi.QueryMisbehaviorReports.
func (c *misbehaviorApiClient) QueryMisbehaviorReports(ctx context.Context, req *connect.Request[message_api.QueryMisbehaviorReportsRequest]) (*connect.Response[message_api.QueryMisbehaviorReportsResponse], error) {
	return c.queryMisbehaviorReports.CallUnary(ctx, req)
}

// MisbehaviorApiHandler is an implementation of the xmtp.xmtpv4.message_api.MisbehaviorApi service.
type MisbehaviorApiHandler interface {
	SubmitMisbehaviorReport(context.Context, *connect.Request[message_api.SubmitMisbehaviorReportRequest]) (*connect.Response[message_api.SubmitMisbehaviorReportResponse], error)
	QueryMisbehaviorReports(context.Context, *connect.Request[message_api.QueryMisbehaviorReportsRequest]) (*connect.Response[message_api.QueryMisbehaviorReportsResponse], error)
}

// NewMisbehaviorApiHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMisbehaviorApiHandler(svc MisbehaviorApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	misbehaviorApiMethods := message_api.File_xmtpv4_message_api_misbehavior_api_proto.Services().ByName("MisbehaviorApi").Methods()
	misbehaviorApiSubmitMisbehaviorReportHandler := connect.NewUnaryHandler(
		MisbehaviorApiSubmitMisbehaviorReportProcedure,
		svc.SubmitMisbehaviorReport,
		connect.WithSchema(misbehaviorApiMethods.ByName("SubmitMisbehaviorReport")),
		connect.WithHandlerOptions(opts...),
	)
	misbehaviorApiQueryMisbehaviorReportsHandler := connect.NewUnaryHandler(
		MisbehaviorApiQueryMisbehaviorReportsProcedure,
		svc.QueryMisbehaviorReports,
		connect.WithSchema(misbehaviorApiMethods.ByName("QueryMisbehaviorReports")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xmtp.xmtpv4.message_api.MisbehaviorApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MisbehaviorApiSubmitMisbehaviorReportProcedure:
			misbehaviorApiSubmitMisbehaviorReportHandler.ServeHTTP(w, r)
		case MisbehaviorApiQueryMisbehaviorReportsProcedure:
			misbehaviorApiQueryMisbehaviorReportsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMisbehaviorApiHandler returns CodeUnimplemented from all methods.
type UnimplementedMisbehaviorApiHandler struct{}

func (UnimplementedMisbehaviorApiHandler) SubmitMisbehaviorReport(context.Context, *connect.Request[message_api.SubmitMisbehaviorReportRequest]) (*connect.Response[message_api.SubmitMisbehaviorReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.message_api.MisbehaviorApi.SubmitMisbehaviorReport is not implemented"))
}

func (UnimplementedMisbehaviorApiHandler) QueryMisbehaviorReports(context.Context, *connect.Request[message_api.QueryMisbehaviorReportsRequest]) (*connect.Response[message_api.QueryMisbehaviorReportsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.message_api.MisbehaviorApi.QueryMisbehaviorReports is not implemented"))
}
