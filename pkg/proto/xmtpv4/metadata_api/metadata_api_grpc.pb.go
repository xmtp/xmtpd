// Metadata API

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: xmtpv4/metadata_api/metadata_api.proto

package metadata_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetadataApi_GetSyncCursor_FullMethodName       = "/xmtp.xmtpv4.metadata_api.MetadataApi/GetSyncCursor"
	MetadataApi_SubscribeSyncCursor_FullMethodName = "/xmtp.xmtpv4.metadata_api.MetadataApi/SubscribeSyncCursor"
	MetadataApi_GetVersion_FullMethodName          = "/xmtp.xmtpv4.metadata_api.MetadataApi/GetVersion"
	MetadataApi_GetPayerInfo_FullMethodName        = "/xmtp.xmtpv4.metadata_api.MetadataApi/GetPayerInfo"
)

// MetadataApiClient is the client API for MetadataApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Metadata for distributed tracing, debugging and synchronization
type MetadataApiClient interface {
	GetSyncCursor(ctx context.Context, in *GetSyncCursorRequest, opts ...grpc.CallOption) (*GetSyncCursorResponse, error)
	SubscribeSyncCursor(ctx context.Context, in *GetSyncCursorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSyncCursorResponse], error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	GetPayerInfo(ctx context.Context, in *GetPayerInfoRequest, opts ...grpc.CallOption) (*GetPayerInfoResponse, error)
}

type metadataApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataApiClient(cc grpc.ClientConnInterface) MetadataApiClient {
	return &metadataApiClient{cc}
}

func (c *metadataApiClient) GetSyncCursor(ctx context.Context, in *GetSyncCursorRequest, opts ...grpc.CallOption) (*GetSyncCursorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSyncCursorResponse)
	err := c.cc.Invoke(ctx, MetadataApi_GetSyncCursor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataApiClient) SubscribeSyncCursor(ctx context.Context, in *GetSyncCursorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSyncCursorResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetadataApi_ServiceDesc.Streams[0], MetadataApi_SubscribeSyncCursor_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSyncCursorRequest, GetSyncCursorResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataApi_SubscribeSyncCursorClient = grpc.ServerStreamingClient[GetSyncCursorResponse]

func (c *metadataApiClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, MetadataApi_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataApiClient) GetPayerInfo(ctx context.Context, in *GetPayerInfoRequest, opts ...grpc.CallOption) (*GetPayerInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayerInfoResponse)
	err := c.cc.Invoke(ctx, MetadataApi_GetPayerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataApiServer is the server API for MetadataApi service.
// All implementations should embed UnimplementedMetadataApiServer
// for forward compatibility.
//
// Metadata for distributed tracing, debugging and synchronization
type MetadataApiServer interface {
	GetSyncCursor(context.Context, *GetSyncCursorRequest) (*GetSyncCursorResponse, error)
	SubscribeSyncCursor(*GetSyncCursorRequest, grpc.ServerStreamingServer[GetSyncCursorResponse]) error
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	GetPayerInfo(context.Context, *GetPayerInfoRequest) (*GetPayerInfoResponse, error)
}

// UnimplementedMetadataApiServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetadataApiServer struct{}

func (UnimplementedMetadataApiServer) GetSyncCursor(context.Context, *GetSyncCursorRequest) (*GetSyncCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncCursor not implemented")
}
func (UnimplementedMetadataApiServer) SubscribeSyncCursor(*GetSyncCursorRequest, grpc.ServerStreamingServer[GetSyncCursorResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSyncCursor not implemented")
}
func (UnimplementedMetadataApiServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedMetadataApiServer) GetPayerInfo(context.Context, *GetPayerInfoRequest) (*GetPayerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayerInfo not implemented")
}
func (UnimplementedMetadataApiServer) testEmbeddedByValue() {}

// UnsafeMetadataApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataApiServer will
// result in compilation errors.
type UnsafeMetadataApiServer interface {
	mustEmbedUnimplementedMetadataApiServer()
}

func RegisterMetadataApiServer(s grpc.ServiceRegistrar, srv MetadataApiServer) {
	// If the following call pancis, it indicates UnimplementedMetadataApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetadataApi_ServiceDesc, srv)
}

func _MetadataApi_GetSyncCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataApiServer).GetSyncCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataApi_GetSyncCursor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataApiServer).GetSyncCursor(ctx, req.(*GetSyncCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataApi_SubscribeSyncCursor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSyncCursorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataApiServer).SubscribeSyncCursor(m, &grpc.GenericServerStream[GetSyncCursorRequest, GetSyncCursorResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataApi_SubscribeSyncCursorServer = grpc.ServerStreamingServer[GetSyncCursorResponse]

func _MetadataApi_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataApiServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataApi_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataApiServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataApi_GetPayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataApiServer).GetPayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataApi_GetPayerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataApiServer).GetPayerInfo(ctx, req.(*GetPayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataApi_ServiceDesc is the grpc.ServiceDesc for MetadataApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xmtp.xmtpv4.metadata_api.MetadataApi",
	HandlerType: (*MetadataApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSyncCursor",
			Handler:    _MetadataApi_GetSyncCursor_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _MetadataApi_GetVersion_Handler,
		},
		{
			MethodName: "GetPayerInfo",
			Handler:    _MetadataApi_GetPayerInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSyncCursor",
			Handler:       _MetadataApi_SubscribeSyncCursor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xmtpv4/metadata_api/metadata_api.proto",
}
