// Metadata API

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xmtpv4/metadata_api/metadata_api.proto

package metadata_apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	metadata_api "github.com/xmtp/xmtpd/pkg/proto/xmtpv4/metadata_api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MetadataApiName is the fully-qualified name of the MetadataApi service.
	MetadataApiName = "xmtp.xmtpv4.metadata_api.MetadataApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MetadataApiGetSyncCursorProcedure is the fully-qualified name of the MetadataApi's GetSyncCursor
	// RPC.
	MetadataApiGetSyncCursorProcedure = "/xmtp.xmtpv4.metadata_api.MetadataApi/GetSyncCursor"
	// MetadataApiSubscribeSyncCursorProcedure is the fully-qualified name of the MetadataApi's
	// SubscribeSyncCursor RPC.
	MetadataApiSubscribeSyncCursorProcedure = "/xmtp.xmtpv4.metadata_api.MetadataApi/SubscribeSyncCursor"
	// MetadataApiGetVersionProcedure is the fully-qualified name of the MetadataApi's GetVersion RPC.
	MetadataApiGetVersionProcedure = "/xmtp.xmtpv4.metadata_api.MetadataApi/GetVersion"
	// MetadataApiGetPayerInfoProcedure is the fully-qualified name of the MetadataApi's GetPayerInfo
	// RPC.
	MetadataApiGetPayerInfoProcedure = "/xmtp.xmtpv4.metadata_api.MetadataApi/GetPayerInfo"
)

// MetadataApiClient is a client for the xmtp.xmtpv4.metadata_api.MetadataApi service.
type MetadataApiClient interface {
	GetSyncCursor(context.Context, *connect.Request[metadata_api.GetSyncCursorRequest]) (*connect.Response[metadata_api.GetSyncCursorResponse], error)
	SubscribeSyncCursor(context.Context, *connect.Request[metadata_api.GetSyncCursorRequest]) (*connect.ServerStreamForClient[metadata_api.GetSyncCursorResponse], error)
	GetVersion(context.Context, *connect.Request[metadata_api.GetVersionRequest]) (*connect.Response[metadata_api.GetVersionResponse], error)
	GetPayerInfo(context.Context, *connect.Request[metadata_api.GetPayerInfoRequest]) (*connect.Response[metadata_api.GetPayerInfoResponse], error)
}

// NewMetadataApiClient constructs a client for the xmtp.xmtpv4.metadata_api.MetadataApi service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetadataApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MetadataApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	metadataApiMethods := metadata_api.File_xmtpv4_metadata_api_metadata_api_proto.Services().ByName("MetadataApi").Methods()
	return &metadataApiClient{
		getSyncCursor: connect.NewClient[metadata_api.GetSyncCursorRequest, metadata_api.GetSyncCursorResponse](
			httpClient,
			baseURL+MetadataApiGetSyncCursorProcedure,
			connect.WithSchema(metadataApiMethods.ByName("GetSyncCursor")),
			connect.WithClientOptions(opts...),
		),
		subscribeSyncCursor: connect.NewClient[metadata_api.GetSyncCursorRequest, metadata_api.GetSyncCursorResponse](
			httpClient,
			baseURL+MetadataApiSubscribeSyncCursorProcedure,
			connect.WithSchema(metadataApiMethods.ByName("SubscribeSyncCursor")),
			connect.WithClientOptions(opts...),
		),
		getVersion: connect.NewClient[metadata_api.GetVersionRequest, metadata_api.GetVersionResponse](
			httpClient,
			baseURL+MetadataApiGetVersionProcedure,
			connect.WithSchema(metadataApiMethods.ByName("GetVersion")),
			connect.WithClientOptions(opts...),
		),
		getPayerInfo: connect.NewClient[metadata_api.GetPayerInfoRequest, metadata_api.GetPayerInfoResponse](
			httpClient,
			baseURL+MetadataApiGetPayerInfoProcedure,
			connect.WithSchema(metadataApiMethods.ByName("GetPayerInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// metadataApiClient implements MetadataApiClient.
type metadataApiClient struct {
	getSyncCursor       *connect.Client[metadata_api.GetSyncCursorRequest, metadata_api.GetSyncCursorResponse]
	subscribeSyncCursor *connect.Client[metadata_api.GetSyncCursorRequest, metadata_api.GetSyncCursorResponse]
	getVersion          *connect.Client[metadata_api.GetVersionRequest, metadata_api.GetVersionResponse]
	getPayerInfo        *connect.Client[metadata_api.GetPayerInfoRequest, metadata_api.GetPayerInfoResponse]
}

// GetSyncCursor calls xmtp.xmtpv4.metadata_api.MetadataApi.GetSyncCursor.
func (c *metadataApiClient) GetSyncCursor(ctx context.Context, req *connect.Request[metadata_api.GetSyncCursorRequest]) (*connect.Response[metadata_api.GetSyncCursorResponse], error) {
	return c.getSyncCursor.CallUnary(ctx, req)
}

// SubscribeSyncCursor calls xmtp.xmtpv4.metadata_api.MetadataApi.SubscribeSyncCursor.
func (c *metadataApiClient) SubscribeSyncCursor(ctx context.Context, req *connect.Request[metadata_api.GetSyncCursorRequest]) (*connect.ServerStreamForClient[metadata_api.GetSyncCursorResponse], error) {
	return c.subscribeSyncCursor.CallServerStream(ctx, req)
}

// GetVersion calls xmtp.xmtpv4.metadata_api.MetadataApi.GetVersion.
func (c *metadataApiClient) GetVersion(ctx context.Context, req *connect.Request[metadata_api.GetVersionRequest]) (*connect.Response[metadata_api.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// GetPayerInfo calls xmtp.xmtpv4.metadata_api.MetadataApi.GetPayerInfo.
func (c *metadataApiClient) GetPayerInfo(ctx context.Context, req *connect.Request[metadata_api.GetPayerInfoRequest]) (*connect.Response[metadata_api.GetPayerInfoResponse], error) {
	return c.getPayerInfo.CallUnary(ctx, req)
}

// MetadataApiHandler is an implementation of the xmtp.xmtpv4.metadata_api.MetadataApi service.
type MetadataApiHandler interface {
	GetSyncCursor(context.Context, *connect.Request[metadata_api.GetSyncCursorRequest]) (*connect.Response[metadata_api.GetSyncCursorResponse], error)
	SubscribeSyncCursor(context.Context, *connect.Request[metadata_api.GetSyncCursorRequest], *connect.ServerStream[metadata_api.GetSyncCursorResponse]) error
	GetVersion(context.Context, *connect.Request[metadata_api.GetVersionRequest]) (*connect.Response[metadata_api.GetVersionResponse], error)
	GetPayerInfo(context.Context, *connect.Request[metadata_api.GetPayerInfoRequest]) (*connect.Response[metadata_api.GetPayerInfoResponse], error)
}

// NewMetadataApiHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetadataApiHandler(svc MetadataApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	metadataApiMethods := metadata_api.File_xmtpv4_metadata_api_metadata_api_proto.Services().ByName("MetadataApi").Methods()
	metadataApiGetSyncCursorHandler := connect.NewUnaryHandler(
		MetadataApiGetSyncCursorProcedure,
		svc.GetSyncCursor,
		connect.WithSchema(metadataApiMethods.ByName("GetSyncCursor")),
		connect.WithHandlerOptions(opts...),
	)
	metadataApiSubscribeSyncCursorHandler := connect.NewServerStreamHandler(
		MetadataApiSubscribeSyncCursorProcedure,
		svc.SubscribeSyncCursor,
		connect.WithSchema(metadataApiMethods.ByName("SubscribeSyncCursor")),
		connect.WithHandlerOptions(opts...),
	)
	metadataApiGetVersionHandler := connect.NewUnaryHandler(
		MetadataApiGetVersionProcedure,
		svc.GetVersion,
		connect.WithSchema(metadataApiMethods.ByName("GetVersion")),
		connect.WithHandlerOptions(opts...),
	)
	metadataApiGetPayerInfoHandler := connect.NewUnaryHandler(
		MetadataApiGetPayerInfoProcedure,
		svc.GetPayerInfo,
		connect.WithSchema(metadataApiMethods.ByName("GetPayerInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xmtp.xmtpv4.metadata_api.MetadataApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MetadataApiGetSyncCursorProcedure:
			metadataApiGetSyncCursorHandler.ServeHTTP(w, r)
		case MetadataApiSubscribeSyncCursorProcedure:
			metadataApiSubscribeSyncCursorHandler.ServeHTTP(w, r)
		case MetadataApiGetVersionProcedure:
			metadataApiGetVersionHandler.ServeHTTP(w, r)
		case MetadataApiGetPayerInfoProcedure:
			metadataApiGetPayerInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMetadataApiHandler returns CodeUnimplemented from all methods.
type UnimplementedMetadataApiHandler struct{}

func (UnimplementedMetadataApiHandler) GetSyncCursor(context.Context, *connect.Request[metadata_api.GetSyncCursorRequest]) (*connect.Response[metadata_api.GetSyncCursorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.metadata_api.MetadataApi.GetSyncCursor is not implemented"))
}

func (UnimplementedMetadataApiHandler) SubscribeSyncCursor(context.Context, *connect.Request[metadata_api.GetSyncCursorRequest], *connect.ServerStream[metadata_api.GetSyncCursorResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.metadata_api.MetadataApi.SubscribeSyncCursor is not implemented"))
}

func (UnimplementedMetadataApiHandler) GetVersion(context.Context, *connect.Request[metadata_api.GetVersionRequest]) (*connect.Response[metadata_api.GetVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.metadata_api.MetadataApi.GetVersion is not implemented"))
}

func (UnimplementedMetadataApiHandler) GetPayerInfo(context.Context, *connect.Request[metadata_api.GetPayerInfoRequest]) (*connect.Response[metadata_api.GetPayerInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.metadata_api.MetadataApi.GetPayerInfo is not implemented"))
}
