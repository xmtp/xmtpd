// Payer API

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xmtpv4/payer_api/payer_api.proto

package payer_apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	payer_api "github.com/xmtp/xmtpd/pkg/proto/xmtpv4/payer_api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PayerApiName is the fully-qualified name of the PayerApi service.
	PayerApiName = "xmtp.xmtpv4.payer_api.PayerApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PayerApiPublishClientEnvelopesProcedure is the fully-qualified name of the PayerApi's
	// PublishClientEnvelopes RPC.
	PayerApiPublishClientEnvelopesProcedure = "/xmtp.xmtpv4.payer_api.PayerApi/PublishClientEnvelopes"
	// PayerApiGetNodesProcedure is the fully-qualified name of the PayerApi's GetNodes RPC.
	PayerApiGetNodesProcedure = "/xmtp.xmtpv4.payer_api.PayerApi/GetNodes"
)

// PayerApiClient is a client for the xmtp.xmtpv4.payer_api.PayerApi service.
type PayerApiClient interface {
	// Publish envelope
	PublishClientEnvelopes(context.Context, *connect.Request[payer_api.PublishClientEnvelopesRequest]) (*connect.Response[payer_api.PublishClientEnvelopesResponse], error)
	GetNodes(context.Context, *connect.Request[payer_api.GetNodesRequest]) (*connect.Response[payer_api.GetNodesResponse], error)
}

// NewPayerApiClient constructs a client for the xmtp.xmtpv4.payer_api.PayerApi service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPayerApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PayerApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	payerApiMethods := payer_api.File_xmtpv4_payer_api_payer_api_proto.Services().ByName("PayerApi").Methods()
	return &payerApiClient{
		publishClientEnvelopes: connect.NewClient[payer_api.PublishClientEnvelopesRequest, payer_api.PublishClientEnvelopesResponse](
			httpClient,
			baseURL+PayerApiPublishClientEnvelopesProcedure,
			connect.WithSchema(payerApiMethods.ByName("PublishClientEnvelopes")),
			connect.WithClientOptions(opts...),
		),
		getNodes: connect.NewClient[payer_api.GetNodesRequest, payer_api.GetNodesResponse](
			httpClient,
			baseURL+PayerApiGetNodesProcedure,
			connect.WithSchema(payerApiMethods.ByName("GetNodes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// payerApiClient implements PayerApiClient.
type payerApiClient struct {
	publishClientEnvelopes *connect.Client[payer_api.PublishClientEnvelopesRequest, payer_api.PublishClientEnvelopesResponse]
	getNodes               *connect.Client[payer_api.GetNodesRequest, payer_api.GetNodesResponse]
}

// PublishClientEnvelopes calls xmtp.xmtpv4.payer_api.PayerApi.PublishClientEnvelopes.
func (c *payerApiClient) PublishClientEnvelopes(ctx context.Context, req *connect.Request[payer_api.PublishClientEnvelopesRequest]) (*connect.Response[payer_api.PublishClientEnvelopesResponse], error) {
	return c.publishClientEnvelopes.CallUnary(ctx, req)
}

// GetNodes calls xmtp.xmtpv4.payer_api.PayerApi.GetNodes.
func (c *payerApiClient) GetNodes(ctx context.Context, req *connect.Request[payer_api.GetNodesRequest]) (*connect.Response[payer_api.GetNodesResponse], error) {
	return c.getNodes.CallUnary(ctx, req)
}

// PayerApiHandler is an implementation of the xmtp.xmtpv4.payer_api.PayerApi service.
type PayerApiHandler interface {
	// Publish envelope
	PublishClientEnvelopes(context.Context, *connect.Request[payer_api.PublishClientEnvelopesRequest]) (*connect.Response[payer_api.PublishClientEnvelopesResponse], error)
	GetNodes(context.Context, *connect.Request[payer_api.GetNodesRequest]) (*connect.Response[payer_api.GetNodesResponse], error)
}

// NewPayerApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPayerApiHandler(svc PayerApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	payerApiMethods := payer_api.File_xmtpv4_payer_api_payer_api_proto.Services().ByName("PayerApi").Methods()
	payerApiPublishClientEnvelopesHandler := connect.NewUnaryHandler(
		PayerApiPublishClientEnvelopesProcedure,
		svc.PublishClientEnvelopes,
		connect.WithSchema(payerApiMethods.ByName("PublishClientEnvelopes")),
		connect.WithHandlerOptions(opts...),
	)
	payerApiGetNodesHandler := connect.NewUnaryHandler(
		PayerApiGetNodesProcedure,
		svc.GetNodes,
		connect.WithSchema(payerApiMethods.ByName("GetNodes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xmtp.xmtpv4.payer_api.PayerApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PayerApiPublishClientEnvelopesProcedure:
			payerApiPublishClientEnvelopesHandler.ServeHTTP(w, r)
		case PayerApiGetNodesProcedure:
			payerApiGetNodesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPayerApiHandler returns CodeUnimplemented from all methods.
type UnimplementedPayerApiHandler struct{}

func (UnimplementedPayerApiHandler) PublishClientEnvelopes(context.Context, *connect.Request[payer_api.PublishClientEnvelopesRequest]) (*connect.Response[payer_api.PublishClientEnvelopesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.payer_api.PayerApi.PublishClientEnvelopes is not implemented"))
}

func (UnimplementedPayerApiHandler) GetNodes(context.Context, *connect.Request[payer_api.GetNodesRequest]) (*connect.Response[payer_api.GetNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xmtp.xmtpv4.payer_api.PayerApi.GetNodes is not implemented"))
}
